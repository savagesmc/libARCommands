/*
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.
    * Neither the name of Parrot nor the names
    of its contributors may be used to endorse or promote products
    derived from this software without specific prior written
    permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
/********************************************
 *            AUTOGENERATED FILE            *
 *             DO NOT MODIFY                *
 ********************************************/

#define ARRAY_SIZE(_t) (sizeof(_t)/sizeof((_t)[0]))

/**
 * @brief libARCommands Tree dump.
 * @note Autogenerated file
 **/
#ifndef _ARSDK_ARCOMMANDS_TREE_H
#define _ARSDK_ARCOMMANDS_TREE_H
#include <inttypes.h>
#include <stdlib.h>
#include <libARCommands/ARCOMMANDS_Types.h>
#include <libARCommands/ARCOMMANDS_Ids.h>


enum arsdk_arg_type {
    ARSDK_ARG_TYPE_ENUM,
    ARSDK_ARG_TYPE_U8,
    ARSDK_ARG_TYPE_I8,
    ARSDK_ARG_TYPE_U16,
    ARSDK_ARG_TYPE_I16,
    ARSDK_ARG_TYPE_U32,
    ARSDK_ARG_TYPE_I32,
    ARSDK_ARG_TYPE_U64,
    ARSDK_ARG_TYPE_I64,
    ARSDK_ARG_TYPE_FLOAT,
    ARSDK_ARG_TYPE_DOUBLE,
    ARSDK_ARG_TYPE_STRING,
};

struct arsdk_enum {
    const char               *name;
    unsigned int              value;
    const char               *comment;
};

struct arsdk_arg {
    const char               *name;
    enum arsdk_arg_type       type;
    struct arsdk_enum        *enums;
    unsigned int              nenums;
    const char               *comment;
    void                     *priv;
};

struct arsdk_cmd {
    const char               *name;
    unsigned int              id;
    struct arsdk_arg         *args;
    unsigned int              nargs;
    const char               *comment;
    void                     *priv;
};

struct arsdk_class {
    const char               *name;
    unsigned int              ident;
    struct arsdk_cmd         *cmds;
    unsigned int              ncmds;
    const char               *comment;
    void                     *priv;
};

struct arsdk_project {
    const char               *name;
    eARCOMMANDS_ID_FEATURE    ident;
    struct arsdk_class       *classes;
    unsigned int              nclasses;
    const char               *comment;
    void                     *priv;
};

static struct arsdk_arg generic_defaultCls_SetDroneSettings_arg_tab[] = {
  {
    .name = "settings",
    .enums = NULL,
    .nenums = 0,
    .comment = "Drone settings"
  },
};
static struct arsdk_arg generic_defaultCls_DroneSettingsChanged_arg_tab[] = {
  {
    .name = "settings",
    .enums = NULL,
    .nenums = 0,
    .comment = "Drone settings changed"
  },
};
static struct arsdk_cmd generic_defaultCls_cmd_tab[] = {
  {
    .name = "default",
    .id = ARCOMMANDS_ID_GENERIC_CMD_DEFAULT,
    .args = NULL,
    .nargs = 0,
    .comment = "default"
  },
  {
    .name = "SetDroneSettings",
    .id = ARCOMMANDS_ID_GENERIC_CMD_SETDRONESETTINGS,
    .args = generic_defaultCls_SetDroneSettings_arg_tab,
    .nargs = ARRAY_SIZE(generic_defaultCls_SetDroneSettings_arg_tab),
    .comment = "SetDroneSettings"
  },
  {
    .name = "DroneSettingsChanged",
    .id = ARCOMMANDS_ID_GENERIC_CMD_DRONESETTINGSCHANGED,
    .args = generic_defaultCls_DroneSettingsChanged_arg_tab,
    .nargs = ARRAY_SIZE(generic_defaultCls_DroneSettingsChanged_arg_tab),
    .comment = "Drone Settings"
  },
};
static struct arsdk_class generic_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = generic_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(generic_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg animation_defaultCls_start_flip_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Type of the flip\nAnimation flip type."
  },
};
static struct arsdk_arg animation_defaultCls_start_horizontal_panorama_arg_tab[] = {
  {
    .name = "provided_params",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nHorizontal panorama configuration parameter."
  },
  {
    .name = "rotation_angle",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise.\nNot used when rotation angle of provided_params param is 0."
  },
  {
    .name = "rotation_speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The desired rotation speed of the anim in rad/s\nNot used when rotation speed of provided_params param is 0."
  },
};
static struct arsdk_arg animation_defaultCls_start_dronie_arg_tab[] = {
  {
    .name = "provided_params",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nDronie animation configuration parameter."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired speed in m/s.\nNot used when speed of provided_params param is 0."
  },
  {
    .name = "distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired dronie distance in m (length of the hypotenuse).\nNot used when distance of provided_params param is 0."
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_start_horizontal_reveal_arg_tab[] = {
  {
    .name = "provided_params",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nHorizontal reveal animation configuration parameter."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired speed in m/s.\nNot used when speed of provided_params param is 0."
  },
  {
    .name = "distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired distance in m.\nNot used when distance of provided_params param is 0."
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_start_vertical_reveal_arg_tab[] = {
  {
    .name = "provided_params",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nVertical reveal animation configuration parameter."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired speed in m/s.\nNot used when speed of provided_params param is 0."
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired vertical distance in m.\nNot used when vertical distance of provided_params param is 0."
  },
  {
    .name = "rotation_angle",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise.\nNot used when rotation angle of provided_params param is 0."
  },
  {
    .name = "rotation_speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The desired rotation speed of the anim in rad/s\nNot used when rotation speed of provided_params param is 0."
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_start_spiral_arg_tab[] = {
  {
    .name = "provided_params",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nSpiral animation configuration parameter."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired speed in m/s.\nNot used when speed of provided_params param is 0."
  },
  {
    .name = "radius_variation",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired relative radius variation in m.\nA value of 2 means that the ending radius will be twice as big as the starting radius.\nA value of -2 means that the ending radius will half of the size of the starting radius.\nA value of 1 means that the radius will not change during the animation.\nNot used when radius variation of provided_params param is 0."
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired vertical distance in m.\nIf negative, the spiral will be directed to the ground.\nNot used when vertical distance of provided_params param is 0."
  },
  {
    .name = "revolution_nb",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The number of revolution (in turn).\nPositive value makes a clockwise spiral, negative is anti-clockwise.\nExample: 1.5 makes an entire turn plus half of a turn"
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_start_parabola_arg_tab[] = {
  {
    .name = "provided_params",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nParabola animation configuration parameter."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired speed in m/s.\nNot used when speed of provided_params param is 0."
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired vertical distance in m.\nNot used when vertical distance of provided_params param is 0."
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_start_candle_arg_tab[] = {
  {
    .name = "provided_params",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nCandle animation configuration parameter."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired speed in m/s.\nNot used when speed of provided_params param is 0."
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired vertical distance in m.\nNot used when vertical distance of provided_params param is 0."
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_start_dolly_slide_arg_tab[] = {
  {
    .name = "provided_params",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield of the config parameters on which given values should be used.\nSetting a bit to 1 means that the corresponding parameter should be used,\notherwise default value should be used.\nDolly slide animation configuration parameter."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired speed in m/s.\nNot used when speed of provided_params param is 0."
  },
  {
    .name = "angle",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired drone-target-destination angle in rad.\nNot used when angle of provided_params param is 0."
  },
  {
    .name = "horizontal_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired horizontal distance in m..\nNot used when angle of provided_params param is 0."
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired play mode.\nNot used when play mode of provided_params param is 0.\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_availability_arg_tab[] = {
  {
    .name = "values",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield of available animation types\nAnimation type."
  },
};
static struct arsdk_arg animation_defaultCls_state_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Type of the animation. None if no animation is currently running or canceling.\nAnimation type."
  },
  {
    .name = "percent",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Percentage of the animation (only accurate if type is not none) (from 0 to 100)."
  },
};
static struct arsdk_arg animation_defaultCls_flip_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the animation\nAnimation state."
  },
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Type of the flip (only accurate if state is not idle)\nAnimation flip type."
  },
};
static struct arsdk_arg animation_defaultCls_horizontal_panorama_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the animation\nAnimation state."
  },
  {
    .name = "rotation_angle",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise.\n(only accurate if state is not idle)"
  },
  {
    .name = "rotation_speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The rotation speed of the anim in rad/s\n(only accurate if state is not idle)"
  },
};
static struct arsdk_arg animation_defaultCls_dronie_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the animation\nAnimation state."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed in m/s.\n(only accurate if state is not idle)"
  },
  {
    .name = "distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Dronie distance in m.\n(only accurate if state is not idle)"
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Play mode.\n(only accurate if state is not idle)\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_horizontal_reveal_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the animation\nAnimation state."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed in m/s.\n(only accurate if state is not idle)"
  },
  {
    .name = "distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance in m.\n(only accurate if state is not idle)"
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Play mode.\n(only accurate if state is not idle)\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_vertical_reveal_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the animation\nAnimation state."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed in m/s.\n(only accurate if state is not idle)"
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Vertical distance in m.\n(only accurate if state is not idle)"
  },
  {
    .name = "rotation_angle",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Rotation angle in rad. Positive value makes a clockwise panorama, negative is anti-clockwise.\n(only accurate if state is not idle)"
  },
  {
    .name = "rotation_speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The rotation speed of the anim in rad/s\n(only accurate if state is not idle)"
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Play mode.\n(only accurate if state is not idle)\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_spiral_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the animation\nAnimation state."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed in m/s.\n(only accurate if state is not idle)"
  },
  {
    .name = "radius_variation",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Relative radius variation in m.\n(only accurate if state is not idle)"
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Vertical distance in m. Negative value means the animation is directed toward the ground.\n(only accurate if state is not idle)"
  },
  {
    .name = "revolution_nb",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The number of revolution (in turn).\n(only accurate if state is not idle)"
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Play mode.\n(only accurate if state is not idle)\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_parabola_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the animation\nAnimation state."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed in m/s.\n(only accurate if state is not idle)"
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Vertical distance in m.\n(only accurate if state is not idle)"
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Play mode.\n(only accurate if state is not idle)\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_candle_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the animation\nAnimation state."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed in m/s.\n(only accurate if state is not idle)"
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Vertical distance in m.\n(only accurate if state is not idle)"
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Play mode.\n(only accurate if state is not idle)\nAnimation play mode."
  },
};
static struct arsdk_arg animation_defaultCls_dolly_slide_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the animation\nAnimation state."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed in m/s.\n(only accurate if state is not idle)"
  },
  {
    .name = "angle",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Drone-target-destination angle in rad.\n(only accurate if state is not idle)"
  },
  {
    .name = "horizontal_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Horizontal distance in m.\n(only accurate if state is not idle)"
  },
  {
    .name = "play_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Play mode.\n(only accurate if state is not idle)\nAnimation play mode."
  },
};
static struct arsdk_cmd animation_defaultCls_cmd_tab[] = {
  {
    .name = "cancel",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_CANCEL,
    .args = NULL,
    .nargs = 0,
    .comment = "Cancel current animation"
  },
  {
    .name = "start_flip",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_START_FLIP,
    .args = animation_defaultCls_start_flip_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_start_flip_arg_tab),
    .comment = "Start flip animation"
  },
  {
    .name = "start_horizontal_panorama",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_START_HORIZONTAL_PANORAMA,
    .args = animation_defaultCls_start_horizontal_panorama_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_start_horizontal_panorama_arg_tab),
    .comment = "Start horizontal panorama"
  },
  {
    .name = "start_dronie",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_START_DRONIE,
    .args = animation_defaultCls_start_dronie_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_start_dronie_arg_tab),
    .comment = "Start dronie"
  },
  {
    .name = "start_horizontal_reveal",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_START_HORIZONTAL_REVEAL,
    .args = animation_defaultCls_start_horizontal_reveal_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_start_horizontal_reveal_arg_tab),
    .comment = "Start horizontal reveal"
  },
  {
    .name = "start_vertical_reveal",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_START_VERTICAL_REVEAL,
    .args = animation_defaultCls_start_vertical_reveal_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_start_vertical_reveal_arg_tab),
    .comment = "Start vertical reveal"
  },
  {
    .name = "start_spiral",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_START_SPIRAL,
    .args = animation_defaultCls_start_spiral_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_start_spiral_arg_tab),
    .comment = "Start spiral"
  },
  {
    .name = "start_parabola",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_START_PARABOLA,
    .args = animation_defaultCls_start_parabola_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_start_parabola_arg_tab),
    .comment = "Start parabola"
  },
  {
    .name = "start_candle",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_START_CANDLE,
    .args = animation_defaultCls_start_candle_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_start_candle_arg_tab),
    .comment = "Start candle"
  },
  {
    .name = "start_dolly_slide",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_START_DOLLY_SLIDE,
    .args = animation_defaultCls_start_dolly_slide_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_start_dolly_slide_arg_tab),
    .comment = "Start a dolly slide"
  },
  {
    .name = "availability",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_AVAILABILITY,
    .args = animation_defaultCls_availability_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_availability_arg_tab),
    .comment = "Availability of the animations"
  },
  {
    .name = "state",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_STATE,
    .args = animation_defaultCls_state_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_state_arg_tab),
    .comment = "State of the animation"
  },
  {
    .name = "flip_state",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_FLIP_STATE,
    .args = animation_defaultCls_flip_state_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_flip_state_arg_tab),
    .comment = "Flip state"
  },
  {
    .name = "horizontal_panorama_state",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_HORIZONTAL_PANORAMA_STATE,
    .args = animation_defaultCls_horizontal_panorama_state_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_horizontal_panorama_state_arg_tab),
    .comment = "Horizontal panorama state"
  },
  {
    .name = "dronie_state",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_DRONIE_STATE,
    .args = animation_defaultCls_dronie_state_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_dronie_state_arg_tab),
    .comment = "Dronie state"
  },
  {
    .name = "horizontal_reveal_state",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_HORIZONTAL_REVEAL_STATE,
    .args = animation_defaultCls_horizontal_reveal_state_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_horizontal_reveal_state_arg_tab),
    .comment = "Horizontal reveal state"
  },
  {
    .name = "vertical_reveal_state",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_VERTICAL_REVEAL_STATE,
    .args = animation_defaultCls_vertical_reveal_state_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_vertical_reveal_state_arg_tab),
    .comment = "Vertical reveal state"
  },
  {
    .name = "spiral_state",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_SPIRAL_STATE,
    .args = animation_defaultCls_spiral_state_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_spiral_state_arg_tab),
    .comment = "Spiral state"
  },
  {
    .name = "parabola_state",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_PARABOLA_STATE,
    .args = animation_defaultCls_parabola_state_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_parabola_state_arg_tab),
    .comment = "Parabola state"
  },
  {
    .name = "candle_state",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_CANDLE_STATE,
    .args = animation_defaultCls_candle_state_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_candle_state_arg_tab),
    .comment = "Candle state"
  },
  {
    .name = "dolly_slide_state",
    .id = ARCOMMANDS_ID_ANIMATION_CMD_DOLLY_SLIDE_STATE,
    .args = animation_defaultCls_dolly_slide_state_arg_tab,
    .nargs = ARRAY_SIZE(animation_defaultCls_dolly_slide_state_arg_tab),
    .comment = "Dolly slide state"
  },
};
static struct arsdk_class animation_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = animation_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(animation_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg ARDrone3_Piloting_PCMD_arg_tab[] = {
  {
    .name = "flag",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Boolean flag: 1 if the roll and pitch values should be taken in consideration. 0 otherwise"
  },
  {
    .name = "roll",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Roll angle as signed percentage.\nOn copters:\nRoll angle expressed as signed percentage of the max pitch/roll setting, in range [-100, 100]\n-100 corresponds to a roll angle of max pitch/roll to the left (drone will fly left)\n100 corresponds to a roll angle of max pitch/roll to the right (drone will fly right)\nThis value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.\n\nOn fixed wings:\nRoll angle expressed as signed percentage of the physical max roll of the wing, in range [-100, 100]\nNegative value makes the plane fly to the left\nPositive value makes the plane fly to the right"
  },
  {
    .name = "pitch",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pitch angle as signed percentage.\nOn copters:\nExpressed as signed percentage of the max pitch/roll setting, in range [-100, 100]\n-100 corresponds to a pitch angle of max pitch/roll towards sky (drone will fly backward)\n100 corresponds to a pitch angle of max pitch/roll towards ground (drone will fly forward)\nThis value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.\n\nOn fixed wings:\nExpressed as signed percentage of the physical max pitch of the wing, in range [-100, 100]\nNegative value makes the plane fly in direction of the sky\nPositive value makes the plane fly in direction of the ground"
  },
  {
    .name = "yaw",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Yaw rotation speed as signed percentage.\nOn copters:\nExpressed as signed percentage of the max yaw rotation speed setting, in range [-100, 100].\n-100 corresponds to a counter-clockwise rotation of max yaw rotation speed\n100 corresponds to a clockwise rotation of max yaw rotation speed\nThis value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.\n\nOn fixed wings:\nGiving more than a fixed value (75% for the moment) triggers a circle.\nPositive value will trigger a clockwise circling\nNegative value will trigger a counter-clockwise circling"
  },
  {
    .name = "gaz",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Throttle as signed percentage.\nOn copters:\nExpressed as signed percentage of the max vertical speed setting, in range [-100, 100]\n-100 corresponds to a max vertical speed towards ground\n100 corresponds to a max vertical speed towards sky\nThis value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter.\nDuring the landing phase, putting some positive gaz will cancel the land.\n\nOn fixed wings:\nExpressed as signed percentage of the physical max throttle, in range [-100, 100]\nNegative value makes the plane fly slower\nPositive value makes the plane fly faster"
  },
  {
    .name = "timestampAndSeqNum",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Command timestamp in milliseconds (low 24 bits) + command sequence number (high 8 bits) [0;255]."
  },
};
static struct arsdk_arg ARDrone3_Piloting_NavigateHome_arg_tab[] = {
  {
    .name = "start",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 to start the navigate home, 0 to stop it"
  },
};
static struct arsdk_arg ARDrone3_Piloting_AutoTakeOffMode_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of automatic take off mode (1 for autotake off enabled)"
  },
};
static struct arsdk_arg ARDrone3_Piloting_moveBy_arg_tab[] = {
  {
    .name = "dX",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wanted displacement along the front axis [m]"
  },
  {
    .name = "dY",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wanted displacement along the right axis [m]"
  },
  {
    .name = "dZ",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wanted displacement along the down axis [m]"
  },
  {
    .name = "dPsi",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wanted rotation of heading [rad]"
  },
};
static struct arsdk_arg ARDrone3_Piloting_UserTakeOff_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of user take off mode\n- 1 to enter in user take off.\n- 0 to exit from user take off."
  },
};
static struct arsdk_enum ARDrone3_Piloting_Circle_direction_enum_tab[] = {
  {
    .name = "CW",
    .value = ARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION_CW,
    .comment = "Circling ClockWise"
  },
  {
    .name = "CCW",
    .value = ARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION_CCW,
    .comment = "Circling Counter ClockWise"
  },
  {
    .name = "default",
    .value = ARCOMMANDS_ARDRONE3_PILOTING_CIRCLE_DIRECTION_DEFAULT,
    .comment = "Use drone default Circling direction set by CirclingDirection cmd"
  },
};
static struct arsdk_arg ARDrone3_Piloting_Circle_arg_tab[] = {
  {
    .name = "direction",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_Piloting_Circle_direction_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_Piloting_Circle_direction_enum_tab),
    .comment = "The circling direction"
  },
};
static struct arsdk_enum ARDrone3_Piloting_moveTo_orientation_mode_enum_tab[] = {
  {
    .name = "NONE",
    .value = ARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE_NONE,
    .comment = "The drone won't change its orientation"
  },
  {
    .name = "TO_TARGET",
    .value = ARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE_TO_TARGET,
    .comment = "The drone will make a rotation to look in direction of the given location"
  },
  {
    .name = "HEADING_START",
    .value = ARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE_HEADING_START,
    .comment = "The drone will orientate itself to the given heading before moving to the location"
  },
  {
    .name = "HEADING_DURING",
    .value = ARCOMMANDS_ARDRONE3_PILOTING_MOVETO_ORIENTATION_MODE_HEADING_DURING,
    .comment = "The drone will orientate itself to the given heading while moving to the location"
  },
};
static struct arsdk_arg ARDrone3_Piloting_moveTo_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Latitude of the location (in degrees) to reach"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Longitude of the location (in degrees) to reach"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude above sea level (in m) to reach"
  },
  {
    .name = "orientation_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_Piloting_moveTo_orientation_mode_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_Piloting_moveTo_orientation_mode_enum_tab),
    .comment = "Orientation mode of the move to"
  },
  {
    .name = "heading",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Heading (relative to the North in degrees).\nThis value is only used if the orientation mode is HEADING_START or HEADING_DURING"
  },
};
static struct arsdk_arg ARDrone3_Piloting_StartPilotedPOI_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Latitude of the location (in degrees) to look at"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Longitude of the location (in degrees) to look at"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude above sea level (in m) to look at"
  },
};
static struct arsdk_enum ARDrone3_Animations_Flip_direction_enum_tab[] = {
  {
    .name = "front",
    .value = ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_FRONT,
    .comment = "Flip direction front"
  },
  {
    .name = "back",
    .value = ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_BACK,
    .comment = "Flip direction back"
  },
  {
    .name = "right",
    .value = ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_RIGHT,
    .comment = "Flip direction right"
  },
  {
    .name = "left",
    .value = ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_LEFT,
    .comment = "Flip direction left"
  },
};
static struct arsdk_arg ARDrone3_Animations_Flip_arg_tab[] = {
  {
    .name = "direction",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_Animations_Flip_direction_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_Animations_Flip_direction_enum_tab),
    .comment = "Direction for the flip"
  },
};
static struct arsdk_arg ARDrone3_Camera_Orientation_arg_tab[] = {
  {
    .name = "tilt",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Tilt camera consign for the drone (in degree)\nThe value is saturated by the drone.\nSaturation value is sent by thre drone through CameraSettingsChanged command."
  },
  {
    .name = "pan",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pan camera consign for the drone (in degree)\nThe value is saturated by the drone.\nSaturation value is sent by thre drone through CameraSettingsChanged command."
  },
};
static struct arsdk_arg ARDrone3_Camera_OrientationV2_arg_tab[] = {
  {
    .name = "tilt",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Tilt camera consign for the drone (in degree)\nThe value is saturated by the drone.\nSaturation value is sent by thre drone through CameraSettingsChanged command."
  },
  {
    .name = "pan",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pan camera consign for the drone (in degree)\nThe value is saturated by the drone.\nSaturation value is sent by thre drone through CameraSettingsChanged command."
  },
};
static struct arsdk_arg ARDrone3_Camera_Velocity_arg_tab[] = {
  {
    .name = "tilt",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Tilt camera velocity consign [deg/s]\nNegative tilt velocity move camera to bottom\nPositive tilt velocity move camera to top"
  },
  {
    .name = "pan",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pan camera velocity consign [deg/s]\nNegative pan velocity move camera to left\nPositive pan velocity move camera to right"
  },
};
static struct arsdk_arg ARDrone3_MediaRecord_Picture_arg_tab[] = {
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id to take picture"
  },
};
static struct arsdk_enum ARDrone3_MediaRecord_Video_record_enum_tab[] = {
  {
    .name = "stop",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_STOP,
    .comment = "Stop the video recording"
  },
  {
    .name = "start",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEO_RECORD_START,
    .comment = "Start the video recording"
  },
};
static struct arsdk_arg ARDrone3_MediaRecord_Video_arg_tab[] = {
  {
    .name = "record",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecord_Video_record_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecord_Video_record_enum_tab),
    .comment = "Command to record video"
  },
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id to record"
  },
};
static struct arsdk_enum ARDrone3_MediaRecord_VideoV2_record_enum_tab[] = {
  {
    .name = "stop",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD_STOP,
    .comment = "Stop the video recording"
  },
  {
    .name = "start",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORD_VIDEOV2_RECORD_START,
    .comment = "Start the video recording"
  },
};
static struct arsdk_arg ARDrone3_MediaRecord_VideoV2_arg_tab[] = {
  {
    .name = "record",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecord_VideoV2_record_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecord_VideoV2_record_enum_tab),
    .comment = "Command to record video"
  },
};
static struct arsdk_enum ARDrone3_Network_WifiScan_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_5GHZ,
    .comment = "5 GHz band"
  },
  {
    .name = "all",
    .value = ARCOMMANDS_ARDRONE3_NETWORK_WIFISCAN_BAND_ALL,
    .comment = "Both 2.4 and 5 GHz bands"
  },
};
static struct arsdk_arg ARDrone3_Network_WifiScan_arg_tab[] = {
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_Network_WifiScan_band_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_Network_WifiScan_band_enum_tab),
    .comment = "The band(s) : 2.4 Ghz, 5 Ghz, or both"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_MaxAltitude_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current altitude max in m"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_MaxTilt_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current tilt max in degree"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_AbsolutControl_arg_tab[] = {
  {
    .name = "on",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 to enable, 0 to disable"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_MaxDistance_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max distance in meter"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_NoFlyOverMaxDistance_arg_tab[] = {
  {
    .name = "shouldNotFlyOver",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if the drone can't fly further than max distance, 0 if no limitation on the drone should be done"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_setAutonomousFlightMaxHorizontalSpeed_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "maximum horizontal speed [m/s]"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_setAutonomousFlightMaxVerticalSpeed_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "maximum vertical speed [m/s]"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_setAutonomousFlightMaxHorizontalAcceleration_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "maximum horizontal acceleration [m/s2]"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_setAutonomousFlightMaxVerticalAcceleration_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "maximum vertical acceleration [m/s2]"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_setAutonomousFlightMaxRotationSpeed_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "maximum yaw rotation speed [deg/s]"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_BankedTurn_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 to enable, 0 to disable"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_MinAltitude_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current altitude min in m"
  },
};
static struct arsdk_enum ARDrone3_PilotingSettings_CirclingDirection_value_enum_tab[] = {
  {
    .name = "CW",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_CIRCLINGDIRECTION_VALUE_CW,
    .comment = "Circling ClockWise"
  },
  {
    .name = "CCW",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_CIRCLINGDIRECTION_VALUE_CCW,
    .comment = "Circling Counter ClockWise"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_CirclingDirection_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingSettings_CirclingDirection_value_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingSettings_CirclingDirection_value_enum_tab),
    .comment = "The circling direction"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_CirclingRadius_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "The circling radius in meter"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_CirclingAltitude_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "The circling altitude in meter"
  },
};
static struct arsdk_enum ARDrone3_PilotingSettings_PitchMode_value_enum_tab[] = {
  {
    .name = "NORMAL",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_PITCHMODE_VALUE_NORMAL,
    .comment = "Positive pitch values will make the drone lower its nose.\nNegative pitch values will make the drone raise its nose."
  },
  {
    .name = "INVERTED",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSETTINGS_PITCHMODE_VALUE_INVERTED,
    .comment = "Pitch commands are inverted.\nPositive pitch values will make the drone raise its nose.\nNegative pitch values will make the drone lower its nose."
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_PitchMode_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingSettings_PitchMode_value_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingSettings_PitchMode_value_enum_tab),
    .comment = "The Pitch mode"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettings_SetMotionDetectionMode_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 to enable the motion detection, 0 to disable it."
  },
};
static struct arsdk_arg ARDrone3_SpeedSettings_MaxVerticalSpeed_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max vertical speed in m/s"
  },
};
static struct arsdk_arg ARDrone3_SpeedSettings_MaxRotationSpeed_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max yaw rotation speed in degree/s"
  },
};
static struct arsdk_arg ARDrone3_SpeedSettings_HullProtection_arg_tab[] = {
  {
    .name = "present",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if present, 0 if not present"
  },
};
static struct arsdk_arg ARDrone3_SpeedSettings_Outdoor_arg_tab[] = {
  {
    .name = "outdoor",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if outdoor flight, 0 if indoor flight"
  },
};
static struct arsdk_arg ARDrone3_SpeedSettings_MaxPitchRollRotationSpeed_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max pitch/roll rotation speed in degree/s"
  },
};
static struct arsdk_enum ARDrone3_NetworkSettings_WifiSelection_type_enum_tab[] = {
  {
    .name = "auto",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_AUTO,
    .comment = "Auto selection"
  },
  {
    .name = "manual",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_TYPE_MANUAL,
    .comment = "Manual selection"
  },
};
static struct arsdk_enum ARDrone3_NetworkSettings_WifiSelection_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_5GHZ,
    .comment = "5 GHz band"
  },
  {
    .name = "all",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISELECTION_BAND_ALL,
    .comment = "Both 2.4 and 5 GHz bands"
  },
};
static struct arsdk_arg ARDrone3_NetworkSettings_WifiSelection_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkSettings_WifiSelection_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkSettings_WifiSelection_type_enum_tab),
    .comment = "The type of wifi selection (auto, manual)"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkSettings_WifiSelection_band_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkSettings_WifiSelection_band_enum_tab),
    .comment = "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel (not used in auto mode)"
  },
};
static struct arsdk_enum ARDrone3_NetworkSettings_wifiSecurity_type_enum_tab[] = {
  {
    .name = "open",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_TYPE_OPEN,
    .comment = "Wifi is not protected by any security (default)"
  },
  {
    .name = "wpa2",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_TYPE_WPA2,
    .comment = "Wifi is protected by wpa2"
  },
};
static struct arsdk_enum ARDrone3_NetworkSettings_wifiSecurity_keyType_enum_tab[] = {
  {
    .name = "plain",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGS_WIFISECURITY_KEYTYPE_PLAIN,
    .comment = "Key is plain text, not encrypted"
  },
};
static struct arsdk_arg ARDrone3_NetworkSettings_wifiSecurity_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkSettings_wifiSecurity_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkSettings_wifiSecurity_type_enum_tab),
    .comment = "The type of wifi security (open, wpa2)"
  },
  {
    .name = "key",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The key to secure the network (empty if type is open)"
  },
  {
    .name = "keyType",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkSettings_wifiSecurity_keyType_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkSettings_wifiSecurity_keyType_enum_tab),
    .comment = "Type of the key"
  },
};
static struct arsdk_enum ARDrone3_PictureSettings_PictureFormatSelection_type_enum_tab[] = {
  {
    .name = "raw",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_RAW,
    .comment = "Take raw image"
  },
  {
    .name = "jpeg",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_JPEG,
    .comment = "Take a 4:3 jpeg photo"
  },
  {
    .name = "snapshot",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_SNAPSHOT,
    .comment = "Take a 16:9 snapshot from camera"
  },
  {
    .name = "jpeg_fisheye",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_PICTUREFORMATSELECTION_TYPE_JPEG_FISHEYE,
    .comment = "Take jpeg fisheye image only"
  },
};
static struct arsdk_arg ARDrone3_PictureSettings_PictureFormatSelection_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettings_PictureFormatSelection_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettings_PictureFormatSelection_type_enum_tab),
    .comment = "The type of photo format"
  },
};
static struct arsdk_enum ARDrone3_PictureSettings_AutoWhiteBalanceSelection_type_enum_tab[] = {
  {
    .name = "auto",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_AUTO,
    .comment = "Auto guess of best white balance params"
  },
  {
    .name = "tungsten",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_TUNGSTEN,
    .comment = "Tungsten white balance"
  },
  {
    .name = "daylight",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_DAYLIGHT,
    .comment = "Daylight white balance"
  },
  {
    .name = "cloudy",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_CLOUDY,
    .comment = "Cloudy white balance"
  },
  {
    .name = "cool_white",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_AUTOWHITEBALANCESELECTION_TYPE_COOL_WHITE,
    .comment = "White balance for a flash"
  },
};
static struct arsdk_arg ARDrone3_PictureSettings_AutoWhiteBalanceSelection_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettings_AutoWhiteBalanceSelection_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettings_AutoWhiteBalanceSelection_type_enum_tab),
    .comment = "The type auto white balance"
  },
};
static struct arsdk_arg ARDrone3_PictureSettings_ExpositionSelection_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Exposition value (bounds given by ExpositionChanged arg min and max, by default [-3:3])"
  },
};
static struct arsdk_arg ARDrone3_PictureSettings_SaturationSelection_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Saturation value (bounds given by SaturationChanged arg min and max, by default [-100:100])"
  },
};
static struct arsdk_arg ARDrone3_PictureSettings_TimelapseSelection_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if timelapse is enabled, 0 otherwise"
  },
  {
    .name = "interval",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "interval in seconds for taking pictures"
  },
};
static struct arsdk_arg ARDrone3_PictureSettings_VideoAutorecordSelection_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if video autorecord is enabled, 0 otherwise"
  },
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id to take video"
  },
};
static struct arsdk_enum ARDrone3_PictureSettings_VideoStabilizationMode_mode_enum_tab[] = {
  {
    .name = "roll_pitch",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE_ROLL_PITCH,
    .comment = "Video flat on roll and pitch"
  },
  {
    .name = "pitch",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE_PITCH,
    .comment = "Video flat on pitch only"
  },
  {
    .name = "roll",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE_ROLL,
    .comment = "Video flat on roll only"
  },
  {
    .name = "none",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOSTABILIZATIONMODE_MODE_NONE,
    .comment = "Video follows drone angles"
  },
};
static struct arsdk_arg ARDrone3_PictureSettings_VideoStabilizationMode_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettings_VideoStabilizationMode_mode_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettings_VideoStabilizationMode_mode_enum_tab),
    .comment = "Video stabilization mode"
  },
};
static struct arsdk_enum ARDrone3_PictureSettings_VideoRecordingMode_mode_enum_tab[] = {
  {
    .name = "quality",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORECORDINGMODE_MODE_QUALITY,
    .comment = "Maximize recording quality."
  },
  {
    .name = "time",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORECORDINGMODE_MODE_TIME,
    .comment = "Maximize recording time."
  },
};
static struct arsdk_arg ARDrone3_PictureSettings_VideoRecordingMode_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettings_VideoRecordingMode_mode_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettings_VideoRecordingMode_mode_enum_tab),
    .comment = "Video recording mode"
  },
};
static struct arsdk_enum ARDrone3_PictureSettings_VideoFramerate_framerate_enum_tab[] = {
  {
    .name = "24_FPS",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE_24_FPS,
    .comment = "23.976 frames per second."
  },
  {
    .name = "25_FPS",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE_25_FPS,
    .comment = "25 frames per second."
  },
  {
    .name = "30_FPS",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEOFRAMERATE_FRAMERATE_30_FPS,
    .comment = "29.97 frames per second."
  },
};
static struct arsdk_arg ARDrone3_PictureSettings_VideoFramerate_arg_tab[] = {
  {
    .name = "framerate",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettings_VideoFramerate_framerate_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettings_VideoFramerate_framerate_enum_tab),
    .comment = "Video framerate"
  },
};
static struct arsdk_enum ARDrone3_PictureSettings_VideoResolutions_type_enum_tab[] = {
  {
    .name = "rec1080_stream480",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORESOLUTIONS_TYPE_REC1080_STREAM480,
    .comment = "1080p recording, 480p streaming."
  },
  {
    .name = "rec720_stream720",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGS_VIDEORESOLUTIONS_TYPE_REC720_STREAM720,
    .comment = "720p recording, 720p streaming."
  },
};
static struct arsdk_arg ARDrone3_PictureSettings_VideoResolutions_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettings_VideoResolutions_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettings_VideoResolutions_type_enum_tab),
    .comment = "Video streaming and recording resolutions"
  },
};
static struct arsdk_arg ARDrone3_MediaStreaming_VideoEnable_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 to enable, 0 to disable."
  },
};
static struct arsdk_enum ARDrone3_MediaStreaming_VideoStreamMode_mode_enum_tab[] = {
  {
    .name = "low_latency",
    .value = ARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE_LOW_LATENCY,
    .comment = "Minimize latency with average reliability (best for piloting)."
  },
  {
    .name = "high_reliability",
    .value = ARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE_HIGH_RELIABILITY,
    .comment = "Maximize the reliability with an average latency (best when streaming quality is important but not the latency)."
  },
  {
    .name = "high_reliability_low_framerate",
    .value = ARCOMMANDS_ARDRONE3_MEDIASTREAMING_VIDEOSTREAMMODE_MODE_HIGH_RELIABILITY_LOW_FRAMERATE,
    .comment = "Maximize the reliability using a framerate decimation with an average latency (best when streaming quality is important but not the latency)."
  },
};
static struct arsdk_arg ARDrone3_MediaStreaming_VideoStreamMode_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaStreaming_VideoStreamMode_mode_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaStreaming_VideoStreamMode_mode_enum_tab),
    .comment = "stream mode"
  },
};
static struct arsdk_arg ARDrone3_GPSSettings_SetHome_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Home latitude in decimal degrees"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Home longitude in decimal degrees"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Home altitude in meters"
  },
};
static struct arsdk_arg ARDrone3_GPSSettings_SendControllerGPS_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "GPS latitude in decimal degrees"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "GPS longitude in decimal degrees"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "GPS altitude in meters"
  },
  {
    .name = "horizontalAccuracy",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Horizontal Accuracy in meter ; equal -1 if no horizontal Accuracy"
  },
  {
    .name = "verticalAccuracy",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Vertical Accuracy in meter ; equal -1 if no vertical Accuracy"
  },
};
static struct arsdk_enum ARDrone3_GPSSettings_HomeType_type_enum_tab[] = {
  {
    .name = "TAKEOFF",
    .value = ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_TAKEOFF,
    .comment = "The drone will try to return to the take off position"
  },
  {
    .name = "PILOT",
    .value = ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_PILOT,
    .comment = "The drone will try to return to the pilot position"
  },
  {
    .name = "FOLLOWEE",
    .value = ARCOMMANDS_ARDRONE3_GPSSETTINGS_HOMETYPE_TYPE_FOLLOWEE,
    .comment = "The drone will try to return to the target of the current (or last) follow me"
  },
};
static struct arsdk_arg ARDrone3_GPSSettings_HomeType_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_GPSSettings_HomeType_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_GPSSettings_HomeType_type_enum_tab),
    .comment = "The type of the home position"
  },
};
static struct arsdk_arg ARDrone3_GPSSettings_ReturnHomeDelay_arg_tab[] = {
  {
    .name = "delay",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Delay in second"
  },
};
static struct arsdk_enum ARDrone3_Antiflickering_electricFrequency_frequency_enum_tab[] = {
  {
    .name = "fiftyHertz",
    .value = ARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY_FIFTYHERTZ,
    .comment = "Electric frequency of the country is 50hz"
  },
  {
    .name = "sixtyHertz",
    .value = ARCOMMANDS_ARDRONE3_ANTIFLICKERING_ELECTRICFREQUENCY_FREQUENCY_SIXTYHERTZ,
    .comment = "Electric frequency of the country is 60hz"
  },
};
static struct arsdk_arg ARDrone3_Antiflickering_electricFrequency_arg_tab[] = {
  {
    .name = "frequency",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_Antiflickering_electricFrequency_frequency_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_Antiflickering_electricFrequency_frequency_enum_tab),
    .comment = "Type of the electric frequency"
  },
};
static struct arsdk_enum ARDrone3_Antiflickering_setMode_mode_enum_tab[] = {
  {
    .name = "auto",
    .value = ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_AUTO,
    .comment = "Anti flickering based on the electric frequency previously sent"
  },
  {
    .name = "FixedFiftyHertz",
    .value = ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_FIXEDFIFTYHERTZ,
    .comment = "Anti flickering based on a fixed frequency of 50Hz"
  },
  {
    .name = "FixedSixtyHertz",
    .value = ARCOMMANDS_ARDRONE3_ANTIFLICKERING_SETMODE_MODE_FIXEDSIXTYHERTZ,
    .comment = "Anti flickering based on a fixed frequency of 60Hz"
  },
};
static struct arsdk_arg ARDrone3_Antiflickering_setMode_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_Antiflickering_setMode_mode_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_Antiflickering_setMode_mode_enum_tab),
    .comment = "Mode of the anti flickering functionnality"
  },
};
static struct arsdk_arg ARDrone3_MediaRecordState_PictureStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if picture has been taken, 0 otherwise"
  },
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id where the picture was recorded"
  },
};
static struct arsdk_enum ARDrone3_MediaRecordState_VideoStateChanged_state_enum_tab[] = {
  {
    .name = "stopped",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STOPPED,
    .comment = "Video was stopped"
  },
  {
    .name = "started",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STARTED,
    .comment = "Video was started"
  },
  {
    .name = "failed",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_FAILED,
    .comment = "Video was failed"
  },
  {
    .name = "autostopped",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_AUTOSTOPPED,
    .comment = "Video was auto stopped"
  },
};
static struct arsdk_arg ARDrone3_MediaRecordState_VideoStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordState_VideoStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordState_VideoStateChanged_state_enum_tab),
    .comment = "State of video"
  },
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id where the video was recorded"
  },
};
static struct arsdk_enum ARDrone3_MediaRecordState_PictureStateChangedV2_state_enum_tab[] = {
  {
    .name = "ready",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY,
    .comment = "The picture recording is ready"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY,
    .comment = "The picture recording is busy"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE,
    .comment = "The picture recording is not available"
  },
};
static struct arsdk_enum ARDrone3_MediaRecordState_PictureStateChangedV2_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN,
    .comment = "Unknown generic error"
  },
  {
    .name = "camera_ko",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO,
    .comment = "Picture camera is out of order"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL,
    .comment = "Memory full ; cannot save one additional picture"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY,
    .comment = "Battery is too low to start/keep recording."
  },
};
static struct arsdk_arg ARDrone3_MediaRecordState_PictureStateChangedV2_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordState_PictureStateChangedV2_state_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordState_PictureStateChangedV2_state_enum_tab),
    .comment = "State of device picture recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordState_PictureStateChangedV2_error_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordState_PictureStateChangedV2_error_enum_tab),
    .comment = "Error to explain the state"
  },
};
static struct arsdk_enum ARDrone3_MediaRecordState_VideoStateChangedV2_state_enum_tab[] = {
  {
    .name = "stopped",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STOPPED,
    .comment = "Video is stopped"
  },
  {
    .name = "started",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STARTED,
    .comment = "Video is started"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_NOTAVAILABLE,
    .comment = "The video recording is not available"
  },
};
static struct arsdk_enum ARDrone3_MediaRecordState_VideoStateChangedV2_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_UNKNOWN,
    .comment = "Unknown generic error"
  },
  {
    .name = "camera_ko",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_CAMERA_KO,
    .comment = "Video camera is out of order"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MEMORYFULL,
    .comment = "Memory full ; cannot save one additional video"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_LOWBATTERY,
    .comment = "Battery is too low to start/keep recording."
  },
};
static struct arsdk_arg ARDrone3_MediaRecordState_VideoStateChangedV2_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordState_VideoStateChangedV2_state_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordState_VideoStateChangedV2_state_enum_tab),
    .comment = "State of device video recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordState_VideoStateChangedV2_error_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordState_VideoStateChangedV2_error_enum_tab),
    .comment = "Error to explain the state"
  },
};
static struct arsdk_enum ARDrone3_MediaRecordState_VideoResolutionState_streaming_enum_tab[] = {
  {
    .name = "res360p",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING_RES360P,
    .comment = "360p resolution."
  },
  {
    .name = "res480p",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING_RES480P,
    .comment = "480p resolution."
  },
  {
    .name = "res720p",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING_RES720P,
    .comment = "720p resolution."
  },
  {
    .name = "res1080p",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_STREAMING_RES1080P,
    .comment = "1080p resolution."
  },
};
static struct arsdk_enum ARDrone3_MediaRecordState_VideoResolutionState_recording_enum_tab[] = {
  {
    .name = "res360p",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING_RES360P,
    .comment = "360p resolution."
  },
  {
    .name = "res480p",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING_RES480P,
    .comment = "480p resolution."
  },
  {
    .name = "res720p",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING_RES720P,
    .comment = "720p resolution."
  },
  {
    .name = "res1080p",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDSTATE_VIDEORESOLUTIONSTATE_RECORDING_RES1080P,
    .comment = "1080p resolution."
  },
};
static struct arsdk_arg ARDrone3_MediaRecordState_VideoResolutionState_arg_tab[] = {
  {
    .name = "streaming",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordState_VideoResolutionState_streaming_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordState_VideoResolutionState_streaming_enum_tab),
    .comment = "Streaming resolution"
  },
  {
    .name = "recording",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordState_VideoResolutionState_recording_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordState_VideoResolutionState_recording_enum_tab),
    .comment = "Recording resolution"
  },
};
static struct arsdk_enum ARDrone3_MediaRecordEvent_PictureEventChanged_event_enum_tab[] = {
  {
    .name = "taken",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN,
    .comment = "Picture taken and saved"
  },
  {
    .name = "failed",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED,
    .comment = "Picture failed"
  },
};
static struct arsdk_enum ARDrone3_MediaRecordEvent_PictureEventChanged_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN,
    .comment = "Unknown generic error ; only when state is failed"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY,
    .comment = "Picture recording is busy ; only when state is failed"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE,
    .comment = "Picture recording not available ; only when state is failed"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL,
    .comment = "Memory full ; only when state is failed"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY,
    .comment = "Battery is too low to record."
  },
};
static struct arsdk_arg ARDrone3_MediaRecordEvent_PictureEventChanged_arg_tab[] = {
  {
    .name = "event",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordEvent_PictureEventChanged_event_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordEvent_PictureEventChanged_event_enum_tab),
    .comment = "Last event of picture recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordEvent_PictureEventChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordEvent_PictureEventChanged_error_enum_tab),
    .comment = "Error to explain the event"
  },
};
static struct arsdk_enum ARDrone3_MediaRecordEvent_VideoEventChanged_event_enum_tab[] = {
  {
    .name = "start",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_START,
    .comment = "Video start"
  },
  {
    .name = "stop",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_STOP,
    .comment = "Video stop and saved"
  },
  {
    .name = "failed",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_FAILED,
    .comment = "Video failed"
  },
};
static struct arsdk_enum ARDrone3_MediaRecordEvent_VideoEventChanged_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_UNKNOWN,
    .comment = "Unknown generic error ; only when state is failed"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_BUSY,
    .comment = "Video recording is busy ; only when state is failed"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_NOTAVAILABLE,
    .comment = "Video recording not available ; only when state is failed"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MEMORYFULL,
    .comment = "Memory full"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_LOWBATTERY,
    .comment = "Battery is too low to record."
  },
  {
    .name = "autoStopped",
    .value = ARCOMMANDS_ARDRONE3_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_AUTOSTOPPED,
    .comment = "Video was auto stopped"
  },
};
static struct arsdk_arg ARDrone3_MediaRecordEvent_VideoEventChanged_arg_tab[] = {
  {
    .name = "event",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordEvent_VideoEventChanged_event_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordEvent_VideoEventChanged_event_enum_tab),
    .comment = "Event of video recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaRecordEvent_VideoEventChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaRecordEvent_VideoEventChanged_error_enum_tab),
    .comment = "Error to explain the event"
  },
};
static struct arsdk_enum ARDrone3_PilotingState_FlyingStateChanged_state_enum_tab[] = {
  {
    .name = "landed",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDED,
    .comment = "Landed state"
  },
  {
    .name = "takingoff",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_TAKINGOFF,
    .comment = "Taking off state"
  },
  {
    .name = "hovering",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_HOVERING,
    .comment = "Hovering / Circling (for fixed wings) state"
  },
  {
    .name = "flying",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_FLYING,
    .comment = "Flying state"
  },
  {
    .name = "landing",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDING,
    .comment = "Landing state"
  },
  {
    .name = "emergency",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY,
    .comment = "Emergency state"
  },
  {
    .name = "usertakeoff",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_USERTAKEOFF,
    .comment = "User take off state. Waiting for user action to take off."
  },
  {
    .name = "motor_ramping",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_MOTOR_RAMPING,
    .comment = "Motor ramping state."
  },
  {
    .name = "emergency_landing",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY_LANDING,
    .comment = "Emergency landing state.\nDrone autopilot has detected defective sensor(s).\nOnly Yaw argument in PCMD is taken into account.\nAll others flying commands are ignored."
  },
};
static struct arsdk_arg ARDrone3_PilotingState_FlyingStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingState_FlyingStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingState_FlyingStateChanged_state_enum_tab),
    .comment = "Drone flying state"
  },
};
static struct arsdk_enum ARDrone3_PilotingState_AlertStateChanged_state_enum_tab[] = {
  {
    .name = "none",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE,
    .comment = "No alert"
  },
  {
    .name = "user",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_USER,
    .comment = "User emergency alert"
  },
  {
    .name = "cut_out",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CUT_OUT,
    .comment = "Cut out alert"
  },
  {
    .name = "critical_battery",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY,
    .comment = "Critical battery alert"
  },
  {
    .name = "low_battery",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY,
    .comment = "Low battery alert"
  },
  {
    .name = "too_much_angle",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_ALERTSTATECHANGED_STATE_TOO_MUCH_ANGLE,
    .comment = "The angle of the drone is too high"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_AlertStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingState_AlertStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingState_AlertStateChanged_state_enum_tab),
    .comment = "Drone alert state"
  },
};
static struct arsdk_enum ARDrone3_PilotingState_NavigateHomeStateChanged_state_enum_tab[] = {
  {
    .name = "available",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_AVAILABLE,
    .comment = "Navigate home is available"
  },
  {
    .name = "inProgress",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_INPROGRESS,
    .comment = "Navigate home is in progress"
  },
  {
    .name = "unavailable",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_UNAVAILABLE,
    .comment = "Navigate home is not available"
  },
  {
    .name = "pending",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_STATE_PENDING,
    .comment = "Navigate home has been received, but its process is pending"
  },
};
static struct arsdk_enum ARDrone3_PilotingState_NavigateHomeStateChanged_reason_enum_tab[] = {
  {
    .name = "userRequest",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_USERREQUEST,
    .comment = "User requested a navigate home (available->inProgress)"
  },
  {
    .name = "connectionLost",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_CONNECTIONLOST,
    .comment = "Connection between controller and product lost (available->inProgress)"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_LOWBATTERY,
    .comment = "Low battery occurred (available->inProgress)"
  },
  {
    .name = "finished",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_FINISHED,
    .comment = "Navigate home is finished (inProgress->available)"
  },
  {
    .name = "stopped",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_STOPPED,
    .comment = "Navigate home has been stopped (inProgress->available)"
  },
  {
    .name = "disabled",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_DISABLED,
    .comment = "Navigate home disabled by product (inProgress->unavailable or available->unavailable)"
  },
  {
    .name = "enabled",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_NAVIGATEHOMESTATECHANGED_REASON_ENABLED,
    .comment = "Navigate home enabled by product (unavailable->available)"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_NavigateHomeStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingState_NavigateHomeStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingState_NavigateHomeStateChanged_state_enum_tab),
    .comment = "State of navigate home"
  },
  {
    .name = "reason",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingState_NavigateHomeStateChanged_reason_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingState_NavigateHomeStateChanged_reason_enum_tab),
    .comment = "Reason of the state"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_PositionChanged_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Latitude position in decimal degrees (500.0 if not available)"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Longitude position in decimal degrees (500.0 if not available)"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude in meters (from GPS)"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_SpeedChanged_arg_tab[] = {
  {
    .name = "speedX",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed relative to the North (when drone moves to the north, speed is > 0) (in m/s)"
  },
  {
    .name = "speedY",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed relative to the East (when drone moves to the east, speed is > 0) (in m/s)"
  },
  {
    .name = "speedZ",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed on the z axis (when drone moves down, speed is > 0) (in m/s)"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_AttitudeChanged_arg_tab[] = {
  {
    .name = "roll",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "roll value (in radian)"
  },
  {
    .name = "pitch",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pitch value (in radian)"
  },
  {
    .name = "yaw",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Yaw value (in radian)"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_AutoTakeOffModeChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of automatic take off mode (1 if enabled)"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_AltitudeChanged_arg_tab[] = {
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude in meters"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_GpsLocationChanged_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Latitude location in decimal degrees (500.0 if not available)"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Longitude location in decimal degrees (500.0 if not available)"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude location in meters."
  },
  {
    .name = "latitude_accuracy",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Latitude location error in meters (1 sigma/standard deviation)\n-1 if not available."
  },
  {
    .name = "longitude_accuracy",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Longitude location error in meters (1 sigma/standard deviation)\n-1 if not available."
  },
  {
    .name = "altitude_accuracy",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude location error in meters (1 sigma/standard deviation)\n-1 if not available."
  },
};
static struct arsdk_enum ARDrone3_PilotingState_LandingStateChanged_state_enum_tab[] = {
  {
    .name = "linear",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_LANDINGSTATECHANGED_STATE_LINEAR,
    .comment = "Linear landing"
  },
  {
    .name = "spiral",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_LANDINGSTATECHANGED_STATE_SPIRAL,
    .comment = "Spiral landing"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_LandingStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingState_LandingStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingState_LandingStateChanged_state_enum_tab),
    .comment = "Drone landing state"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_AirSpeedChanged_arg_tab[] = {
  {
    .name = "airSpeed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed relative to air on x axis\n(speed is always > 0) (in m/s)"
  },
};
static struct arsdk_enum ARDrone3_PilotingState_moveToChanged_orientation_mode_enum_tab[] = {
  {
    .name = "NONE",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE_NONE,
    .comment = "The drone won't change its orientation"
  },
  {
    .name = "TO_TARGET",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE_TO_TARGET,
    .comment = "The drone will make a rotation to look in direction of the given location"
  },
  {
    .name = "HEADING_START",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE_HEADING_START,
    .comment = "The drone will orientate itself to the given heading before moving to the location"
  },
  {
    .name = "HEADING_DURING",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_ORIENTATION_MODE_HEADING_DURING,
    .comment = "The drone will orientate itself to the given heading while moving to the location"
  },
};
static struct arsdk_enum ARDrone3_PilotingState_moveToChanged_status_enum_tab[] = {
  {
    .name = "RUNNING",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS_RUNNING,
    .comment = "The drone is actually flying to the given position"
  },
  {
    .name = "DONE",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS_DONE,
    .comment = "The drone has reached the target"
  },
  {
    .name = "CANCELED",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS_CANCELED,
    .comment = "The move to has been canceled, either by a CancelMoveTo command\nor when a disconnection appears."
  },
  {
    .name = "ERROR",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOVETOCHANGED_STATUS_ERROR,
    .comment = "The move to has not been finished or started because of an error."
  },
};
static struct arsdk_arg ARDrone3_PilotingState_moveToChanged_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Latitude of the location (in degrees) to reach"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Longitude of the location (in degrees) to reach"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude above sea level (in m) to reach"
  },
  {
    .name = "orientation_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingState_moveToChanged_orientation_mode_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingState_moveToChanged_orientation_mode_enum_tab),
    .comment = "Orientation mode of the move to"
  },
  {
    .name = "heading",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Heading (relative to the North in degrees).\nThis value is only used if the orientation mode is HEADING_START or HEADING_DURING"
  },
  {
    .name = "status",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingState_moveToChanged_status_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingState_moveToChanged_status_enum_tab),
    .comment = "Status of the move to"
  },
};
static struct arsdk_enum ARDrone3_PilotingState_MotionState_state_enum_tab[] = {
  {
    .name = "steady",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOTIONSTATE_STATE_STEADY,
    .comment = "Drone is steady"
  },
  {
    .name = "moving",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_MOTIONSTATE_STATE_MOVING,
    .comment = "Drone is moving"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_MotionState_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingState_MotionState_state_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingState_MotionState_state_enum_tab),
    .comment = "Motion state"
  },
};
static struct arsdk_enum ARDrone3_PilotingState_PilotedPOI_status_enum_tab[] = {
  {
    .name = "UNAVAILABLE",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS_UNAVAILABLE,
    .comment = "The piloted POI is not available"
  },
  {
    .name = "AVAILABLE",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS_AVAILABLE,
    .comment = "The piloted POI is available"
  },
  {
    .name = "PENDING",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS_PENDING,
    .comment = "Piloted POI has been requested. Waiting to be in state that allow the piloted POI to start"
  },
  {
    .name = "RUNNING",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_PILOTEDPOI_STATUS_RUNNING,
    .comment = "Piloted POI is running"
  },
};
static struct arsdk_arg ARDrone3_PilotingState_PilotedPOI_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Latitude of the location (in degrees) to look at.\nThis information is only valid when the state is pending or running."
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Longitude of the location (in degrees) to look at.\nThis information is only valid when the state is pending or running."
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude above sea level (in m) to look at.\nThis information is only valid when the state is pending or running."
  },
  {
    .name = "status",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingState_PilotedPOI_status_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingState_PilotedPOI_status_enum_tab),
    .comment = "Status of the move to"
  },
};
static struct arsdk_enum ARDrone3_PilotingState_ReturnHomeBatteryCapacity_status_enum_tab[] = {
  {
    .name = "OK",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS_OK,
    .comment = "The battery is full enough to do a return home"
  },
  {
    .name = "WARNING",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS_WARNING,
    .comment = "The battery is about to be too discharged to do a return home"
  },
  {
    .name = "CRITICAL",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS_CRITICAL,
    .comment = "The battery level is too low to return to the home position"
  },
  {
    .name = "UNKNOWN",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSTATE_RETURNHOMEBATTERYCAPACITY_STATUS_UNKNOWN,
    .comment = "Battery capacity to do a return home is unknown.\nThis can be either because the home is unknown or the position of the drone is unknown,\nor the drone has not enough information to determine how long it takes to fly home."
  },
};
static struct arsdk_arg ARDrone3_PilotingState_ReturnHomeBatteryCapacity_arg_tab[] = {
  {
    .name = "status",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingState_ReturnHomeBatteryCapacity_status_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingState_ReturnHomeBatteryCapacity_status_enum_tab),
    .comment = "Status of battery to return home"
  },
};
static struct arsdk_enum ARDrone3_PilotingEvent_moveByEnd_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_OK,
    .comment = "No Error ; The relative displacement"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_UNKNOWN,
    .comment = "Unknown generic error"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_BUSY,
    .comment = "The Device is busy ; command moveBy ignored"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_NOTAVAILABLE,
    .comment = "Command moveBy is not available ; command moveBy ignored"
  },
  {
    .name = "interrupted",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGEVENT_MOVEBYEND_ERROR_INTERRUPTED,
    .comment = "Command moveBy interrupted"
  },
};
static struct arsdk_arg ARDrone3_PilotingEvent_moveByEnd_arg_tab[] = {
  {
    .name = "dX",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance traveled along the front axis [m]"
  },
  {
    .name = "dY",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance traveled along the right axis [m]"
  },
  {
    .name = "dZ",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance traveled along the down axis [m]"
  },
  {
    .name = "dPsi",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Applied angle on heading [rad]"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingEvent_moveByEnd_error_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingEvent_moveByEnd_error_enum_tab),
    .comment = "Error to explain the event"
  },
};
static struct arsdk_enum ARDrone3_NetworkState_WifiScanListChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
};
static struct arsdk_arg ARDrone3_NetworkState_WifiScanListChanged_arg_tab[] = {
  {
    .name = "ssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "SSID of the AP"
  },
  {
    .name = "rssi",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "RSSI of the AP in dbm (negative value)"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkState_WifiScanListChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkState_WifiScanListChanged_band_enum_tab),
    .comment = "The band : 2.4 GHz or 5 GHz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Channel of the AP"
  },
};
static struct arsdk_enum ARDrone3_NetworkState_WifiAuthChannelListChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
};
static struct arsdk_arg ARDrone3_NetworkState_WifiAuthChannelListChanged_arg_tab[] = {
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkState_WifiAuthChannelListChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkState_WifiAuthChannelListChanged_band_enum_tab),
    .comment = "The band of this channel : 2.4 GHz or 5 GHz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The authorized channel."
  },
  {
    .name = "in_or_out",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_MaxAltitudeChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current altitude max"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of altitude"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of altitude"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_MaxTiltChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max tilt"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of tilt"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of tilt"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_AbsolutControlChanged_arg_tab[] = {
  {
    .name = "on",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if enabled, 0 if disabled"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_MaxDistanceChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max distance in meter"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Minimal possible max distance"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Maximal possible max distance"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_NoFlyOverMaxDistanceChanged_arg_tab[] = {
  {
    .name = "shouldNotFlyOver",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if the drone won't fly further than max distance, 0 if no limitation on the drone will be done"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_AutonomousFlightMaxHorizontalSpeed_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "maximum horizontal speed [m/s]"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_AutonomousFlightMaxVerticalSpeed_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "maximum vertical speed [m/s]"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_AutonomousFlightMaxHorizontalAcceleration_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "maximum horizontal acceleration [m/s2]"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_AutonomousFlightMaxVerticalAcceleration_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "maximum vertical acceleration [m/s2]"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_AutonomousFlightMaxRotationSpeed_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "maximum yaw rotation speed [deg/s]"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_BankedTurnChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if enabled, 0 if disabled"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_MinAltitudeChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current altitude min"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of altitude min"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of altitude min"
  },
};
static struct arsdk_enum ARDrone3_PilotingSettingsState_CirclingDirectionChanged_value_enum_tab[] = {
  {
    .name = "CW",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE_CW,
    .comment = "Circling ClockWise"
  },
  {
    .name = "CCW",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_CIRCLINGDIRECTIONCHANGED_VALUE_CCW,
    .comment = "Circling Counter ClockWise"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_CirclingDirectionChanged_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingSettingsState_CirclingDirectionChanged_value_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingSettingsState_CirclingDirectionChanged_value_enum_tab),
    .comment = "The circling direction"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_CirclingRadiusChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "The current circling radius in meter"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of circling radius in meter"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of circling radius in meter"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_CirclingAltitudeChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "The current circling altitude in meter"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of circling altitude in meter"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of circling altitude in meter"
  },
};
static struct arsdk_enum ARDrone3_PilotingSettingsState_PitchModeChanged_value_enum_tab[] = {
  {
    .name = "NORMAL",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE_NORMAL,
    .comment = "Positive pitch values will make the drone lower its nose.\nNegative pitch values will make the drone raise its nose."
  },
  {
    .name = "INVERTED",
    .value = ARCOMMANDS_ARDRONE3_PILOTINGSETTINGSSTATE_PITCHMODECHANGED_VALUE_INVERTED,
    .comment = "Pitch commands are inverted.\nPositive pitch values will make the drone raise its nose.\nNegative pitch values will make the drone lower its nose."
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_PitchModeChanged_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PilotingSettingsState_PitchModeChanged_value_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PilotingSettingsState_PitchModeChanged_value_enum_tab),
    .comment = "The Pitch mode"
  },
};
static struct arsdk_arg ARDrone3_PilotingSettingsState_MotionDetection_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if motion detection is enabled, 0 otherwise."
  },
};
static struct arsdk_arg ARDrone3_SpeedSettingsState_MaxVerticalSpeedChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max vertical speed in m/s"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of vertical speed"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of vertical speed"
  },
};
static struct arsdk_arg ARDrone3_SpeedSettingsState_MaxRotationSpeedChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max yaw rotation speed in degree/s"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of yaw rotation speed"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of yaw rotation speed"
  },
};
static struct arsdk_arg ARDrone3_SpeedSettingsState_HullProtectionChanged_arg_tab[] = {
  {
    .name = "present",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if present, 0 if not present"
  },
};
static struct arsdk_arg ARDrone3_SpeedSettingsState_OutdoorChanged_arg_tab[] = {
  {
    .name = "outdoor",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if outdoor flight, 0 if indoor flight"
  },
};
static struct arsdk_arg ARDrone3_SpeedSettingsState_MaxPitchRollRotationSpeedChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max pitch/roll rotation speed in degree/s"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of pitch/roll rotation speed"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of pitch/roll rotation speed"
  },
};
static struct arsdk_enum ARDrone3_NetworkSettingsState_WifiSelectionChanged_type_enum_tab[] = {
  {
    .name = "auto_all",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_ALL,
    .comment = "Auto selection"
  },
  {
    .name = "auto_2_4ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_2_4GHZ,
    .comment = "Auto selection 2.4ghz"
  },
  {
    .name = "auto_5ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_5GHZ,
    .comment = "Auto selection 5 ghz"
  },
  {
    .name = "manual",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL,
    .comment = "Manual selection"
  },
};
static struct arsdk_enum ARDrone3_NetworkSettingsState_WifiSelectionChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
  {
    .name = "all",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ALL,
    .comment = "Both 2.4 and 5 GHz bands"
  },
};
static struct arsdk_arg ARDrone3_NetworkSettingsState_WifiSelectionChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkSettingsState_WifiSelectionChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkSettingsState_WifiSelectionChanged_type_enum_tab),
    .comment = "The type of wifi selection settings"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkSettingsState_WifiSelectionChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkSettingsState_WifiSelectionChanged_band_enum_tab),
    .comment = "The actual wifi band state"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel (depends of the band)"
  },
};
static struct arsdk_enum ARDrone3_NetworkSettingsState_wifiSecurityChanged_type_enum_tab[] = {
  {
    .name = "open",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE_OPEN,
    .comment = "Wifi is not protected by any security (default)"
  },
  {
    .name = "wpa2",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITYCHANGED_TYPE_WPA2,
    .comment = "Wifi is protected by wpa2"
  },
};
static struct arsdk_arg ARDrone3_NetworkSettingsState_wifiSecurityChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkSettingsState_wifiSecurityChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkSettingsState_wifiSecurityChanged_type_enum_tab),
    .comment = "The type of wifi security (open, wpa2)"
  },
};
static struct arsdk_enum ARDrone3_NetworkSettingsState_wifiSecurity_type_enum_tab[] = {
  {
    .name = "open",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE_OPEN,
    .comment = "Wifi is not protected by any security (default)"
  },
  {
    .name = "wpa2",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_TYPE_WPA2,
    .comment = "Wifi is protected by wpa2"
  },
};
static struct arsdk_enum ARDrone3_NetworkSettingsState_wifiSecurity_keyType_enum_tab[] = {
  {
    .name = "plain",
    .value = ARCOMMANDS_ARDRONE3_NETWORKSETTINGSSTATE_WIFISECURITY_KEYTYPE_PLAIN,
    .comment = "Key is plain text, not encrypted"
  },
};
static struct arsdk_arg ARDrone3_NetworkSettingsState_wifiSecurity_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkSettingsState_wifiSecurity_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkSettingsState_wifiSecurity_type_enum_tab),
    .comment = "The type of wifi security (open, wpa2)"
  },
  {
    .name = "key",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The key used to secure the network (empty if type is open)"
  },
  {
    .name = "keyType",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_NetworkSettingsState_wifiSecurity_keyType_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_NetworkSettingsState_wifiSecurity_keyType_enum_tab),
    .comment = "Type of the key"
  },
};
static struct arsdk_arg ARDrone3_SettingsState_ProductMotorVersionListChanged_arg_tab[] = {
  {
    .name = "motor_number",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product Motor number"
  },
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product Motor type"
  },
  {
    .name = "software",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product Motors software version"
  },
  {
    .name = "hardware",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product Motors hardware version"
  },
};
static struct arsdk_arg ARDrone3_SettingsState_ProductGPSVersionChanged_arg_tab[] = {
  {
    .name = "software",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product GPS software version"
  },
  {
    .name = "hardware",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product GPS hardware version"
  },
};
static struct arsdk_enum ARDrone3_SettingsState_MotorErrorStateChanged_motorError_enum_tab[] = {
  {
    .name = "noError",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_NOERROR,
    .comment = "No error detected"
  },
  {
    .name = "errorEEPRom",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERROREEPROM,
    .comment = "EEPROM access failure"
  },
  {
    .name = "errorMotorStalled",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOTORSTALLED,
    .comment = "Motor stalled"
  },
  {
    .name = "errorPropellerSecurity",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORPROPELLERSECURITY,
    .comment = "Propeller cutout security triggered"
  },
  {
    .name = "errorCommLost",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORCOMMLOST,
    .comment = "Communication with motor failed by timeout"
  },
  {
    .name = "errorRCEmergencyStop",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORRCEMERGENCYSTOP,
    .comment = "RC emergency stop"
  },
  {
    .name = "errorRealTime",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORREALTIME,
    .comment = "Motor controler scheduler real-time out of bounds"
  },
  {
    .name = "errorMotorSetting",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOTORSETTING,
    .comment = "One or several incorrect values in motor settings"
  },
  {
    .name = "errorTemperature",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORTEMPERATURE,
    .comment = "Too hot or too cold Cypress temperature"
  },
  {
    .name = "errorBatteryVoltage",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORBATTERYVOLTAGE,
    .comment = "Battery voltage out of bounds"
  },
  {
    .name = "errorLipoCells",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORLIPOCELLS,
    .comment = "Incorrect number of LIPO cells"
  },
  {
    .name = "errorMOSFET",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOSFET,
    .comment = "Defectuous MOSFET or broken motor phases"
  },
  {
    .name = "errorBootloader",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORBOOTLOADER,
    .comment = "Not use for BLDC but useful for HAL"
  },
  {
    .name = "errorAssert",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORASSERT,
    .comment = "Error Made by BLDC_ASSERT()"
  },
};
static struct arsdk_arg ARDrone3_SettingsState_MotorErrorStateChanged_arg_tab[] = {
  {
    .name = "motorIds",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bit field for concerned motor. If bit 0 = 1, motor 1 is affected by this error. Same with bit 1, 2 and 3.\nMotor 1: front left\nMotor 2: front right\nMotor 3: back right\nMotor 4: back left"
  },
  {
    .name = "motorError",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_SettingsState_MotorErrorStateChanged_motorError_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_SettingsState_MotorErrorStateChanged_motorError_enum_tab),
    .comment = "Enumeration of the motor error"
  },
};
static struct arsdk_arg ARDrone3_SettingsState_MotorSoftwareVersionChanged_arg_tab[] = {
  {
    .name = "version",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "name of the version : dot separated fields (major version - minor version - firmware type - nb motors handled). Firmware types : Release, Debug, Alpha, Test-bench"
  },
};
static struct arsdk_arg ARDrone3_SettingsState_MotorFlightsStatusChanged_arg_tab[] = {
  {
    .name = "nbFlights",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "total number of flights"
  },
  {
    .name = "lastFlightDuration",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Duration of the last flight (in seconds)"
  },
  {
    .name = "totalFlightDuration",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Duration of all flights (in seconds)"
  },
};
static struct arsdk_enum ARDrone3_SettingsState_MotorErrorLastErrorChanged_motorError_enum_tab[] = {
  {
    .name = "noError",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_NOERROR,
    .comment = "No error detected"
  },
  {
    .name = "errorEEPRom",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERROREEPROM,
    .comment = "EEPROM access failure"
  },
  {
    .name = "errorMotorStalled",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORMOTORSTALLED,
    .comment = "Motor stalled"
  },
  {
    .name = "errorPropellerSecurity",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORPROPELLERSECURITY,
    .comment = "Propeller cutout security triggered"
  },
  {
    .name = "errorCommLost",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORCOMMLOST,
    .comment = "Communication with motor failed by timeout"
  },
  {
    .name = "errorRCEmergencyStop",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORRCEMERGENCYSTOP,
    .comment = "RC emergency stop"
  },
  {
    .name = "errorRealTime",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORREALTIME,
    .comment = "Motor controler scheduler real-time out of bounds"
  },
  {
    .name = "errorMotorSetting",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORMOTORSETTING,
    .comment = "One or several incorrect values in motor settings"
  },
  {
    .name = "errorBatteryVoltage",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORBATTERYVOLTAGE,
    .comment = "Battery voltage out of bounds"
  },
  {
    .name = "errorLipoCells",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORLIPOCELLS,
    .comment = "Incorrect number of LIPO cells"
  },
  {
    .name = "errorMOSFET",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORMOSFET,
    .comment = "Defectuous MOSFET or broken motor phases"
  },
  {
    .name = "errorTemperature",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORTEMPERATURE,
    .comment = "Too hot or too cold Cypress temperature"
  },
  {
    .name = "errorBootloader",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORBOOTLOADER,
    .comment = "Not use for BLDC but useful for HAL"
  },
  {
    .name = "errorAssert",
    .value = ARCOMMANDS_ARDRONE3_SETTINGSSTATE_MOTORERRORLASTERRORCHANGED_MOTORERROR_ERRORASSERT,
    .comment = "Error Made by BLDC_ASSERT()"
  },
};
static struct arsdk_arg ARDrone3_SettingsState_MotorErrorLastErrorChanged_arg_tab[] = {
  {
    .name = "motorError",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_SettingsState_MotorErrorLastErrorChanged_motorError_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_SettingsState_MotorErrorLastErrorChanged_motorError_enum_tab),
    .comment = "Enumeration of the motor error"
  },
};
static struct arsdk_arg ARDrone3_SettingsState_P7ID_arg_tab[] = {
  {
    .name = "serialID",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product P7ID"
  },
};
static struct arsdk_arg ARDrone3_SettingsState_CPUID_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product main cpu id"
  },
};
static struct arsdk_enum ARDrone3_PictureSettingsState_PictureFormatChanged_type_enum_tab[] = {
  {
    .name = "raw",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_RAW,
    .comment = "Take raw image"
  },
  {
    .name = "jpeg",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_JPEG,
    .comment = "Take a 4:3 jpeg photo"
  },
  {
    .name = "snapshot",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_SNAPSHOT,
    .comment = "Take a 16:9 snapshot from camera"
  },
  {
    .name = "jpeg_fisheye",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_PICTUREFORMATCHANGED_TYPE_JPEG_FISHEYE,
    .comment = "Take jpeg fisheye image only"
  },
};
static struct arsdk_arg ARDrone3_PictureSettingsState_PictureFormatChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettingsState_PictureFormatChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettingsState_PictureFormatChanged_type_enum_tab),
    .comment = "The type of photo format"
  },
};
static struct arsdk_enum ARDrone3_PictureSettingsState_AutoWhiteBalanceChanged_type_enum_tab[] = {
  {
    .name = "auto",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_AUTO,
    .comment = "Auto guess of best white balance params"
  },
  {
    .name = "tungsten",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_TUNGSTEN,
    .comment = "Tungsten white balance"
  },
  {
    .name = "daylight",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_DAYLIGHT,
    .comment = "Daylight white balance"
  },
  {
    .name = "cloudy",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_CLOUDY,
    .comment = "Cloudy white balance"
  },
  {
    .name = "cool_white",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_AUTOWHITEBALANCECHANGED_TYPE_COOL_WHITE,
    .comment = "White balance for a flash"
  },
};
static struct arsdk_arg ARDrone3_PictureSettingsState_AutoWhiteBalanceChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettingsState_AutoWhiteBalanceChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettingsState_AutoWhiteBalanceChanged_type_enum_tab),
    .comment = "The type auto white balance"
  },
};
static struct arsdk_arg ARDrone3_PictureSettingsState_ExpositionChanged_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Exposure value"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Min exposure value"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Max exposure value"
  },
};
static struct arsdk_arg ARDrone3_PictureSettingsState_SaturationChanged_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Saturation value"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Min saturation value"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Max saturation value"
  },
};
static struct arsdk_arg ARDrone3_PictureSettingsState_TimelapseChanged_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if timelapse is enabled, 0 otherwise"
  },
  {
    .name = "interval",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "interval in seconds for taking pictures"
  },
  {
    .name = "minInterval",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Minimal interval for taking pictures"
  },
  {
    .name = "maxInterval",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Maximal interval for taking pictures"
  },
};
static struct arsdk_arg ARDrone3_PictureSettingsState_VideoAutorecordChanged_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if video autorecord is enabled, 0 otherwise"
  },
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id for the taken video"
  },
};
static struct arsdk_enum ARDrone3_PictureSettingsState_VideoStabilizationModeChanged_mode_enum_tab[] = {
  {
    .name = "roll_pitch",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE_ROLL_PITCH,
    .comment = "Video flat on roll and pitch"
  },
  {
    .name = "pitch",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE_PITCH,
    .comment = "Video flat on pitch only"
  },
  {
    .name = "roll",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE_ROLL,
    .comment = "Video flat on roll only"
  },
  {
    .name = "none",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOSTABILIZATIONMODECHANGED_MODE_NONE,
    .comment = "Video follows drone angles"
  },
};
static struct arsdk_arg ARDrone3_PictureSettingsState_VideoStabilizationModeChanged_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettingsState_VideoStabilizationModeChanged_mode_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettingsState_VideoStabilizationModeChanged_mode_enum_tab),
    .comment = "Video stabilization mode"
  },
};
static struct arsdk_enum ARDrone3_PictureSettingsState_VideoRecordingModeChanged_mode_enum_tab[] = {
  {
    .name = "quality",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORECORDINGMODECHANGED_MODE_QUALITY,
    .comment = "Maximize recording quality."
  },
  {
    .name = "time",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORECORDINGMODECHANGED_MODE_TIME,
    .comment = "Maximize recording time."
  },
};
static struct arsdk_arg ARDrone3_PictureSettingsState_VideoRecordingModeChanged_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettingsState_VideoRecordingModeChanged_mode_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettingsState_VideoRecordingModeChanged_mode_enum_tab),
    .comment = "Video recording mode"
  },
};
static struct arsdk_enum ARDrone3_PictureSettingsState_VideoFramerateChanged_framerate_enum_tab[] = {
  {
    .name = "24_FPS",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE_24_FPS,
    .comment = "23.976 frames per second."
  },
  {
    .name = "25_FPS",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE_25_FPS,
    .comment = "25 frames per second."
  },
  {
    .name = "30_FPS",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEOFRAMERATECHANGED_FRAMERATE_30_FPS,
    .comment = "29.97 frames per second."
  },
};
static struct arsdk_arg ARDrone3_PictureSettingsState_VideoFramerateChanged_arg_tab[] = {
  {
    .name = "framerate",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettingsState_VideoFramerateChanged_framerate_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettingsState_VideoFramerateChanged_framerate_enum_tab),
    .comment = "Video framerate"
  },
};
static struct arsdk_enum ARDrone3_PictureSettingsState_VideoResolutionsChanged_type_enum_tab[] = {
  {
    .name = "rec1080_stream480",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORESOLUTIONSCHANGED_TYPE_REC1080_STREAM480,
    .comment = "1080p recording, 480p streaming."
  },
  {
    .name = "rec720_stream720",
    .value = ARCOMMANDS_ARDRONE3_PICTURESETTINGSSTATE_VIDEORESOLUTIONSCHANGED_TYPE_REC720_STREAM720,
    .comment = "720p recording, 720p streaming."
  },
};
static struct arsdk_arg ARDrone3_PictureSettingsState_VideoResolutionsChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_PictureSettingsState_VideoResolutionsChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_PictureSettingsState_VideoResolutionsChanged_type_enum_tab),
    .comment = "Video resolution type."
  },
};
static struct arsdk_enum ARDrone3_MediaStreamingState_VideoEnableChanged_enabled_enum_tab[] = {
  {
    .name = "enabled",
    .value = ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENABLED,
    .comment = "Video streaming is enabled."
  },
  {
    .name = "disabled",
    .value = ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_DISABLED,
    .comment = "Video streaming is disabled."
  },
  {
    .name = "error",
    .value = ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ERROR,
    .comment = "Video streaming failed to start."
  },
};
static struct arsdk_arg ARDrone3_MediaStreamingState_VideoEnableChanged_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaStreamingState_VideoEnableChanged_enabled_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaStreamingState_VideoEnableChanged_enabled_enum_tab),
    .comment = "Current video streaming status."
  },
};
static struct arsdk_enum ARDrone3_MediaStreamingState_VideoStreamModeChanged_mode_enum_tab[] = {
  {
    .name = "low_latency",
    .value = ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE_LOW_LATENCY,
    .comment = "Minimize latency with average reliability (best for piloting)."
  },
  {
    .name = "high_reliability",
    .value = ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE_HIGH_RELIABILITY,
    .comment = "Maximize the reliability with an average latency (best when streaming quality is important but not the latency)."
  },
  {
    .name = "high_reliability_low_framerate",
    .value = ARCOMMANDS_ARDRONE3_MEDIASTREAMINGSTATE_VIDEOSTREAMMODECHANGED_MODE_HIGH_RELIABILITY_LOW_FRAMERATE,
    .comment = "Maximize the reliability using a framerate decimation with an average latency (best when streaming quality is important but not the latency)."
  },
};
static struct arsdk_arg ARDrone3_MediaStreamingState_VideoStreamModeChanged_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_MediaStreamingState_VideoStreamModeChanged_mode_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_MediaStreamingState_VideoStreamModeChanged_mode_enum_tab),
    .comment = "stream mode"
  },
};
static struct arsdk_arg ARDrone3_GPSSettingsState_HomeChanged_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Home latitude in decimal degrees"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Home longitude in decimal degrees"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Home altitude in meters"
  },
};
static struct arsdk_arg ARDrone3_GPSSettingsState_ResetHomeChanged_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Home latitude in decimal degrees"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Home longitude in decimal degrees"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Home altitude in meters"
  },
};
static struct arsdk_arg ARDrone3_GPSSettingsState_GPSFixStateChanged_arg_tab[] = {
  {
    .name = "fixed",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if gps on drone is fixed, 0 otherwise"
  },
};
static struct arsdk_enum ARDrone3_GPSSettingsState_GPSUpdateStateChanged_state_enum_tab[] = {
  {
    .name = "updated",
    .value = ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_UPDATED,
    .comment = "Drone GPS update succeed"
  },
  {
    .name = "inProgress",
    .value = ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_INPROGRESS,
    .comment = "Drone GPS update In progress"
  },
  {
    .name = "failed",
    .value = ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_GPSUPDATESTATECHANGED_STATE_FAILED,
    .comment = "Drone GPS update failed"
  },
};
static struct arsdk_arg ARDrone3_GPSSettingsState_GPSUpdateStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_GPSSettingsState_GPSUpdateStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_GPSSettingsState_GPSUpdateStateChanged_state_enum_tab),
    .comment = "The state of the gps update"
  },
};
static struct arsdk_enum ARDrone3_GPSSettingsState_HomeTypeChanged_type_enum_tab[] = {
  {
    .name = "TAKEOFF",
    .value = ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE_TAKEOFF,
    .comment = "The drone will try to return to the take off position"
  },
  {
    .name = "PILOT",
    .value = ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE_PILOT,
    .comment = "The drone will try to return to the pilot position"
  },
  {
    .name = "FOLLOWEE",
    .value = ARCOMMANDS_ARDRONE3_GPSSETTINGSSTATE_HOMETYPECHANGED_TYPE_FOLLOWEE,
    .comment = "The drone will try to return to the target of the current (or last) follow me"
  },
};
static struct arsdk_arg ARDrone3_GPSSettingsState_HomeTypeChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_GPSSettingsState_HomeTypeChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_GPSSettingsState_HomeTypeChanged_type_enum_tab),
    .comment = "The type of the home position"
  },
};
static struct arsdk_arg ARDrone3_GPSSettingsState_ReturnHomeDelayChanged_arg_tab[] = {
  {
    .name = "delay",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Delay in second"
  },
};
static struct arsdk_arg ARDrone3_GPSSettingsState_GeofenceCenterChanged_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "GPS latitude in decimal degrees"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "GPS longitude in decimal degrees"
  },
};
static struct arsdk_arg ARDrone3_CameraState_Orientation_arg_tab[] = {
  {
    .name = "tilt",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Tilt camera consign for the drone [-100;100]"
  },
  {
    .name = "pan",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pan camera consign for the drone [-100;100]"
  },
};
static struct arsdk_arg ARDrone3_CameraState_defaultCameraOrientation_arg_tab[] = {
  {
    .name = "tilt",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Tilt value (in degree)"
  },
  {
    .name = "pan",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pan value (in degree)"
  },
};
static struct arsdk_arg ARDrone3_CameraState_OrientationV2_arg_tab[] = {
  {
    .name = "tilt",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Tilt camera consign for the drone [deg]"
  },
  {
    .name = "pan",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pan camera consign for the drone [deg]"
  },
};
static struct arsdk_arg ARDrone3_CameraState_defaultCameraOrientationV2_arg_tab[] = {
  {
    .name = "tilt",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Tilt value [deg]"
  },
  {
    .name = "pan",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pan value [deg]"
  },
};
static struct arsdk_arg ARDrone3_CameraState_VelocityRange_arg_tab[] = {
  {
    .name = "max_tilt",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Absolute max tilt velocity [deg/s]"
  },
  {
    .name = "max_pan",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Absolute max pan velocity [deg/s]"
  },
};
static struct arsdk_enum ARDrone3_AntiflickeringState_electricFrequencyChanged_frequency_enum_tab[] = {
  {
    .name = "fiftyHertz",
    .value = ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_FIFTYHERTZ,
    .comment = "Electric frequency of the country is 50hz"
  },
  {
    .name = "sixtyHertz",
    .value = ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_SIXTYHERTZ,
    .comment = "Electric frequency of the country is 60hz"
  },
};
static struct arsdk_arg ARDrone3_AntiflickeringState_electricFrequencyChanged_arg_tab[] = {
  {
    .name = "frequency",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_AntiflickeringState_electricFrequencyChanged_frequency_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_AntiflickeringState_electricFrequencyChanged_frequency_enum_tab),
    .comment = "Type of the electric frequency"
  },
};
static struct arsdk_enum ARDrone3_AntiflickeringState_modeChanged_mode_enum_tab[] = {
  {
    .name = "auto",
    .value = ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_AUTO,
    .comment = "Anti flickering based on the electric frequency previously sent"
  },
  {
    .name = "FixedFiftyHertz",
    .value = ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_FIXEDFIFTYHERTZ,
    .comment = "Anti flickering based on a fixed frequency of 50Hz"
  },
  {
    .name = "FixedSixtyHertz",
    .value = ARCOMMANDS_ARDRONE3_ANTIFLICKERINGSTATE_MODECHANGED_MODE_FIXEDSIXTYHERTZ,
    .comment = "Anti flickering based on a fixed frequency of 60Hz"
  },
};
static struct arsdk_arg ARDrone3_AntiflickeringState_modeChanged_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_AntiflickeringState_modeChanged_mode_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_AntiflickeringState_modeChanged_mode_enum_tab),
    .comment = "Mode of the anti flickering functionnality"
  },
};
static struct arsdk_arg ARDrone3_GPSState_NumberOfSatelliteChanged_arg_tab[] = {
  {
    .name = "numberOfSatellite",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The number of satellite"
  },
};
static struct arsdk_enum ARDrone3_GPSState_HomeTypeAvailabilityChanged_type_enum_tab[] = {
  {
    .name = "TAKEOFF",
    .value = ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_TAKEOFF,
    .comment = "The drone has enough information to return to the take off position"
  },
  {
    .name = "PILOT",
    .value = ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_PILOT,
    .comment = "The drone has enough information to return to the pilot position"
  },
  {
    .name = "FIRST_FIX",
    .value = ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_FIRST_FIX,
    .comment = "The drone has not enough information, it will return to the first GPS fix"
  },
  {
    .name = "FOLLOWEE",
    .value = ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPEAVAILABILITYCHANGED_TYPE_FOLLOWEE,
    .comment = "The drone has enough information to return to the target of the current (or last) follow me"
  },
};
static struct arsdk_arg ARDrone3_GPSState_HomeTypeAvailabilityChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_GPSState_HomeTypeAvailabilityChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_GPSState_HomeTypeAvailabilityChanged_type_enum_tab),
    .comment = "The type of the return home"
  },
  {
    .name = "available",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if this type is available, 0 otherwise"
  },
};
static struct arsdk_enum ARDrone3_GPSState_HomeTypeChosenChanged_type_enum_tab[] = {
  {
    .name = "TAKEOFF",
    .value = ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_TAKEOFF,
    .comment = "The drone will return to the take off position"
  },
  {
    .name = "PILOT",
    .value = ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_PILOT,
    .comment = "The drone will return to the pilot position\nIn this case, the drone will use the position given by ARDrone3-SendControllerGPS"
  },
  {
    .name = "FIRST_FIX",
    .value = ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_FIRST_FIX,
    .comment = "The drone has not enough information, it will return to the first GPS fix"
  },
  {
    .name = "FOLLOWEE",
    .value = ARCOMMANDS_ARDRONE3_GPSSTATE_HOMETYPECHOSENCHANGED_TYPE_FOLLOWEE,
    .comment = "The drone will return to the target of the current (or last) follow me\nIn this case, the drone will use the position of the target of the followMe (given by ControllerInfo-GPS)"
  },
};
static struct arsdk_arg ARDrone3_GPSState_HomeTypeChosenChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_GPSState_HomeTypeChosenChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_GPSState_HomeTypeChosenChanged_type_enum_tab),
    .comment = "The type of the return home chosen"
  },
};
static struct arsdk_arg ARDrone3_PROState_Features_arg_tab[] = {
  {
    .name = "features",
    .type = ARSDK_ARG_TYPE_U64,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield representing enabled features."
  },
};
static struct arsdk_enum ARDrone3_AccessoryState_ConnectedAccessories_accessory_type_enum_tab[] = {
  {
    .name = "sequoia",
    .value = ARCOMMANDS_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ACCESSORY_TYPE_SEQUOIA,
    .comment = "Parrot Sequoia (multispectral camera for agriculture)"
  },
  {
    .name = "flir",
    .value = ARCOMMANDS_ARDRONE3_ACCESSORYSTATE_CONNECTEDACCESSORIES_ACCESSORY_TYPE_FLIR,
    .comment = "FLIR camera (thermal+rgb camera)"
  },
};
static struct arsdk_arg ARDrone3_AccessoryState_ConnectedAccessories_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Id of the accessory for the session."
  },
  {
    .name = "accessory_type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_AccessoryState_ConnectedAccessories_accessory_type_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_AccessoryState_ConnectedAccessories_accessory_type_enum_tab),
    .comment = "Accessory type"
  },
  {
    .name = "uid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Unique Id of the accessory.\nThis id is unique by accessory_type."
  },
  {
    .name = "swVersion",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Software Version of the accessory."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list."
  },
};
static struct arsdk_arg ARDrone3_AccessoryState_Battery_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Id of the accessory for the session."
  },
  {
    .name = "batteryLevel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Battery level in percentage."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list."
  },
};
static struct arsdk_enum ARDrone3_SoundState_AlertSound_state_enum_tab[] = {
  {
    .name = "stopped",
    .value = ARCOMMANDS_ARDRONE3_SOUNDSTATE_ALERTSOUND_STATE_STOPPED,
    .comment = "Alert sound is not playing"
  },
  {
    .name = "playing",
    .value = ARCOMMANDS_ARDRONE3_SOUNDSTATE_ALERTSOUND_STATE_PLAYING,
    .comment = "Alert sound is playing"
  },
};
static struct arsdk_arg ARDrone3_SoundState_AlertSound_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = ARDrone3_SoundState_AlertSound_state_enum_tab,
    .nenums = ARRAY_SIZE(ARDrone3_SoundState_AlertSound_state_enum_tab),
    .comment = "State of the alert sound"
  },
};
static struct arsdk_cmd ARDrone3_Piloting_cmd_tab[] = {
  {
    .name = "FlatTrim",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_FLATTRIM,
    .args = NULL,
    .nargs = 0,
    .comment = "Do a flat trim"
  },
  {
    .name = "TakeOff",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_TAKEOFF,
    .args = NULL,
    .nargs = 0,
    .comment = "Take off"
  },
  {
    .name = "PCMD",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_PCMD,
    .args = ARDrone3_Piloting_PCMD_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Piloting_PCMD_arg_tab),
    .comment = "Move the drone"
  },
  {
    .name = "Landing",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_LANDING,
    .args = NULL,
    .nargs = 0,
    .comment = "Land"
  },
  {
    .name = "Emergency",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_EMERGENCY,
    .args = NULL,
    .nargs = 0,
    .comment = "Cut out the motors"
  },
  {
    .name = "NavigateHome",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_NAVIGATEHOME,
    .args = ARDrone3_Piloting_NavigateHome_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Piloting_NavigateHome_arg_tab),
    .comment = "Return home"
  },
  {
    .name = "AutoTakeOffMode",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_AUTOTAKEOFFMODE,
    .args = ARDrone3_Piloting_AutoTakeOffMode_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Piloting_AutoTakeOffMode_arg_tab),
    .comment = "Auto take off mode"
  },
  {
    .name = "moveBy",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_MOVEBY,
    .args = ARDrone3_Piloting_moveBy_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Piloting_moveBy_arg_tab),
    .comment = "Move the drone to a relative position"
  },
  {
    .name = "UserTakeOff",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_USERTAKEOFF,
    .args = ARDrone3_Piloting_UserTakeOff_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Piloting_UserTakeOff_arg_tab),
    .comment = "Prepare the drone to take off"
  },
  {
    .name = "Circle",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_CIRCLE,
    .args = ARDrone3_Piloting_Circle_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Piloting_Circle_arg_tab),
    .comment = "Circle"
  },
  {
    .name = "moveTo",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_MOVETO,
    .args = ARDrone3_Piloting_moveTo_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Piloting_moveTo_arg_tab),
    .comment = "Move to a location"
  },
  {
    .name = "CancelMoveTo",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_CANCELMOVETO,
    .args = NULL,
    .nargs = 0,
    .comment = "Cancel the moveTo"
  },
  {
    .name = "StartPilotedPOI",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_STARTPILOTEDPOI,
    .args = ARDrone3_Piloting_StartPilotedPOI_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Piloting_StartPilotedPOI_arg_tab),
    .comment = "Start a piloted POI"
  },
  {
    .name = "StopPilotedPOI",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_STOPPILOTEDPOI,
    .args = NULL,
    .nargs = 0,
    .comment = "Stop the piloted POI"
  },
};
static struct arsdk_cmd ARDrone3_Animations_cmd_tab[] = {
  {
    .name = "Flip",
    .id = ARCOMMANDS_ID_ARDRONE3_ANIMATIONS_CMD_FLIP,
    .args = ARDrone3_Animations_Flip_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Animations_Flip_arg_tab),
    .comment = "Make a flip"
  },
};
static struct arsdk_cmd ARDrone3_Camera_cmd_tab[] = {
  {
    .name = "Orientation",
    .id = ARCOMMANDS_ID_ARDRONE3_CAMERA_CMD_ORIENTATION,
    .args = ARDrone3_Camera_Orientation_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Camera_Orientation_arg_tab),
    .comment = "Move the camera"
  },
  {
    .name = "OrientationV2",
    .id = ARCOMMANDS_ID_ARDRONE3_CAMERA_CMD_ORIENTATIONV2,
    .args = ARDrone3_Camera_OrientationV2_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Camera_OrientationV2_arg_tab),
    .comment = "Move the camera"
  },
  {
    .name = "Velocity",
    .id = ARCOMMANDS_ID_ARDRONE3_CAMERA_CMD_VELOCITY,
    .args = ARDrone3_Camera_Velocity_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Camera_Velocity_arg_tab),
    .comment = "Move the camera using velocity"
  },
};
static struct arsdk_cmd ARDrone3_MediaRecord_cmd_tab[] = {
  {
    .name = "Picture",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORD_CMD_PICTURE,
    .args = ARDrone3_MediaRecord_Picture_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaRecord_Picture_arg_tab),
    .comment = "Take a picture"
  },
  {
    .name = "Video",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORD_CMD_VIDEO,
    .args = ARDrone3_MediaRecord_Video_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaRecord_Video_arg_tab),
    .comment = "Record a video"
  },
  {
    .name = "PictureV2",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORD_CMD_PICTUREV2,
    .args = NULL,
    .nargs = 0,
    .comment = "Take a picture"
  },
  {
    .name = "VideoV2",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORD_CMD_VIDEOV2,
    .args = ARDrone3_MediaRecord_VideoV2_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaRecord_VideoV2_arg_tab),
    .comment = "Record a video"
  },
};
static struct arsdk_cmd ARDrone3_MediaRecordState_cmd_tab[] = {
  {
    .name = "PictureStateChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORDSTATE_CMD_PICTURESTATECHANGED,
    .args = ARDrone3_MediaRecordState_PictureStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaRecordState_PictureStateChanged_arg_tab),
    .comment = "Picture state"
  },
  {
    .name = "VideoStateChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORDSTATE_CMD_VIDEOSTATECHANGED,
    .args = ARDrone3_MediaRecordState_VideoStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaRecordState_VideoStateChanged_arg_tab),
    .comment = "Video record state"
  },
  {
    .name = "PictureStateChangedV2",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORDSTATE_CMD_PICTURESTATECHANGEDV2,
    .args = ARDrone3_MediaRecordState_PictureStateChangedV2_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaRecordState_PictureStateChangedV2_arg_tab),
    .comment = "Picture state"
  },
  {
    .name = "VideoStateChangedV2",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORDSTATE_CMD_VIDEOSTATECHANGEDV2,
    .args = ARDrone3_MediaRecordState_VideoStateChangedV2_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaRecordState_VideoStateChangedV2_arg_tab),
    .comment = "Video record state"
  },
  {
    .name = "VideoResolutionState",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORDSTATE_CMD_VIDEORESOLUTIONSTATE,
    .args = ARDrone3_MediaRecordState_VideoResolutionState_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaRecordState_VideoResolutionState_arg_tab),
    .comment = "Video resolution"
  },
};
static struct arsdk_cmd ARDrone3_MediaRecordEvent_cmd_tab[] = {
  {
    .name = "PictureEventChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORDEVENT_CMD_PICTUREEVENTCHANGED,
    .args = ARDrone3_MediaRecordEvent_PictureEventChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaRecordEvent_PictureEventChanged_arg_tab),
    .comment = "Picture taken"
  },
  {
    .name = "VideoEventChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIARECORDEVENT_CMD_VIDEOEVENTCHANGED,
    .args = ARDrone3_MediaRecordEvent_VideoEventChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaRecordEvent_VideoEventChanged_arg_tab),
    .comment = "Video record notification"
  },
};
static struct arsdk_cmd ARDrone3_PilotingState_cmd_tab[] = {
  {
    .name = "FlatTrimChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_FLATTRIMCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "Flat trim changed"
  },
  {
    .name = "FlyingStateChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_FLYINGSTATECHANGED,
    .args = ARDrone3_PilotingState_FlyingStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_FlyingStateChanged_arg_tab),
    .comment = "Flying state"
  },
  {
    .name = "AlertStateChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_ALERTSTATECHANGED,
    .args = ARDrone3_PilotingState_AlertStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_AlertStateChanged_arg_tab),
    .comment = "Alert state"
  },
  {
    .name = "NavigateHomeStateChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_NAVIGATEHOMESTATECHANGED,
    .args = ARDrone3_PilotingState_NavigateHomeStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_NavigateHomeStateChanged_arg_tab),
    .comment = "Return home state"
  },
  {
    .name = "PositionChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_POSITIONCHANGED,
    .args = ARDrone3_PilotingState_PositionChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_PositionChanged_arg_tab),
    .comment = "Drone's position changed"
  },
  {
    .name = "SpeedChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_SPEEDCHANGED,
    .args = ARDrone3_PilotingState_SpeedChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_SpeedChanged_arg_tab),
    .comment = "Drone's speed changed"
  },
  {
    .name = "AttitudeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_ATTITUDECHANGED,
    .args = ARDrone3_PilotingState_AttitudeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_AttitudeChanged_arg_tab),
    .comment = "Drone's attitude changed"
  },
  {
    .name = "AutoTakeOffModeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_AUTOTAKEOFFMODECHANGED,
    .args = ARDrone3_PilotingState_AutoTakeOffModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_AutoTakeOffModeChanged_arg_tab),
    .comment = "Auto takeoff mode"
  },
  {
    .name = "AltitudeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_ALTITUDECHANGED,
    .args = ARDrone3_PilotingState_AltitudeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_AltitudeChanged_arg_tab),
    .comment = "Drone's altitude changed"
  },
  {
    .name = "GpsLocationChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_GPSLOCATIONCHANGED,
    .args = ARDrone3_PilotingState_GpsLocationChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_GpsLocationChanged_arg_tab),
    .comment = "Drone's location changed"
  },
  {
    .name = "LandingStateChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_LANDINGSTATECHANGED,
    .args = ARDrone3_PilotingState_LandingStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_LandingStateChanged_arg_tab),
    .comment = "Landing state"
  },
  {
    .name = "AirSpeedChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_AIRSPEEDCHANGED,
    .args = ARDrone3_PilotingState_AirSpeedChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_AirSpeedChanged_arg_tab),
    .comment = "Drone's air speed changed"
  },
  {
    .name = "moveToChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_MOVETOCHANGED,
    .args = ARDrone3_PilotingState_moveToChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_moveToChanged_arg_tab),
    .comment = "Move to changed"
  },
  {
    .name = "MotionState",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_MOTIONSTATE,
    .args = ARDrone3_PilotingState_MotionState_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_MotionState_arg_tab),
    .comment = "Motion state"
  },
  {
    .name = "PilotedPOI",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_PILOTEDPOI,
    .args = ARDrone3_PilotingState_PilotedPOI_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_PilotedPOI_arg_tab),
    .comment = "Piloted POI state"
  },
  {
    .name = "ReturnHomeBatteryCapacity",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_RETURNHOMEBATTERYCAPACITY,
    .args = ARDrone3_PilotingState_ReturnHomeBatteryCapacity_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingState_ReturnHomeBatteryCapacity_arg_tab),
    .comment = "Return home battery capacity"
  },
};
static struct arsdk_cmd ARDrone3_PilotingEvent_cmd_tab[] = {
  {
    .name = "moveByEnd",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGEVENT_CMD_MOVEBYEND,
    .args = ARDrone3_PilotingEvent_moveByEnd_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingEvent_moveByEnd_arg_tab),
    .comment = "Relative move ended"
  },
};
static struct arsdk_cmd ARDrone3_Network_cmd_tab[] = {
  {
    .name = "WifiScan",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORK_CMD_WIFISCAN,
    .args = ARDrone3_Network_WifiScan_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Network_WifiScan_arg_tab),
    .comment = "Scan wifi network"
  },
  {
    .name = "WifiAuthChannel",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORK_CMD_WIFIAUTHCHANNEL,
    .args = NULL,
    .nargs = 0,
    .comment = "Ask for available wifi channels"
  },
};
static struct arsdk_cmd ARDrone3_NetworkState_cmd_tab[] = {
  {
    .name = "WifiScanListChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORKSTATE_CMD_WIFISCANLISTCHANGED,
    .args = ARDrone3_NetworkState_WifiScanListChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_NetworkState_WifiScanListChanged_arg_tab),
    .comment = "Wifi scan results"
  },
  {
    .name = "AllWifiScanChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORKSTATE_CMD_ALLWIFISCANCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "Wifi scan ended"
  },
  {
    .name = "WifiAuthChannelListChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORKSTATE_CMD_WIFIAUTHCHANNELLISTCHANGED,
    .args = ARDrone3_NetworkState_WifiAuthChannelListChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_NetworkState_WifiAuthChannelListChanged_arg_tab),
    .comment = "Available wifi channels"
  },
  {
    .name = "AllWifiAuthChannelChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORKSTATE_CMD_ALLWIFIAUTHCHANNELCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "Available wifi channels completed"
  },
};
static struct arsdk_cmd ARDrone3_PilotingSettings_cmd_tab[] = {
  {
    .name = "MaxAltitude",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_MAXALTITUDE,
    .args = ARDrone3_PilotingSettings_MaxAltitude_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_MaxAltitude_arg_tab),
    .comment = "Set max altitude"
  },
  {
    .name = "MaxTilt",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_MAXTILT,
    .args = ARDrone3_PilotingSettings_MaxTilt_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_MaxTilt_arg_tab),
    .comment = "Set max pitch/roll"
  },
  {
    .name = "AbsolutControl",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_ABSOLUTCONTROL,
    .args = ARDrone3_PilotingSettings_AbsolutControl_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_AbsolutControl_arg_tab),
    .comment = "Set absolut control"
  },
  {
    .name = "MaxDistance",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_MAXDISTANCE,
    .args = ARDrone3_PilotingSettings_MaxDistance_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_MaxDistance_arg_tab),
    .comment = "Set max distance"
  },
  {
    .name = "NoFlyOverMaxDistance",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_NOFLYOVERMAXDISTANCE,
    .args = ARDrone3_PilotingSettings_NoFlyOverMaxDistance_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_NoFlyOverMaxDistance_arg_tab),
    .comment = "Enable geofence"
  },
  {
    .name = "setAutonomousFlightMaxHorizontalSpeed",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_SETAUTONOMOUSFLIGHTMAXHORIZONTALSPEED,
    .args = ARDrone3_PilotingSettings_setAutonomousFlightMaxHorizontalSpeed_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_setAutonomousFlightMaxHorizontalSpeed_arg_tab),
    .comment = "Set autonomous flight max horizontal speed"
  },
  {
    .name = "setAutonomousFlightMaxVerticalSpeed",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_SETAUTONOMOUSFLIGHTMAXVERTICALSPEED,
    .args = ARDrone3_PilotingSettings_setAutonomousFlightMaxVerticalSpeed_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_setAutonomousFlightMaxVerticalSpeed_arg_tab),
    .comment = "Set autonomous flight max vertical speed"
  },
  {
    .name = "setAutonomousFlightMaxHorizontalAcceleration",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_SETAUTONOMOUSFLIGHTMAXHORIZONTALACCELERATION,
    .args = ARDrone3_PilotingSettings_setAutonomousFlightMaxHorizontalAcceleration_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_setAutonomousFlightMaxHorizontalAcceleration_arg_tab),
    .comment = "Set autonomous flight max horizontal acceleration"
  },
  {
    .name = "setAutonomousFlightMaxVerticalAcceleration",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_SETAUTONOMOUSFLIGHTMAXVERTICALACCELERATION,
    .args = ARDrone3_PilotingSettings_setAutonomousFlightMaxVerticalAcceleration_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_setAutonomousFlightMaxVerticalAcceleration_arg_tab),
    .comment = "Set autonomous flight max vertical acceleration"
  },
  {
    .name = "setAutonomousFlightMaxRotationSpeed",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_SETAUTONOMOUSFLIGHTMAXROTATIONSPEED,
    .args = ARDrone3_PilotingSettings_setAutonomousFlightMaxRotationSpeed_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_setAutonomousFlightMaxRotationSpeed_arg_tab),
    .comment = "Set autonomous flight max rotation speed"
  },
  {
    .name = "BankedTurn",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_BANKEDTURN,
    .args = ARDrone3_PilotingSettings_BankedTurn_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_BankedTurn_arg_tab),
    .comment = "Set banked turn mode"
  },
  {
    .name = "MinAltitude",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_MINALTITUDE,
    .args = ARDrone3_PilotingSettings_MinAltitude_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_MinAltitude_arg_tab),
    .comment = "Set minimum altitude"
  },
  {
    .name = "CirclingDirection",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_CIRCLINGDIRECTION,
    .args = ARDrone3_PilotingSettings_CirclingDirection_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_CirclingDirection_arg_tab),
    .comment = "Set default circling direction"
  },
  {
    .name = "CirclingRadius",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_CIRCLINGRADIUS,
    .args = ARDrone3_PilotingSettings_CirclingRadius_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_CirclingRadius_arg_tab),
    .comment = "Set circling radius"
  },
  {
    .name = "CirclingAltitude",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_CIRCLINGALTITUDE,
    .args = ARDrone3_PilotingSettings_CirclingAltitude_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_CirclingAltitude_arg_tab),
    .comment = "Set min circling altitude"
  },
  {
    .name = "PitchMode",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_PITCHMODE,
    .args = ARDrone3_PilotingSettings_PitchMode_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_PitchMode_arg_tab),
    .comment = "Set pitch mode"
  },
  {
    .name = "SetMotionDetectionMode",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGS_CMD_SETMOTIONDETECTIONMODE,
    .args = ARDrone3_PilotingSettings_SetMotionDetectionMode_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettings_SetMotionDetectionMode_arg_tab),
    .comment = "Enable/disable the motion detection"
  },
};
static struct arsdk_cmd ARDrone3_PilotingSettingsState_cmd_tab[] = {
  {
    .name = "MaxAltitudeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_MAXALTITUDECHANGED,
    .args = ARDrone3_PilotingSettingsState_MaxAltitudeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_MaxAltitudeChanged_arg_tab),
    .comment = "Max altitude"
  },
  {
    .name = "MaxTiltChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_MAXTILTCHANGED,
    .args = ARDrone3_PilotingSettingsState_MaxTiltChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_MaxTiltChanged_arg_tab),
    .comment = "Max pitch/roll"
  },
  {
    .name = "AbsolutControlChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_ABSOLUTCONTROLCHANGED,
    .args = ARDrone3_PilotingSettingsState_AbsolutControlChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_AbsolutControlChanged_arg_tab),
    .comment = "Absolut control"
  },
  {
    .name = "MaxDistanceChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_MAXDISTANCECHANGED,
    .args = ARDrone3_PilotingSettingsState_MaxDistanceChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_MaxDistanceChanged_arg_tab),
    .comment = "Max distance"
  },
  {
    .name = "NoFlyOverMaxDistanceChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_NOFLYOVERMAXDISTANCECHANGED,
    .args = ARDrone3_PilotingSettingsState_NoFlyOverMaxDistanceChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_NoFlyOverMaxDistanceChanged_arg_tab),
    .comment = "Geofencing"
  },
  {
    .name = "AutonomousFlightMaxHorizontalSpeed",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_AUTONOMOUSFLIGHTMAXHORIZONTALSPEED,
    .args = ARDrone3_PilotingSettingsState_AutonomousFlightMaxHorizontalSpeed_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_AutonomousFlightMaxHorizontalSpeed_arg_tab),
    .comment = "Autonomous flight max horizontal speed"
  },
  {
    .name = "AutonomousFlightMaxVerticalSpeed",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_AUTONOMOUSFLIGHTMAXVERTICALSPEED,
    .args = ARDrone3_PilotingSettingsState_AutonomousFlightMaxVerticalSpeed_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_AutonomousFlightMaxVerticalSpeed_arg_tab),
    .comment = "Autonomous flight max vertical speed"
  },
  {
    .name = "AutonomousFlightMaxHorizontalAcceleration",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_AUTONOMOUSFLIGHTMAXHORIZONTALACCELERATION,
    .args = ARDrone3_PilotingSettingsState_AutonomousFlightMaxHorizontalAcceleration_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_AutonomousFlightMaxHorizontalAcceleration_arg_tab),
    .comment = "Autonomous flight max horizontal acceleration"
  },
  {
    .name = "AutonomousFlightMaxVerticalAcceleration",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_AUTONOMOUSFLIGHTMAXVERTICALACCELERATION,
    .args = ARDrone3_PilotingSettingsState_AutonomousFlightMaxVerticalAcceleration_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_AutonomousFlightMaxVerticalAcceleration_arg_tab),
    .comment = "Autonomous flight max vertical acceleration"
  },
  {
    .name = "AutonomousFlightMaxRotationSpeed",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_AUTONOMOUSFLIGHTMAXROTATIONSPEED,
    .args = ARDrone3_PilotingSettingsState_AutonomousFlightMaxRotationSpeed_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_AutonomousFlightMaxRotationSpeed_arg_tab),
    .comment = "Autonomous flight max rotation speed"
  },
  {
    .name = "BankedTurnChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_BANKEDTURNCHANGED,
    .args = ARDrone3_PilotingSettingsState_BankedTurnChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_BankedTurnChanged_arg_tab),
    .comment = "Banked Turn mode"
  },
  {
    .name = "MinAltitudeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_MINALTITUDECHANGED,
    .args = ARDrone3_PilotingSettingsState_MinAltitudeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_MinAltitudeChanged_arg_tab),
    .comment = "Min altitude"
  },
  {
    .name = "CirclingDirectionChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_CIRCLINGDIRECTIONCHANGED,
    .args = ARDrone3_PilotingSettingsState_CirclingDirectionChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_CirclingDirectionChanged_arg_tab),
    .comment = "Circling direction"
  },
  {
    .name = "CirclingRadiusChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_CIRCLINGRADIUSCHANGED,
    .args = ARDrone3_PilotingSettingsState_CirclingRadiusChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_CirclingRadiusChanged_arg_tab),
    .comment = "Circling radius"
  },
  {
    .name = "CirclingAltitudeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_CIRCLINGALTITUDECHANGED,
    .args = ARDrone3_PilotingSettingsState_CirclingAltitudeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_CirclingAltitudeChanged_arg_tab),
    .comment = "Circling altitude"
  },
  {
    .name = "PitchModeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_PITCHMODECHANGED,
    .args = ARDrone3_PilotingSettingsState_PitchModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_PitchModeChanged_arg_tab),
    .comment = "Pitch mode"
  },
  {
    .name = "MotionDetection",
    .id = ARCOMMANDS_ID_ARDRONE3_PILOTINGSETTINGSSTATE_CMD_MOTIONDETECTION,
    .args = ARDrone3_PilotingSettingsState_MotionDetection_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PilotingSettingsState_MotionDetection_arg_tab),
    .comment = "State of the motion detection"
  },
};
static struct arsdk_cmd ARDrone3_SpeedSettings_cmd_tab[] = {
  {
    .name = "MaxVerticalSpeed",
    .id = ARCOMMANDS_ID_ARDRONE3_SPEEDSETTINGS_CMD_MAXVERTICALSPEED,
    .args = ARDrone3_SpeedSettings_MaxVerticalSpeed_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SpeedSettings_MaxVerticalSpeed_arg_tab),
    .comment = "Set max vertical speed"
  },
  {
    .name = "MaxRotationSpeed",
    .id = ARCOMMANDS_ID_ARDRONE3_SPEEDSETTINGS_CMD_MAXROTATIONSPEED,
    .args = ARDrone3_SpeedSettings_MaxRotationSpeed_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SpeedSettings_MaxRotationSpeed_arg_tab),
    .comment = "Set max rotation speed"
  },
  {
    .name = "HullProtection",
    .id = ARCOMMANDS_ID_ARDRONE3_SPEEDSETTINGS_CMD_HULLPROTECTION,
    .args = ARDrone3_SpeedSettings_HullProtection_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SpeedSettings_HullProtection_arg_tab),
    .comment = "Set the presence of hull protection"
  },
  {
    .name = "Outdoor",
    .id = ARCOMMANDS_ID_ARDRONE3_SPEEDSETTINGS_CMD_OUTDOOR,
    .args = ARDrone3_SpeedSettings_Outdoor_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SpeedSettings_Outdoor_arg_tab),
    .comment = "Set outdoor mode"
  },
  {
    .name = "MaxPitchRollRotationSpeed",
    .id = ARCOMMANDS_ID_ARDRONE3_SPEEDSETTINGS_CMD_MAXPITCHROLLROTATIONSPEED,
    .args = ARDrone3_SpeedSettings_MaxPitchRollRotationSpeed_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SpeedSettings_MaxPitchRollRotationSpeed_arg_tab),
    .comment = "Set max pitch/roll rotation speed"
  },
};
static struct arsdk_cmd ARDrone3_SpeedSettingsState_cmd_tab[] = {
  {
    .name = "MaxVerticalSpeedChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SPEEDSETTINGSSTATE_CMD_MAXVERTICALSPEEDCHANGED,
    .args = ARDrone3_SpeedSettingsState_MaxVerticalSpeedChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SpeedSettingsState_MaxVerticalSpeedChanged_arg_tab),
    .comment = "Max vertical speed"
  },
  {
    .name = "MaxRotationSpeedChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SPEEDSETTINGSSTATE_CMD_MAXROTATIONSPEEDCHANGED,
    .args = ARDrone3_SpeedSettingsState_MaxRotationSpeedChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SpeedSettingsState_MaxRotationSpeedChanged_arg_tab),
    .comment = "Max rotation speed"
  },
  {
    .name = "HullProtectionChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SPEEDSETTINGSSTATE_CMD_HULLPROTECTIONCHANGED,
    .args = ARDrone3_SpeedSettingsState_HullProtectionChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SpeedSettingsState_HullProtectionChanged_arg_tab),
    .comment = "Presence of hull protection"
  },
  {
    .name = "OutdoorChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SPEEDSETTINGSSTATE_CMD_OUTDOORCHANGED,
    .args = ARDrone3_SpeedSettingsState_OutdoorChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SpeedSettingsState_OutdoorChanged_arg_tab),
    .comment = "Outdoor mode"
  },
  {
    .name = "MaxPitchRollRotationSpeedChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SPEEDSETTINGSSTATE_CMD_MAXPITCHROLLROTATIONSPEEDCHANGED,
    .args = ARDrone3_SpeedSettingsState_MaxPitchRollRotationSpeedChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SpeedSettingsState_MaxPitchRollRotationSpeedChanged_arg_tab),
    .comment = "Max pitch/roll rotation speed"
  },
};
static struct arsdk_cmd ARDrone3_NetworkSettings_cmd_tab[] = {
  {
    .name = "WifiSelection",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORKSETTINGS_CMD_WIFISELECTION,
    .args = ARDrone3_NetworkSettings_WifiSelection_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_NetworkSettings_WifiSelection_arg_tab),
    .comment = "Select Wifi"
  },
  {
    .name = "wifiSecurity",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORKSETTINGS_CMD_WIFISECURITY,
    .args = ARDrone3_NetworkSettings_wifiSecurity_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_NetworkSettings_wifiSecurity_arg_tab),
    .comment = "Set wifi security type"
  },
};
static struct arsdk_cmd ARDrone3_NetworkSettingsState_cmd_tab[] = {
  {
    .name = "WifiSelectionChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORKSETTINGSSTATE_CMD_WIFISELECTIONCHANGED,
    .args = ARDrone3_NetworkSettingsState_WifiSelectionChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_NetworkSettingsState_WifiSelectionChanged_arg_tab),
    .comment = "Wifi selection"
  },
  {
    .name = "wifiSecurityChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORKSETTINGSSTATE_CMD_WIFISECURITYCHANGED,
    .args = ARDrone3_NetworkSettingsState_wifiSecurityChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_NetworkSettingsState_wifiSecurityChanged_arg_tab),
    .comment = "Wifi security type"
  },
  {
    .name = "wifiSecurity",
    .id = ARCOMMANDS_ID_ARDRONE3_NETWORKSETTINGSSTATE_CMD_WIFISECURITY,
    .args = ARDrone3_NetworkSettingsState_wifiSecurity_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_NetworkSettingsState_wifiSecurity_arg_tab),
    .comment = "Wifi security type"
  },
};
static struct arsdk_cmd ARDrone3_SettingsState_cmd_tab[] = {
  {
    .name = "ProductMotorVersionListChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_CMD_PRODUCTMOTORVERSIONLISTCHANGED,
    .args = ARDrone3_SettingsState_ProductMotorVersionListChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SettingsState_ProductMotorVersionListChanged_arg_tab),
    .comment = "Motor version"
  },
  {
    .name = "ProductGPSVersionChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_CMD_PRODUCTGPSVERSIONCHANGED,
    .args = ARDrone3_SettingsState_ProductGPSVersionChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SettingsState_ProductGPSVersionChanged_arg_tab),
    .comment = "GPS version"
  },
  {
    .name = "MotorErrorStateChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_CMD_MOTORERRORSTATECHANGED,
    .args = ARDrone3_SettingsState_MotorErrorStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SettingsState_MotorErrorStateChanged_arg_tab),
    .comment = "Motor error"
  },
  {
    .name = "MotorSoftwareVersionChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_CMD_MOTORSOFTWAREVERSIONCHANGED,
    .args = ARDrone3_SettingsState_MotorSoftwareVersionChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SettingsState_MotorSoftwareVersionChanged_arg_tab),
    .comment = "Motor version"
  },
  {
    .name = "MotorFlightsStatusChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_CMD_MOTORFLIGHTSSTATUSCHANGED,
    .args = ARDrone3_SettingsState_MotorFlightsStatusChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SettingsState_MotorFlightsStatusChanged_arg_tab),
    .comment = "Motor flight status"
  },
  {
    .name = "MotorErrorLastErrorChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_CMD_MOTORERRORLASTERRORCHANGED,
    .args = ARDrone3_SettingsState_MotorErrorLastErrorChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SettingsState_MotorErrorLastErrorChanged_arg_tab),
    .comment = "Last motor error"
  },
  {
    .name = "P7ID",
    .id = ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_CMD_P7ID,
    .args = ARDrone3_SettingsState_P7ID_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SettingsState_P7ID_arg_tab),
    .comment = "P7ID"
  },
  {
    .name = "CPUID",
    .id = ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_CMD_CPUID,
    .args = ARDrone3_SettingsState_CPUID_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SettingsState_CPUID_arg_tab),
    .comment = "Product main cpu id"
  },
};
static struct arsdk_cmd ARDrone3_PictureSettings_cmd_tab[] = {
  {
    .name = "PictureFormatSelection",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGS_CMD_PICTUREFORMATSELECTION,
    .args = ARDrone3_PictureSettings_PictureFormatSelection_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettings_PictureFormatSelection_arg_tab),
    .comment = "Set picture format"
  },
  {
    .name = "AutoWhiteBalanceSelection",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGS_CMD_AUTOWHITEBALANCESELECTION,
    .args = ARDrone3_PictureSettings_AutoWhiteBalanceSelection_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettings_AutoWhiteBalanceSelection_arg_tab),
    .comment = "Set White Balance mode"
  },
  {
    .name = "ExpositionSelection",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGS_CMD_EXPOSITIONSELECTION,
    .args = ARDrone3_PictureSettings_ExpositionSelection_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettings_ExpositionSelection_arg_tab),
    .comment = "Set image exposure"
  },
  {
    .name = "SaturationSelection",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGS_CMD_SATURATIONSELECTION,
    .args = ARDrone3_PictureSettings_SaturationSelection_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettings_SaturationSelection_arg_tab),
    .comment = "Set image saturation"
  },
  {
    .name = "TimelapseSelection",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGS_CMD_TIMELAPSESELECTION,
    .args = ARDrone3_PictureSettings_TimelapseSelection_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettings_TimelapseSelection_arg_tab),
    .comment = "Set timelapse mode"
  },
  {
    .name = "VideoAutorecordSelection",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGS_CMD_VIDEOAUTORECORDSELECTION,
    .args = ARDrone3_PictureSettings_VideoAutorecordSelection_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettings_VideoAutorecordSelection_arg_tab),
    .comment = "Set video autorecord mode"
  },
  {
    .name = "VideoStabilizationMode",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGS_CMD_VIDEOSTABILIZATIONMODE,
    .args = ARDrone3_PictureSettings_VideoStabilizationMode_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettings_VideoStabilizationMode_arg_tab),
    .comment = "Set video stabilization mode"
  },
  {
    .name = "VideoRecordingMode",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGS_CMD_VIDEORECORDINGMODE,
    .args = ARDrone3_PictureSettings_VideoRecordingMode_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettings_VideoRecordingMode_arg_tab),
    .comment = "Set video recording mode"
  },
  {
    .name = "VideoFramerate",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGS_CMD_VIDEOFRAMERATE,
    .args = ARDrone3_PictureSettings_VideoFramerate_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettings_VideoFramerate_arg_tab),
    .comment = "Set video framerate"
  },
  {
    .name = "VideoResolutions",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGS_CMD_VIDEORESOLUTIONS,
    .args = ARDrone3_PictureSettings_VideoResolutions_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettings_VideoResolutions_arg_tab),
    .comment = "Set video resolutions"
  },
};
static struct arsdk_cmd ARDrone3_PictureSettingsState_cmd_tab[] = {
  {
    .name = "PictureFormatChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGSSTATE_CMD_PICTUREFORMATCHANGED,
    .args = ARDrone3_PictureSettingsState_PictureFormatChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettingsState_PictureFormatChanged_arg_tab),
    .comment = "Picture format"
  },
  {
    .name = "AutoWhiteBalanceChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGSSTATE_CMD_AUTOWHITEBALANCECHANGED,
    .args = ARDrone3_PictureSettingsState_AutoWhiteBalanceChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettingsState_AutoWhiteBalanceChanged_arg_tab),
    .comment = "White balance mode"
  },
  {
    .name = "ExpositionChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGSSTATE_CMD_EXPOSITIONCHANGED,
    .args = ARDrone3_PictureSettingsState_ExpositionChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettingsState_ExpositionChanged_arg_tab),
    .comment = "Image exposure"
  },
  {
    .name = "SaturationChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGSSTATE_CMD_SATURATIONCHANGED,
    .args = ARDrone3_PictureSettingsState_SaturationChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettingsState_SaturationChanged_arg_tab),
    .comment = "Image saturation"
  },
  {
    .name = "TimelapseChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGSSTATE_CMD_TIMELAPSECHANGED,
    .args = ARDrone3_PictureSettingsState_TimelapseChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettingsState_TimelapseChanged_arg_tab),
    .comment = "Timelapse mode"
  },
  {
    .name = "VideoAutorecordChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGSSTATE_CMD_VIDEOAUTORECORDCHANGED,
    .args = ARDrone3_PictureSettingsState_VideoAutorecordChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettingsState_VideoAutorecordChanged_arg_tab),
    .comment = "Video Autorecord mode"
  },
  {
    .name = "VideoStabilizationModeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGSSTATE_CMD_VIDEOSTABILIZATIONMODECHANGED,
    .args = ARDrone3_PictureSettingsState_VideoStabilizationModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettingsState_VideoStabilizationModeChanged_arg_tab),
    .comment = "Video stabilization mode"
  },
  {
    .name = "VideoRecordingModeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGSSTATE_CMD_VIDEORECORDINGMODECHANGED,
    .args = ARDrone3_PictureSettingsState_VideoRecordingModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettingsState_VideoRecordingModeChanged_arg_tab),
    .comment = "Video recording mode"
  },
  {
    .name = "VideoFramerateChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGSSTATE_CMD_VIDEOFRAMERATECHANGED,
    .args = ARDrone3_PictureSettingsState_VideoFramerateChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettingsState_VideoFramerateChanged_arg_tab),
    .comment = "Video framerate"
  },
  {
    .name = "VideoResolutionsChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_PICTURESETTINGSSTATE_CMD_VIDEORESOLUTIONSCHANGED,
    .args = ARDrone3_PictureSettingsState_VideoResolutionsChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PictureSettingsState_VideoResolutionsChanged_arg_tab),
    .comment = "Video resolutions"
  },
};
static struct arsdk_cmd ARDrone3_MediaStreaming_cmd_tab[] = {
  {
    .name = "VideoEnable",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIASTREAMING_CMD_VIDEOENABLE,
    .args = ARDrone3_MediaStreaming_VideoEnable_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaStreaming_VideoEnable_arg_tab),
    .comment = "Enable/disable video streaming"
  },
  {
    .name = "VideoStreamMode",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIASTREAMING_CMD_VIDEOSTREAMMODE,
    .args = ARDrone3_MediaStreaming_VideoStreamMode_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaStreaming_VideoStreamMode_arg_tab),
    .comment = "Set the stream mode"
  },
};
static struct arsdk_cmd ARDrone3_MediaStreamingState_cmd_tab[] = {
  {
    .name = "VideoEnableChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIASTREAMINGSTATE_CMD_VIDEOENABLECHANGED,
    .args = ARDrone3_MediaStreamingState_VideoEnableChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaStreamingState_VideoEnableChanged_arg_tab),
    .comment = "Video stream state"
  },
  {
    .name = "VideoStreamModeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_MEDIASTREAMINGSTATE_CMD_VIDEOSTREAMMODECHANGED,
    .args = ARDrone3_MediaStreamingState_VideoStreamModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_MediaStreamingState_VideoStreamModeChanged_arg_tab),
    .comment = "Video stream mode state"
  },
};
static struct arsdk_cmd ARDrone3_GPSSettings_cmd_tab[] = {
  {
    .name = "SetHome",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGS_CMD_SETHOME,
    .args = ARDrone3_GPSSettings_SetHome_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettings_SetHome_arg_tab),
    .comment = "Set home position"
  },
  {
    .name = "ResetHome",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGS_CMD_RESETHOME,
    .args = NULL,
    .nargs = 0,
    .comment = "Reset home position"
  },
  {
    .name = "SendControllerGPS",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGS_CMD_SENDCONTROLLERGPS,
    .args = ARDrone3_GPSSettings_SendControllerGPS_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettings_SendControllerGPS_arg_tab),
    .comment = "Set controller gps location"
  },
  {
    .name = "HomeType",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGS_CMD_HOMETYPE,
    .args = ARDrone3_GPSSettings_HomeType_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettings_HomeType_arg_tab),
    .comment = "Set the preferred home type"
  },
  {
    .name = "ReturnHomeDelay",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGS_CMD_RETURNHOMEDELAY,
    .args = ARDrone3_GPSSettings_ReturnHomeDelay_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettings_ReturnHomeDelay_arg_tab),
    .comment = "Set the return home delay"
  },
};
static struct arsdk_cmd ARDrone3_GPSSettingsState_cmd_tab[] = {
  {
    .name = "HomeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGSSTATE_CMD_HOMECHANGED,
    .args = ARDrone3_GPSSettingsState_HomeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettingsState_HomeChanged_arg_tab),
    .comment = "Home location"
  },
  {
    .name = "ResetHomeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGSSTATE_CMD_RESETHOMECHANGED,
    .args = ARDrone3_GPSSettingsState_ResetHomeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettingsState_ResetHomeChanged_arg_tab),
    .comment = "Home location has been reset"
  },
  {
    .name = "GPSFixStateChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGSSTATE_CMD_GPSFIXSTATECHANGED,
    .args = ARDrone3_GPSSettingsState_GPSFixStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettingsState_GPSFixStateChanged_arg_tab),
    .comment = "Gps fix info"
  },
  {
    .name = "GPSUpdateStateChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGSSTATE_CMD_GPSUPDATESTATECHANGED,
    .args = ARDrone3_GPSSettingsState_GPSUpdateStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettingsState_GPSUpdateStateChanged_arg_tab),
    .comment = "Gps update state"
  },
  {
    .name = "HomeTypeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGSSTATE_CMD_HOMETYPECHANGED,
    .args = ARDrone3_GPSSettingsState_HomeTypeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettingsState_HomeTypeChanged_arg_tab),
    .comment = "Preferred home type"
  },
  {
    .name = "ReturnHomeDelayChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGSSTATE_CMD_RETURNHOMEDELAYCHANGED,
    .args = ARDrone3_GPSSettingsState_ReturnHomeDelayChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettingsState_ReturnHomeDelayChanged_arg_tab),
    .comment = "Return home delay"
  },
  {
    .name = "GeofenceCenterChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSETTINGSSTATE_CMD_GEOFENCECENTERCHANGED,
    .args = ARDrone3_GPSSettingsState_GeofenceCenterChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSSettingsState_GeofenceCenterChanged_arg_tab),
    .comment = "Geofence center"
  },
};
static struct arsdk_cmd ARDrone3_CameraState_cmd_tab[] = {
  {
    .name = "Orientation",
    .id = ARCOMMANDS_ID_ARDRONE3_CAMERASTATE_CMD_ORIENTATION,
    .args = ARDrone3_CameraState_Orientation_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_CameraState_Orientation_arg_tab),
    .comment = "Camera orientation"
  },
  {
    .name = "defaultCameraOrientation",
    .id = ARCOMMANDS_ID_ARDRONE3_CAMERASTATE_CMD_DEFAULTCAMERAORIENTATION,
    .args = ARDrone3_CameraState_defaultCameraOrientation_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_CameraState_defaultCameraOrientation_arg_tab),
    .comment = "Orientation of the camera center"
  },
  {
    .name = "OrientationV2",
    .id = ARCOMMANDS_ID_ARDRONE3_CAMERASTATE_CMD_ORIENTATIONV2,
    .args = ARDrone3_CameraState_OrientationV2_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_CameraState_OrientationV2_arg_tab),
    .comment = "Camera orientation"
  },
  {
    .name = "defaultCameraOrientationV2",
    .id = ARCOMMANDS_ID_ARDRONE3_CAMERASTATE_CMD_DEFAULTCAMERAORIENTATIONV2,
    .args = ARDrone3_CameraState_defaultCameraOrientationV2_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_CameraState_defaultCameraOrientationV2_arg_tab),
    .comment = "Orientation of the camera center"
  },
  {
    .name = "VelocityRange",
    .id = ARCOMMANDS_ID_ARDRONE3_CAMERASTATE_CMD_VELOCITYRANGE,
    .args = ARDrone3_CameraState_VelocityRange_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_CameraState_VelocityRange_arg_tab),
    .comment = "Camera velocity range"
  },
};
static struct arsdk_cmd ARDrone3_Antiflickering_cmd_tab[] = {
  {
    .name = "electricFrequency",
    .id = ARCOMMANDS_ID_ARDRONE3_ANTIFLICKERING_CMD_ELECTRICFREQUENCY,
    .args = ARDrone3_Antiflickering_electricFrequency_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Antiflickering_electricFrequency_arg_tab),
    .comment = "Set the electric frequency"
  },
  {
    .name = "setMode",
    .id = ARCOMMANDS_ID_ARDRONE3_ANTIFLICKERING_CMD_SETMODE,
    .args = ARDrone3_Antiflickering_setMode_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_Antiflickering_setMode_arg_tab),
    .comment = "Set the antiflickering mode"
  },
};
static struct arsdk_cmd ARDrone3_AntiflickeringState_cmd_tab[] = {
  {
    .name = "electricFrequencyChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_ANTIFLICKERINGSTATE_CMD_ELECTRICFREQUENCYCHANGED,
    .args = ARDrone3_AntiflickeringState_electricFrequencyChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_AntiflickeringState_electricFrequencyChanged_arg_tab),
    .comment = "Electric frequency"
  },
  {
    .name = "modeChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_ANTIFLICKERINGSTATE_CMD_MODECHANGED,
    .args = ARDrone3_AntiflickeringState_modeChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_AntiflickeringState_modeChanged_arg_tab),
    .comment = "Antiflickering mode"
  },
};
static struct arsdk_cmd ARDrone3_GPSState_cmd_tab[] = {
  {
    .name = "NumberOfSatelliteChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSTATE_CMD_NUMBEROFSATELLITECHANGED,
    .args = ARDrone3_GPSState_NumberOfSatelliteChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSState_NumberOfSatelliteChanged_arg_tab),
    .comment = "Number of GPS satellites"
  },
  {
    .name = "HomeTypeAvailabilityChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSTATE_CMD_HOMETYPEAVAILABILITYCHANGED,
    .args = ARDrone3_GPSState_HomeTypeAvailabilityChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSState_HomeTypeAvailabilityChanged_arg_tab),
    .comment = "Home type availability"
  },
  {
    .name = "HomeTypeChosenChanged",
    .id = ARCOMMANDS_ID_ARDRONE3_GPSSTATE_CMD_HOMETYPECHOSENCHANGED,
    .args = ARDrone3_GPSState_HomeTypeChosenChanged_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_GPSState_HomeTypeChosenChanged_arg_tab),
    .comment = "Home type"
  },
};
static struct arsdk_cmd ARDrone3_PROState_cmd_tab[] = {
  {
    .name = "Features",
    .id = ARCOMMANDS_ID_ARDRONE3_PROSTATE_CMD_FEATURES,
    .args = ARDrone3_PROState_Features_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_PROState_Features_arg_tab),
    .comment = "Pro features"
  },
};
static struct arsdk_cmd ARDrone3_AccessoryState_cmd_tab[] = {
  {
    .name = "ConnectedAccessories",
    .id = ARCOMMANDS_ID_ARDRONE3_ACCESSORYSTATE_CMD_CONNECTEDACCESSORIES,
    .args = ARDrone3_AccessoryState_ConnectedAccessories_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_AccessoryState_ConnectedAccessories_arg_tab),
    .comment = "List of connected accessories"
  },
  {
    .name = "Battery",
    .id = ARCOMMANDS_ID_ARDRONE3_ACCESSORYSTATE_CMD_BATTERY,
    .args = ARDrone3_AccessoryState_Battery_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_AccessoryState_Battery_arg_tab),
    .comment = "Connected accessories battery"
  },
};
static struct arsdk_cmd ARDrone3_Sound_cmd_tab[] = {
  {
    .name = "StartAlertSound",
    .id = ARCOMMANDS_ID_ARDRONE3_SOUND_CMD_STARTALERTSOUND,
    .args = NULL,
    .nargs = 0,
    .comment = "Start alert sound"
  },
  {
    .name = "StopAlertSound",
    .id = ARCOMMANDS_ID_ARDRONE3_SOUND_CMD_STOPALERTSOUND,
    .args = NULL,
    .nargs = 0,
    .comment = "Stop alert sound"
  },
};
static struct arsdk_cmd ARDrone3_SoundState_cmd_tab[] = {
  {
    .name = "AlertSound",
    .id = ARCOMMANDS_ID_ARDRONE3_SOUNDSTATE_CMD_ALERTSOUND,
    .args = ARDrone3_SoundState_AlertSound_arg_tab,
    .nargs = ARRAY_SIZE(ARDrone3_SoundState_AlertSound_arg_tab),
    .comment = "Alert sound state"
  },
};
static struct arsdk_class ARDrone3_class_tab[] = {
  {
    .name = "Piloting",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTING,
    .cmds = ARDrone3_Piloting_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_Piloting_cmd_tab),
    .comment = "All commands related to piloting the drone"
  },
  {
    .name = "Animations",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_ANIMATIONS,
    .cmds = ARDrone3_Animations_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_Animations_cmd_tab),
    .comment = "Animation commands"
  },
  {
    .name = "Camera",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_CAMERA,
    .cmds = ARDrone3_Camera_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_Camera_cmd_tab),
    .comment = "Ask the drone to move camera"
  },
  {
    .name = "MediaRecord",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_MEDIARECORD,
    .cmds = ARDrone3_MediaRecord_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_MediaRecord_cmd_tab),
    .comment = "Media recording management"
  },
  {
    .name = "MediaRecordState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_MEDIARECORDSTATE,
    .cmds = ARDrone3_MediaRecordState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_MediaRecordState_cmd_tab),
    .comment = "State of media recording"
  },
  {
    .name = "MediaRecordEvent",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_MEDIARECORDEVENT,
    .cmds = ARDrone3_MediaRecordEvent_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_MediaRecordEvent_cmd_tab),
    .comment = "Events of media recording"
  },
  {
    .name = "PilotingState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTINGSTATE,
    .cmds = ARDrone3_PilotingState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_PilotingState_cmd_tab),
    .comment = "State from drone"
  },
  {
    .name = "PilotingEvent",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTINGEVENT,
    .cmds = ARDrone3_PilotingEvent_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_PilotingEvent_cmd_tab),
    .comment = "Events of Piloting"
  },
  {
    .name = "Network",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_NETWORK,
    .cmds = ARDrone3_Network_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_Network_cmd_tab),
    .comment = "Network related commands"
  },
  {
    .name = "NetworkState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_NETWORKSTATE,
    .cmds = ARDrone3_NetworkState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_NetworkState_cmd_tab),
    .comment = "Network state from Product"
  },
  {
    .name = "PilotingSettings",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTINGSETTINGS,
    .cmds = ARDrone3_PilotingSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_PilotingSettings_cmd_tab),
    .comment = "Piloting Settings commands"
  },
  {
    .name = "PilotingSettingsState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTINGSETTINGSSTATE,
    .cmds = ARDrone3_PilotingSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_PilotingSettingsState_cmd_tab),
    .comment = "Piloting Settings state from product"
  },
  {
    .name = "SpeedSettings",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_SPEEDSETTINGS,
    .cmds = ARDrone3_SpeedSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_SpeedSettings_cmd_tab),
    .comment = "Speed Settings commands"
  },
  {
    .name = "SpeedSettingsState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_SPEEDSETTINGSSTATE,
    .cmds = ARDrone3_SpeedSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_SpeedSettingsState_cmd_tab),
    .comment = "Speed Settings state from product"
  },
  {
    .name = "NetworkSettings",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_NETWORKSETTINGS,
    .cmds = ARDrone3_NetworkSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_NetworkSettings_cmd_tab),
    .comment = "Network settings commands"
  },
  {
    .name = "NetworkSettingsState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_NETWORKSETTINGSSTATE,
    .cmds = ARDrone3_NetworkSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_NetworkSettingsState_cmd_tab),
    .comment = "Network settings state from product"
  },
  {
    .name = "SettingsState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE,
    .cmds = ARDrone3_SettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_SettingsState_cmd_tab),
    .comment = "Settings state from product"
  },
  {
    .name = "PictureSettings",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_PICTURESETTINGS,
    .cmds = ARDrone3_PictureSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_PictureSettings_cmd_tab),
    .comment = "Photo settings chosen by the user"
  },
  {
    .name = "PictureSettingsState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_PICTURESETTINGSSTATE,
    .cmds = ARDrone3_PictureSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_PictureSettingsState_cmd_tab),
    .comment = "Photo settings state from product"
  },
  {
    .name = "MediaStreaming",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_MEDIASTREAMING,
    .cmds = ARDrone3_MediaStreaming_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_MediaStreaming_cmd_tab),
    .comment = "Control media streaming behavior."
  },
  {
    .name = "MediaStreamingState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_MEDIASTREAMINGSTATE,
    .cmds = ARDrone3_MediaStreamingState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_MediaStreamingState_cmd_tab),
    .comment = "Media streaming status."
  },
  {
    .name = "GPSSettings",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_GPSSETTINGS,
    .cmds = ARDrone3_GPSSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_GPSSettings_cmd_tab),
    .comment = "GPS settings"
  },
  {
    .name = "GPSSettingsState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_GPSSETTINGSSTATE,
    .cmds = ARDrone3_GPSSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_GPSSettingsState_cmd_tab),
    .comment = "GPS settings state"
  },
  {
    .name = "CameraState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_CAMERASTATE,
    .cmds = ARDrone3_CameraState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_CameraState_cmd_tab),
    .comment = "Camera state"
  },
  {
    .name = "Antiflickering",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_ANTIFLICKERING,
    .cmds = ARDrone3_Antiflickering_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_Antiflickering_cmd_tab),
    .comment = "Anti-flickering related commands"
  },
  {
    .name = "AntiflickeringState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_ANTIFLICKERINGSTATE,
    .cmds = ARDrone3_AntiflickeringState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_AntiflickeringState_cmd_tab),
    .comment = "Anti-flickering related states"
  },
  {
    .name = "GPSState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_GPSSTATE,
    .cmds = ARDrone3_GPSState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_GPSState_cmd_tab),
    .comment = "GPS related States"
  },
  {
    .name = "PROState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_PROSTATE,
    .cmds = ARDrone3_PROState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_PROState_cmd_tab),
    .comment = "Pro features enabled on the Bebop"
  },
  {
    .name = "AccessoryState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_ACCESSORYSTATE,
    .cmds = ARDrone3_AccessoryState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_AccessoryState_cmd_tab),
    .comment = "Information about the connected accessories"
  },
  {
    .name = "Sound",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_SOUND,
    .cmds = ARDrone3_Sound_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_Sound_cmd_tab),
    .comment = "Sounds related commands"
  },
  {
    .name = "SoundState",
    .ident = ARCOMMANDS_ID_ARDRONE3_CLASS_SOUNDSTATE,
    .cmds = ARDrone3_SoundState_cmd_tab,
    .ncmds = ARRAY_SIZE(ARDrone3_SoundState_cmd_tab),
    .comment = "Sounds related events"
  },
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = NULL,
    .ncmds = 0,
    .comment = ""
  },
};
static struct arsdk_arg common_Settings_ProductName_arg_tab[] = {
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product name"
  },
};
static struct arsdk_arg common_Settings_Country_arg_tab[] = {
  {
    .name = "code",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Country code with ISO 3166 format"
  },
};
static struct arsdk_arg common_Settings_AutoCountry_arg_tab[] = {
  {
    .name = "automatic",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Boolean : 0 : Manual / 1 : Auto"
  },
};
static struct arsdk_arg common_Common_CurrentDate_arg_tab[] = {
  {
    .name = "date",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Date with ISO-8601 format"
  },
};
static struct arsdk_arg common_Common_CurrentTime_arg_tab[] = {
  {
    .name = "time",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Time with ISO-8601 format"
  },
};
static struct arsdk_arg common_Controller_isPiloting_arg_tab[] = {
  {
    .name = "piloting",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0 when the application is not in the piloting HUD, 1 when it enters the HUD."
  },
};
static struct arsdk_arg common_WifiSettings_OutdoorSetting_arg_tab[] = {
  {
    .name = "outdoor",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if it should use outdoor wifi settings, 0 otherwise"
  },
};
static struct arsdk_enum common_Mavlink_Start_type_enum_tab[] = {
  {
    .name = "flightPlan",
    .value = ARCOMMANDS_COMMON_MAVLINK_START_TYPE_FLIGHTPLAN,
    .comment = "Mavlink file for FlightPlan"
  },
  {
    .name = "mapMyHouse",
    .value = ARCOMMANDS_COMMON_MAVLINK_START_TYPE_MAPMYHOUSE,
    .comment = "Mavlink file for MapMyHouse"
  },
};
static struct arsdk_arg common_Mavlink_Start_arg_tab[] = {
  {
    .name = "filepath",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "flight plan file path from the mavlink ftp root"
  },
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_Mavlink_Start_type_enum_tab,
    .nenums = ARRAY_SIZE(common_Mavlink_Start_type_enum_tab),
    .comment = "type of the played mavlink file"
  },
};
static struct arsdk_arg common_FlightPlanSettings_ReturnHomeOnDisconnect_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 to enable, 0 to disable"
  },
};
static struct arsdk_arg common_Calibration_MagnetoCalibration_arg_tab[] = {
  {
    .name = "calibrate",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if the calibration should be started, 0 if it should be aborted"
  },
};
static struct arsdk_arg common_Calibration_PitotCalibration_arg_tab[] = {
  {
    .name = "calibrate",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if the calibration should be started, 0 if it should be aborted"
  },
};
static struct arsdk_arg common_GPS_ControllerPositionForRun_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Controller latitude in decimal degrees"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Controller longitude in decimal degrees"
  },
};
static struct arsdk_arg common_Audio_ControllerReadyForStreaming_arg_tab[] = {
  {
    .name = "ready",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bit field for TX and RX ready.\nbit 0 is 1 if controller is ready and wants to receive sound (Drone TX)\nbit 1 is 1 if controller is ready and wants to send sound (Drone RX)"
  },
};
static struct arsdk_arg common_Headlights_intensity_arg_tab[] = {
  {
    .name = "left",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Set the left LED intensity value (0 through 255)."
  },
  {
    .name = "right",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Set the right LED intensity value (0 through 255)."
  },
};
static struct arsdk_enum common_Animations_StartAnimation_anim_enum_tab[] = {
  {
    .name = "HEADLIGHTS_FLASH",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_HEADLIGHTS_FLASH,
    .comment = "Flash headlights."
  },
  {
    .name = "HEADLIGHTS_BLINK",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_HEADLIGHTS_BLINK,
    .comment = "Blink headlights."
  },
  {
    .name = "HEADLIGHTS_OSCILLATION",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_HEADLIGHTS_OSCILLATION,
    .comment = "Oscillating headlights."
  },
  {
    .name = "SPIN",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SPIN,
    .comment = "Spin animation."
  },
  {
    .name = "TAP",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_TAP,
    .comment = "Tap animation."
  },
  {
    .name = "SLOW_SHAKE",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SLOW_SHAKE,
    .comment = "Slow shake animation."
  },
  {
    .name = "METRONOME",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_METRONOME,
    .comment = "Metronome animation."
  },
  {
    .name = "ONDULATION",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_ONDULATION,
    .comment = "Standing dance animation."
  },
  {
    .name = "SPIN_JUMP",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SPIN_JUMP,
    .comment = "Spin jump animation."
  },
  {
    .name = "SPIN_TO_POSTURE",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SPIN_TO_POSTURE,
    .comment = "Spin that end in standing posture, or in jumper if it was standing animation."
  },
  {
    .name = "SPIRAL",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SPIRAL,
    .comment = "Spiral animation."
  },
  {
    .name = "SLALOM",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_SLALOM,
    .comment = "Slalom animation."
  },
  {
    .name = "BOOST",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_BOOST,
    .comment = "Boost animation."
  },
  {
    .name = "LOOPING",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_LOOPING,
    .comment = "Make a looping. (Only for WingX)"
  },
  {
    .name = "BARREL_ROLL_180_RIGHT",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_BARREL_ROLL_180_RIGHT,
    .comment = "Make a barrel roll of 180 degree turning on right. (Only for WingX)"
  },
  {
    .name = "BARREL_ROLL_180_LEFT",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_BARREL_ROLL_180_LEFT,
    .comment = "Make a barrel roll of 180 degree turning on left. (Only for WingX)"
  },
  {
    .name = "BACKSWAP",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STARTANIMATION_ANIM_BACKSWAP,
    .comment = "Put the drone upside down. (Only for WingX)"
  },
};
static struct arsdk_arg common_Animations_StartAnimation_arg_tab[] = {
  {
    .name = "anim",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_Animations_StartAnimation_anim_enum_tab,
    .nenums = ARRAY_SIZE(common_Animations_StartAnimation_anim_enum_tab),
    .comment = "Animation to start."
  },
};
static struct arsdk_enum common_Animations_StopAnimation_anim_enum_tab[] = {
  {
    .name = "HEADLIGHTS_FLASH",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_HEADLIGHTS_FLASH,
    .comment = "Flash headlights."
  },
  {
    .name = "HEADLIGHTS_BLINK",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_HEADLIGHTS_BLINK,
    .comment = "Blink headlights."
  },
  {
    .name = "HEADLIGHTS_OSCILLATION",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_HEADLIGHTS_OSCILLATION,
    .comment = "Oscillating headlights."
  },
  {
    .name = "SPIN",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SPIN,
    .comment = "Spin animation."
  },
  {
    .name = "TAP",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_TAP,
    .comment = "Tap animation."
  },
  {
    .name = "SLOW_SHAKE",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SLOW_SHAKE,
    .comment = "Slow shake animation."
  },
  {
    .name = "METRONOME",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_METRONOME,
    .comment = "Metronome animation."
  },
  {
    .name = "ONDULATION",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_ONDULATION,
    .comment = "Standing dance animation."
  },
  {
    .name = "SPIN_JUMP",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SPIN_JUMP,
    .comment = "Spin jump animation."
  },
  {
    .name = "SPIN_TO_POSTURE",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SPIN_TO_POSTURE,
    .comment = "Spin that end in standing posture, or in jumper if it was standing animation."
  },
  {
    .name = "SPIRAL",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SPIRAL,
    .comment = "Spiral animation."
  },
  {
    .name = "SLALOM",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_SLALOM,
    .comment = "Slalom animation."
  },
  {
    .name = "BOOST",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_BOOST,
    .comment = "Boost animation."
  },
  {
    .name = "LOOPING",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_LOOPING,
    .comment = "Make a looping. (Only for WingX)"
  },
  {
    .name = "BARREL_ROLL_180_RIGHT",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_BARREL_ROLL_180_RIGHT,
    .comment = "Make a barrel roll of 180 degree turning on right. (Only for WingX)"
  },
  {
    .name = "BARREL_ROLL_180_LEFT",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_BARREL_ROLL_180_LEFT,
    .comment = "Make a barrel roll of 180 degree turning on left. (Only for WingX)"
  },
  {
    .name = "BACKSWAP",
    .value = ARCOMMANDS_COMMON_ANIMATIONS_STOPANIMATION_ANIM_BACKSWAP,
    .comment = "Put the drone upside down. (Only for WingX)"
  },
};
static struct arsdk_arg common_Animations_StopAnimation_arg_tab[] = {
  {
    .name = "anim",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_Animations_StopAnimation_anim_enum_tab,
    .nenums = ARRAY_SIZE(common_Animations_StopAnimation_anim_enum_tab),
    .comment = "Animation to stop."
  },
};
static struct arsdk_enum common_Accessory_Config_accessory_enum_tab[] = {
  {
    .name = "NO_ACCESSORY",
    .value = ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_NO_ACCESSORY,
    .comment = "No accessory."
  },
  {
    .name = "STD_WHEELS",
    .value = ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_STD_WHEELS,
    .comment = "Standard wheels"
  },
  {
    .name = "TRUCK_WHEELS",
    .value = ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_TRUCK_WHEELS,
    .comment = "Truck wheels"
  },
  {
    .name = "HULL",
    .value = ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_HULL,
    .comment = "Hull"
  },
  {
    .name = "HYDROFOIL",
    .value = ARCOMMANDS_COMMON_ACCESSORY_CONFIG_ACCESSORY_HYDROFOIL,
    .comment = "Hydrofoil"
  },
};
static struct arsdk_arg common_Accessory_Config_arg_tab[] = {
  {
    .name = "accessory",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_Accessory_Config_accessory_enum_tab,
    .nenums = ARRAY_SIZE(common_Accessory_Config_accessory_enum_tab),
    .comment = "Accessory configuration to set."
  },
};
static struct arsdk_enum common_Charger_SetMaxChargeRate_rate_enum_tab[] = {
  {
    .name = "SLOW",
    .value = ARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE_SLOW,
    .comment = "Fully charge the battery at a slow rate. Typically limit max charge current to 512 mA."
  },
  {
    .name = "MODERATE",
    .value = ARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE_MODERATE,
    .comment = "Almost fully-charge the battery at moderate rate (> 512mA) but slower than the fastest rate."
  },
  {
    .name = "FAST",
    .value = ARCOMMANDS_COMMON_CHARGER_SETMAXCHARGERATE_RATE_FAST,
    .comment = "Almost fully-charge the battery at the highest possible rate supported by the charger."
  },
};
static struct arsdk_arg common_Charger_SetMaxChargeRate_arg_tab[] = {
  {
    .name = "rate",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_Charger_SetMaxChargeRate_rate_enum_tab,
    .nenums = ARRAY_SIZE(common_Charger_SetMaxChargeRate_rate_enum_tab),
    .comment = "The new maximum charge rate."
  },
};
static struct arsdk_enum common_NetworkEvent_Disconnection_cause_enum_tab[] = {
  {
    .name = "off_button",
    .value = ARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE_OFF_BUTTON,
    .comment = "The button off has been pressed"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_COMMON_NETWORKEVENT_DISCONNECTION_CAUSE_UNKNOWN,
    .comment = "Unknown generic cause"
  },
};
static struct arsdk_arg common_NetworkEvent_Disconnection_arg_tab[] = {
  {
    .name = "cause",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_NetworkEvent_Disconnection_cause_enum_tab,
    .nenums = ARRAY_SIZE(common_NetworkEvent_Disconnection_cause_enum_tab),
    .comment = "Cause of the disconnection of the product"
  },
};
static struct arsdk_arg common_SettingsState_ProductNameChanged_arg_tab[] = {
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product name"
  },
};
static struct arsdk_arg common_SettingsState_ProductVersionChanged_arg_tab[] = {
  {
    .name = "software",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product software version"
  },
  {
    .name = "hardware",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product hardware version"
  },
};
static struct arsdk_arg common_SettingsState_ProductSerialHighChanged_arg_tab[] = {
  {
    .name = "high",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial high number (hexadecimal value)"
  },
};
static struct arsdk_arg common_SettingsState_ProductSerialLowChanged_arg_tab[] = {
  {
    .name = "low",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial low number (hexadecimal value)"
  },
};
static struct arsdk_arg common_SettingsState_CountryChanged_arg_tab[] = {
  {
    .name = "code",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Country code with ISO 3166 format, empty string means unknown country."
  },
};
static struct arsdk_arg common_SettingsState_AutoCountryChanged_arg_tab[] = {
  {
    .name = "automatic",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Boolean : 0 : Manual / 1 : Auto"
  },
};
static struct arsdk_arg common_CommonState_BatteryStateChanged_arg_tab[] = {
  {
    .name = "percent",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Battery percentage"
  },
};
static struct arsdk_arg common_CommonState_MassStorageStateListChanged_arg_tab[] = {
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id (unique)"
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage name"
  },
};
static struct arsdk_arg common_CommonState_MassStorageInfoStateListChanged_arg_tab[] = {
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage state id (unique)"
  },
  {
    .name = "size",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage size in MBytes"
  },
  {
    .name = "used_size",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage used size in MBytes"
  },
  {
    .name = "plugged",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage plugged (1 if mass storage is plugged, otherwise 0)"
  },
  {
    .name = "full",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage full information state (1 if mass storage full, 0 otherwise)."
  },
  {
    .name = "internal",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage internal type state (1 if mass storage is internal, 0 otherwise)"
  },
};
static struct arsdk_arg common_CommonState_CurrentDateChanged_arg_tab[] = {
  {
    .name = "date",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Date with ISO-8601 format"
  },
};
static struct arsdk_arg common_CommonState_CurrentTimeChanged_arg_tab[] = {
  {
    .name = "time",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Time with ISO-8601 format"
  },
};
static struct arsdk_arg common_CommonState_MassStorageInfoRemainingListChanged_arg_tab[] = {
  {
    .name = "free_space",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage free space in MBytes"
  },
  {
    .name = "rec_time",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage record time reamining in minute"
  },
  {
    .name = "photo_remaining",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage photo remaining"
  },
};
static struct arsdk_arg common_CommonState_WifiSignalChanged_arg_tab[] = {
  {
    .name = "rssi",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "RSSI of the signal between controller and the product (in dbm)"
  },
};
static struct arsdk_enum common_CommonState_SensorsStatesListChanged_sensorName_enum_tab[] = {
  {
    .name = "IMU",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_IMU,
    .comment = "Inertial Measurement Unit sensor"
  },
  {
    .name = "barometer",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_BAROMETER,
    .comment = "Barometer sensor"
  },
  {
    .name = "ultrasound",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_ULTRASOUND,
    .comment = "Ultrasonic sensor"
  },
  {
    .name = "GPS",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_GPS,
    .comment = "GPS sensor"
  },
  {
    .name = "magnetometer",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_MAGNETOMETER,
    .comment = "Magnetometer sensor"
  },
  {
    .name = "vertical_camera",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_SENSORSSTATESLISTCHANGED_SENSORNAME_VERTICAL_CAMERA,
    .comment = "Vertical Camera sensor"
  },
};
static struct arsdk_arg common_CommonState_SensorsStatesListChanged_arg_tab[] = {
  {
    .name = "sensorName",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_CommonState_SensorsStatesListChanged_sensorName_enum_tab,
    .nenums = ARRAY_SIZE(common_CommonState_SensorsStatesListChanged_sensorName_enum_tab),
    .comment = "Sensor name"
  },
  {
    .name = "sensorState",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Sensor state (1 if the sensor is OK, 0 if the sensor is NOT OK)"
  },
};
static struct arsdk_enum common_CommonState_ProductModel_model_enum_tab[] = {
  {
    .name = "RS_TRAVIS",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_TRAVIS,
    .comment = "Travis (RS taxi) model."
  },
  {
    .name = "RS_MARS",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_MARS,
    .comment = "Mars (RS space) model"
  },
  {
    .name = "RS_SWAT",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_SWAT,
    .comment = "SWAT (RS SWAT) model"
  },
  {
    .name = "RS_MCLANE",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_MCLANE,
    .comment = "Mc Lane (RS police) model"
  },
  {
    .name = "RS_BLAZE",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_BLAZE,
    .comment = "Blaze (RS fire) model"
  },
  {
    .name = "RS_ORAK",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_ORAK,
    .comment = "Orak (RS carbon hydrofoil) model"
  },
  {
    .name = "RS_NEWZ",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_RS_NEWZ,
    .comment = "New Z (RS wooden hydrofoil) model"
  },
  {
    .name = "JS_MARSHALL",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_MARSHALL,
    .comment = "Marshall (JS fire) model"
  },
  {
    .name = "JS_DIESEL",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_DIESEL,
    .comment = "Diesel (JS SWAT) model"
  },
  {
    .name = "JS_BUZZ",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_BUZZ,
    .comment = "Buzz (JS space) model"
  },
  {
    .name = "JS_MAX",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_MAX,
    .comment = "Max (JS F1) model"
  },
  {
    .name = "JS_JETT",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_JETT,
    .comment = "Jett (JS flames) model"
  },
  {
    .name = "JS_TUKTUK",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_JS_TUKTUK,
    .comment = "Tuk-Tuk (JS taxi) model"
  },
  {
    .name = "SW_BLACK",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_SW_BLACK,
    .comment = "Swing black model"
  },
  {
    .name = "SW_WHITE",
    .value = ARCOMMANDS_COMMON_COMMONSTATE_PRODUCTMODEL_MODEL_SW_WHITE,
    .comment = "Swing white model"
  },
};
static struct arsdk_arg common_CommonState_ProductModel_arg_tab[] = {
  {
    .name = "model",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_CommonState_ProductModel_model_enum_tab,
    .nenums = ARRAY_SIZE(common_CommonState_ProductModel_model_enum_tab),
    .comment = "The Model of the product."
  },
};
static struct arsdk_arg common_CommonState_CountryListKnown_arg_tab[] = {
  {
    .name = "listFlags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored."
  },
  {
    .name = "countryCodes",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Following of country code with ISO 3166 format, separated by \";\". Be careful of the command size allowed by the network used. If necessary, split the list in several commands."
  },
};
static struct arsdk_arg common_CommonState_DeprecatedMassStorageContentChanged_arg_tab[] = {
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id (unique)"
  },
  {
    .name = "nbPhotos",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of photos (does not include raw photos)"
  },
  {
    .name = "nbVideos",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of videos"
  },
  {
    .name = "nbPuds",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of puds"
  },
  {
    .name = "nbCrashLogs",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of crash logs"
  },
};
static struct arsdk_arg common_CommonState_MassStorageContent_arg_tab[] = {
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id (unique)"
  },
  {
    .name = "nbPhotos",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of photos (does not include raw photos)"
  },
  {
    .name = "nbVideos",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of videos"
  },
  {
    .name = "nbPuds",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of puds"
  },
  {
    .name = "nbCrashLogs",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of crash logs"
  },
  {
    .name = "nbRawPhotos",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of raw photos"
  },
};
static struct arsdk_arg common_CommonState_MassStorageContentForCurrentRun_arg_tab[] = {
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id (unique)"
  },
  {
    .name = "nbPhotos",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of photos (does not include raw photos)"
  },
  {
    .name = "nbVideos",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of videos"
  },
  {
    .name = "nbRawPhotos",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Number of raw photos"
  },
};
static struct arsdk_arg common_CommonState_VideoRecordingTimestamp_arg_tab[] = {
  {
    .name = "startTimestamp",
    .type = ARSDK_ARG_TYPE_U64,
    .enums = NULL,
    .nenums = 0,
    .comment = "Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970."
  },
  {
    .name = "stopTimestamp",
    .type = ARSDK_ARG_TYPE_U64,
    .enums = NULL,
    .nenums = 0,
    .comment = "Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970. 0 mean that video is still recording."
  },
};
static struct arsdk_arg common_OverHeatState_OverHeatRegulationChanged_arg_tab[] = {
  {
    .name = "regulationType",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Type of overheat regulation : 0 for ventilation, 1 for switch off"
  },
};
static struct arsdk_arg common_WifiSettingsState_outdoorSettingsChanged_arg_tab[] = {
  {
    .name = "outdoor",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if it should use outdoor wifi settings, 0 otherwise"
  },
};
static struct arsdk_enum common_MavlinkState_MavlinkFilePlayingStateChanged_state_enum_tab[] = {
  {
    .name = "playing",
    .value = ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_PLAYING,
    .comment = "Mavlink file is playing"
  },
  {
    .name = "stopped",
    .value = ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_STOPPED,
    .comment = "Mavlink file is stopped (arg filepath and type are useless in this state)"
  },
  {
    .name = "paused",
    .value = ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_PAUSED,
    .comment = "Mavlink file is paused"
  },
  {
    .name = "loaded",
    .value = ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_STATE_LOADED,
    .comment = "Mavlink file is loaded (it will be played at take-off)"
  },
};
static struct arsdk_enum common_MavlinkState_MavlinkFilePlayingStateChanged_type_enum_tab[] = {
  {
    .name = "flightPlan",
    .value = ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE_FLIGHTPLAN,
    .comment = "Mavlink file for FlightPlan"
  },
  {
    .name = "mapMyHouse",
    .value = ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKFILEPLAYINGSTATECHANGED_TYPE_MAPMYHOUSE,
    .comment = "Mavlink file for MapMyHouse"
  },
};
static struct arsdk_arg common_MavlinkState_MavlinkFilePlayingStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_MavlinkState_MavlinkFilePlayingStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(common_MavlinkState_MavlinkFilePlayingStateChanged_state_enum_tab),
    .comment = "State of the mavlink"
  },
  {
    .name = "filepath",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "flight plan file path from the mavlink ftp root"
  },
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_MavlinkState_MavlinkFilePlayingStateChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(common_MavlinkState_MavlinkFilePlayingStateChanged_type_enum_tab),
    .comment = "type of the played mavlink file"
  },
};
static struct arsdk_enum common_MavlinkState_MavlinkPlayErrorStateChanged_error_enum_tab[] = {
  {
    .name = "none",
    .value = ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_NONE,
    .comment = "There is no error"
  },
  {
    .name = "notInOutDoorMode",
    .value = ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_NOTINOUTDOORMODE,
    .comment = "The drone is not in outdoor mode"
  },
  {
    .name = "gpsNotFixed",
    .value = ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_GPSNOTFIXED,
    .comment = "The gps is not fixed"
  },
  {
    .name = "notCalibrated",
    .value = ARCOMMANDS_COMMON_MAVLINKSTATE_MAVLINKPLAYERRORSTATECHANGED_ERROR_NOTCALIBRATED,
    .comment = "The magnetometer of the drone is not calibrated"
  },
};
static struct arsdk_arg common_MavlinkState_MavlinkPlayErrorStateChanged_arg_tab[] = {
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_MavlinkState_MavlinkPlayErrorStateChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(common_MavlinkState_MavlinkPlayErrorStateChanged_error_enum_tab),
    .comment = "State of play error"
  },
};
static struct arsdk_arg common_MavlinkState_MissionItemExecuted_arg_tab[] = {
  {
    .name = "idx",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Index of the mission item. This is the place of the mission item in the list of the items of the mission.\nBegins at 0."
  },
};
static struct arsdk_arg common_FlightPlanSettingsState_ReturnHomeOnDisconnectChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if enabled, 0 if disabled"
  },
  {
    .name = "isReadOnly",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if readOnly, 0 if writable"
  },
};
static struct arsdk_arg common_CalibrationState_MagnetoCalibrationStateChanged_arg_tab[] = {
  {
    .name = "xAxisCalibration",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the x axis (roll) calibration : 1 if calibration is done, 0 otherwise"
  },
  {
    .name = "yAxisCalibration",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the y axis (pitch) calibration : 1 if calibration is done, 0 otherwise"
  },
  {
    .name = "zAxisCalibration",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the z axis (yaw) calibration : 1 if calibration is done, 0 otherwise"
  },
  {
    .name = "calibrationFailed",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if calibration has failed, 0 otherwise. If this arg is 1, consider all previous arg as 0"
  },
};
static struct arsdk_arg common_CalibrationState_MagnetoCalibrationRequiredState_arg_tab[] = {
  {
    .name = "required",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if calibration is required, 0 if current calibration is still valid"
  },
};
static struct arsdk_enum common_CalibrationState_MagnetoCalibrationAxisToCalibrateChanged_axis_enum_tab[] = {
  {
    .name = "xAxis",
    .value = ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_XAXIS,
    .comment = "If the current calibration axis should be the x axis"
  },
  {
    .name = "yAxis",
    .value = ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_YAXIS,
    .comment = "If the current calibration axis should be the y axis"
  },
  {
    .name = "zAxis",
    .value = ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_ZAXIS,
    .comment = "If the current calibration axis should be the z axis"
  },
  {
    .name = "none",
    .value = ARCOMMANDS_COMMON_CALIBRATIONSTATE_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED_AXIS_NONE,
    .comment = "If none of the axis should be calibrated"
  },
};
static struct arsdk_arg common_CalibrationState_MagnetoCalibrationAxisToCalibrateChanged_arg_tab[] = {
  {
    .name = "axis",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_CalibrationState_MagnetoCalibrationAxisToCalibrateChanged_axis_enum_tab,
    .nenums = ARRAY_SIZE(common_CalibrationState_MagnetoCalibrationAxisToCalibrateChanged_axis_enum_tab),
    .comment = "The axis to calibrate"
  },
};
static struct arsdk_arg common_CalibrationState_MagnetoCalibrationStartedChanged_arg_tab[] = {
  {
    .name = "started",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if calibration has started, 0 otherwise"
  },
};
static struct arsdk_enum common_CalibrationState_PitotCalibrationStateChanged_state_enum_tab[] = {
  {
    .name = "done",
    .value = ARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE_DONE,
    .comment = "Calibration is ok"
  },
  {
    .name = "ready",
    .value = ARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE_READY,
    .comment = "Calibration is started, waiting user action"
  },
  {
    .name = "in_progress",
    .value = ARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE_IN_PROGRESS,
    .comment = "Calibration is in progress"
  },
  {
    .name = "required",
    .value = ARCOMMANDS_COMMON_CALIBRATIONSTATE_PITOTCALIBRATIONSTATECHANGED_STATE_REQUIRED,
    .comment = "Calibration is required"
  },
};
static struct arsdk_arg common_CalibrationState_PitotCalibrationStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_CalibrationState_PitotCalibrationStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(common_CalibrationState_PitotCalibrationStateChanged_state_enum_tab),
    .comment = "State of pitot calibration"
  },
  {
    .name = "lastError",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "lastError : 1 if an error occured and 0 if not"
  },
};
static struct arsdk_arg common_CameraSettingsState_CameraSettingsChanged_arg_tab[] = {
  {
    .name = "fov",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Value of the camera horizontal fov (in degree)"
  },
  {
    .name = "panMax",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Value of max pan (right pan) (in degree)"
  },
  {
    .name = "panMin",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Value of min pan (left pan) (in degree)"
  },
  {
    .name = "tiltMax",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Value of max tilt (top tilt) (in degree)"
  },
  {
    .name = "tiltMin",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Value of min tilt (bottom tilt) (in degree)"
  },
};
static struct arsdk_arg common_FlightPlanState_AvailabilityStateChanged_arg_tab[] = {
  {
    .name = "AvailabilityState",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Running a flightPlan file is available (1 running a flightPlan file is available, otherwise 0)"
  },
};
static struct arsdk_enum common_FlightPlanState_ComponentStateListChanged_component_enum_tab[] = {
  {
    .name = "GPS",
    .value = ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_GPS,
    .comment = "Drone GPS component.\nState is 0 when the drone needs a GPS fix."
  },
  {
    .name = "Calibration",
    .value = ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_CALIBRATION,
    .comment = "Drone Calibration component.\nState is 0 when the sensors of the drone needs to be calibrated."
  },
  {
    .name = "Mavlink_File",
    .value = ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_MAVLINK_FILE,
    .comment = "Mavlink file component.\nState is 0 when the mavlink file is missing or contains error."
  },
  {
    .name = "TakeOff",
    .value = ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_TAKEOFF,
    .comment = "Drone Take off component.\nState is 0 when the drone cannot take-off."
  },
  {
    .name = "WaypointsBeyondGeofence",
    .value = ARCOMMANDS_COMMON_FLIGHTPLANSTATE_COMPONENTSTATELISTCHANGED_COMPONENT_WAYPOINTSBEYONDGEOFENCE,
    .comment = "Component for waypoints beyond the geofence.\nState is 0 when one or more waypoints are beyond the geofence."
  },
};
static struct arsdk_arg common_FlightPlanState_ComponentStateListChanged_arg_tab[] = {
  {
    .name = "component",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_FlightPlanState_ComponentStateListChanged_component_enum_tab,
    .nenums = ARRAY_SIZE(common_FlightPlanState_ComponentStateListChanged_component_enum_tab),
    .comment = "Drone FlightPlan component id (unique)"
  },
  {
    .name = "State",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the FlightPlan component (1 FlightPlan component OK, otherwise 0)"
  },
};
static struct arsdk_arg common_FlightPlanState_LockStateChanged_arg_tab[] = {
  {
    .name = "LockState",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if FlightPlan is locked: can't pause or stop FlightPlan.\n0 if FlightPlan is unlocked: pause or stop available."
  },
};
static struct arsdk_arg common_ARLibsVersionsState_ControllerLibARCommandsVersion_arg_tab[] = {
  {
    .name = "version",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "version of libARCommands (\"1.2.3.4\" format)"
  },
};
static struct arsdk_arg common_ARLibsVersionsState_SkyControllerLibARCommandsVersion_arg_tab[] = {
  {
    .name = "version",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "version of libARCommands (\"1.2.3.4\" format)"
  },
};
static struct arsdk_arg common_ARLibsVersionsState_DeviceLibARCommandsVersion_arg_tab[] = {
  {
    .name = "version",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "version of libARCommands (\"1.2.3.4\" format)"
  },
};
static struct arsdk_arg common_AudioState_AudioStreamingRunning_arg_tab[] = {
  {
    .name = "running",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bit field for TX and RX running\nbit 0 is 1 if Drone TX is running\nbit 1 is 1 if Drone RX is running"
  },
};
static struct arsdk_arg common_HeadlightsState_intensityChanged_arg_tab[] = {
  {
    .name = "left",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The intensity value for the left LED (0 through 255)."
  },
  {
    .name = "right",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The intensity value for the right LED (0 through 255)."
  },
};
static struct arsdk_enum common_AnimationsState_List_anim_enum_tab[] = {
  {
    .name = "HEADLIGHTS_FLASH",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_HEADLIGHTS_FLASH,
    .comment = "Flash headlights."
  },
  {
    .name = "HEADLIGHTS_BLINK",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_HEADLIGHTS_BLINK,
    .comment = "Blink headlights."
  },
  {
    .name = "HEADLIGHTS_OSCILLATION",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_HEADLIGHTS_OSCILLATION,
    .comment = "Oscillating headlights."
  },
  {
    .name = "SPIN",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SPIN,
    .comment = "Spin animation."
  },
  {
    .name = "TAP",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_TAP,
    .comment = "Tap animation."
  },
  {
    .name = "SLOW_SHAKE",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SLOW_SHAKE,
    .comment = "Slow shake animation."
  },
  {
    .name = "METRONOME",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_METRONOME,
    .comment = "Metronome animation."
  },
  {
    .name = "ONDULATION",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_ONDULATION,
    .comment = "Standing dance animation."
  },
  {
    .name = "SPIN_JUMP",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SPIN_JUMP,
    .comment = "Spin jump animation."
  },
  {
    .name = "SPIN_TO_POSTURE",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SPIN_TO_POSTURE,
    .comment = "Spin that end in standing posture, or in jumper if it was standing animation."
  },
  {
    .name = "SPIRAL",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SPIRAL,
    .comment = "Spiral animation."
  },
  {
    .name = "SLALOM",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_SLALOM,
    .comment = "Slalom animation."
  },
  {
    .name = "BOOST",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_BOOST,
    .comment = "Boost animation."
  },
  {
    .name = "LOOPING",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_LOOPING,
    .comment = "Make a looping. (Only for WingX)"
  },
  {
    .name = "BARREL_ROLL_180_RIGHT",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_BARREL_ROLL_180_RIGHT,
    .comment = "Make a barrel roll of 180 degree turning on right. (Only for WingX)"
  },
  {
    .name = "BARREL_ROLL_180_LEFT",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_BARREL_ROLL_180_LEFT,
    .comment = "Make a barrel roll of 180 degree turning on left. (Only for WingX)"
  },
  {
    .name = "BACKSWAP",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ANIM_BACKSWAP,
    .comment = "Put the drone upside down. (Only for WingX)"
  },
};
static struct arsdk_enum common_AnimationsState_List_state_enum_tab[] = {
  {
    .name = "stopped",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE_STOPPED,
    .comment = "animation is stopped"
  },
  {
    .name = "started",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE_STARTED,
    .comment = "animation is started"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_STATE_NOTAVAILABLE,
    .comment = "The animation is not available"
  },
};
static struct arsdk_enum common_AnimationsState_List_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_COMMON_ANIMATIONSSTATE_LIST_ERROR_UNKNOWN,
    .comment = "Unknown generic error"
  },
};
static struct arsdk_arg common_AnimationsState_List_arg_tab[] = {
  {
    .name = "anim",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_AnimationsState_List_anim_enum_tab,
    .nenums = ARRAY_SIZE(common_AnimationsState_List_anim_enum_tab),
    .comment = "Animation type."
  },
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_AnimationsState_List_state_enum_tab,
    .nenums = ARRAY_SIZE(common_AnimationsState_List_state_enum_tab),
    .comment = "State of the animation"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_AnimationsState_List_error_enum_tab,
    .nenums = ARRAY_SIZE(common_AnimationsState_List_error_enum_tab),
    .comment = "Error to explain the state"
  },
};
static struct arsdk_enum common_AccessoryState_SupportedAccessoriesListChanged_accessory_enum_tab[] = {
  {
    .name = "NO_ACCESSORY",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_NO_ACCESSORY,
    .comment = "No accessory."
  },
  {
    .name = "STD_WHEELS",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_STD_WHEELS,
    .comment = "Standard wheels"
  },
  {
    .name = "TRUCK_WHEELS",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_TRUCK_WHEELS,
    .comment = "Truck wheels"
  },
  {
    .name = "HULL",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_HULL,
    .comment = "Hull"
  },
  {
    .name = "HYDROFOIL",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_SUPPORTEDACCESSORIESLISTCHANGED_ACCESSORY_HYDROFOIL,
    .comment = "Hydrofoil"
  },
};
static struct arsdk_arg common_AccessoryState_SupportedAccessoriesListChanged_arg_tab[] = {
  {
    .name = "accessory",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_AccessoryState_SupportedAccessoriesListChanged_accessory_enum_tab,
    .nenums = ARRAY_SIZE(common_AccessoryState_SupportedAccessoriesListChanged_accessory_enum_tab),
    .comment = "Accessory configurations supported by the product."
  },
};
static struct arsdk_enum common_AccessoryState_AccessoryConfigChanged_newAccessory_enum_tab[] = {
  {
    .name = "UNCONFIGURED",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_UNCONFIGURED,
    .comment = "No accessory configuration set. Controller needs to set one."
  },
  {
    .name = "NO_ACCESSORY",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_NO_ACCESSORY,
    .comment = "No accessory."
  },
  {
    .name = "STD_WHEELS",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_STD_WHEELS,
    .comment = "Standard wheels"
  },
  {
    .name = "TRUCK_WHEELS",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_TRUCK_WHEELS,
    .comment = "Truck wheels"
  },
  {
    .name = "HULL",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_HULL,
    .comment = "Hull"
  },
  {
    .name = "HYDROFOIL",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_HYDROFOIL,
    .comment = "Hydrofoil"
  },
  {
    .name = "IN_PROGRESS",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_NEWACCESSORY_IN_PROGRESS,
    .comment = "Configuration in progress."
  },
};
static struct arsdk_enum common_AccessoryState_AccessoryConfigChanged_error_enum_tab[] = {
  {
    .name = "OK",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR_OK,
    .comment = "No error. Accessory config change successful."
  },
  {
    .name = "UNKNOWN",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR_UNKNOWN,
    .comment = "Cannot change accessory configuration for some reason."
  },
  {
    .name = "FLYING",
    .value = ARCOMMANDS_COMMON_ACCESSORYSTATE_ACCESSORYCONFIGCHANGED_ERROR_FLYING,
    .comment = "Cannot change accessory configuration while flying."
  },
};
static struct arsdk_arg common_AccessoryState_AccessoryConfigChanged_arg_tab[] = {
  {
    .name = "newAccessory",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_AccessoryState_AccessoryConfigChanged_newAccessory_enum_tab,
    .nenums = ARRAY_SIZE(common_AccessoryState_AccessoryConfigChanged_newAccessory_enum_tab),
    .comment = "Accessory configuration reported by firmware."
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_AccessoryState_AccessoryConfigChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(common_AccessoryState_AccessoryConfigChanged_error_enum_tab),
    .comment = "Error code."
  },
};
static struct arsdk_arg common_AccessoryState_AccessoryConfigModificationEnabled_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if the modification of the accessory Config is enabled, 0 otherwise"
  },
};
static struct arsdk_enum common_ChargerState_MaxChargeRateChanged_rate_enum_tab[] = {
  {
    .name = "SLOW",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE_SLOW,
    .comment = "Fully charge the battery at a slow rate. Typically limit max charge current to 512 mA."
  },
  {
    .name = "MODERATE",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE_MODERATE,
    .comment = "Almost fully-charge the battery at moderate rate (> 512 mA) but slower than the fastest rate."
  },
  {
    .name = "FAST",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_MAXCHARGERATECHANGED_RATE_FAST,
    .comment = "Almost fully-charge the battery at the highest possible rate supported by the charger."
  },
};
static struct arsdk_arg common_ChargerState_MaxChargeRateChanged_arg_tab[] = {
  {
    .name = "rate",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_ChargerState_MaxChargeRateChanged_rate_enum_tab,
    .nenums = ARRAY_SIZE(common_ChargerState_MaxChargeRateChanged_rate_enum_tab),
    .comment = "The current maximum charge rate."
  },
};
static struct arsdk_enum common_ChargerState_CurrentChargeStateChanged_status_enum_tab[] = {
  {
    .name = "DISCHARGING",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_DISCHARGING,
    .comment = "The battery is discharging."
  },
  {
    .name = "CHARGING_SLOW",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_CHARGING_SLOW,
    .comment = "The battery is charging at a slow rate about 512 mA."
  },
  {
    .name = "CHARGING_MODERATE",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_CHARGING_MODERATE,
    .comment = "The battery is charging at a moderate rate (> 512 mA) but slower than the fastest rate."
  },
  {
    .name = "CHARGING_FAST",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_CHARGING_FAST,
    .comment = "The battery is charging at a the fastest rate."
  },
  {
    .name = "BATTERY_FULL",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_STATUS_BATTERY_FULL,
    .comment = "The charger is plugged and the battery is fully charged."
  },
};
static struct arsdk_enum common_ChargerState_CurrentChargeStateChanged_phase_enum_tab[] = {
  {
    .name = "UNKNOWN",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_UNKNOWN,
    .comment = "The charge phase is unknown or irrelevant."
  },
  {
    .name = "CONSTANT_CURRENT_1",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_CONSTANT_CURRENT_1,
    .comment = "First phase of the charging process. The battery is charging with constant current."
  },
  {
    .name = "CONSTANT_CURRENT_2",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_CONSTANT_CURRENT_2,
    .comment = "Second phase of the charging process. The battery is charging with constant current, with a higher voltage than the first phase."
  },
  {
    .name = "CONSTANT_VOLTAGE",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_CONSTANT_VOLTAGE,
    .comment = "Last part of the charging process. The battery is charging with a constant voltage."
  },
  {
    .name = "CHARGED",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CURRENTCHARGESTATECHANGED_PHASE_CHARGED,
    .comment = "The battery is fully charged."
  },
};
static struct arsdk_arg common_ChargerState_CurrentChargeStateChanged_arg_tab[] = {
  {
    .name = "status",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_ChargerState_CurrentChargeStateChanged_status_enum_tab,
    .nenums = ARRAY_SIZE(common_ChargerState_CurrentChargeStateChanged_status_enum_tab),
    .comment = "Charger status."
  },
  {
    .name = "phase",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_ChargerState_CurrentChargeStateChanged_phase_enum_tab,
    .nenums = ARRAY_SIZE(common_ChargerState_CurrentChargeStateChanged_phase_enum_tab),
    .comment = "The current charging phase."
  },
};
static struct arsdk_enum common_ChargerState_LastChargeRateChanged_rate_enum_tab[] = {
  {
    .name = "UNKNOWN",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE_UNKNOWN,
    .comment = "The last charge rate is not known."
  },
  {
    .name = "SLOW",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE_SLOW,
    .comment = "Slow charge rate."
  },
  {
    .name = "MODERATE",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE_MODERATE,
    .comment = "Moderate charge rate."
  },
  {
    .name = "FAST",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_LASTCHARGERATECHANGED_RATE_FAST,
    .comment = "Fast charge rate."
  },
};
static struct arsdk_arg common_ChargerState_LastChargeRateChanged_arg_tab[] = {
  {
    .name = "rate",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_ChargerState_LastChargeRateChanged_rate_enum_tab,
    .nenums = ARRAY_SIZE(common_ChargerState_LastChargeRateChanged_rate_enum_tab),
    .comment = "The charge rate recorded by the firmware for the last charge."
  },
};
static struct arsdk_enum common_ChargerState_ChargingInfo_phase_enum_tab[] = {
  {
    .name = "UNKNOWN",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_UNKNOWN,
    .comment = "The charge phase is unknown or irrelevant."
  },
  {
    .name = "CONSTANT_CURRENT_1",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_CONSTANT_CURRENT_1,
    .comment = "First phase of the charging process. The battery is charging with constant current."
  },
  {
    .name = "CONSTANT_CURRENT_2",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_CONSTANT_CURRENT_2,
    .comment = "Second phase of the charging process. The battery is charging with constant current, with a higher voltage than the first phase."
  },
  {
    .name = "CONSTANT_VOLTAGE",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_CONSTANT_VOLTAGE,
    .comment = "Last part of the charging process. The battery is charging with a constant voltage."
  },
  {
    .name = "CHARGED",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_CHARGED,
    .comment = "The battery is fully charged."
  },
  {
    .name = "DISCHARGING",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_PHASE_DISCHARGING,
    .comment = "The battery is discharging; Other arguments refers to the last charge."
  },
};
static struct arsdk_enum common_ChargerState_ChargingInfo_rate_enum_tab[] = {
  {
    .name = "UNKNOWN",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE_UNKNOWN,
    .comment = "The charge rate is not known."
  },
  {
    .name = "SLOW",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE_SLOW,
    .comment = "Slow charge rate."
  },
  {
    .name = "MODERATE",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE_MODERATE,
    .comment = "Moderate charge rate."
  },
  {
    .name = "FAST",
    .value = ARCOMMANDS_COMMON_CHARGERSTATE_CHARGINGINFO_RATE_FAST,
    .comment = "Fast charge rate."
  },
};
static struct arsdk_arg common_ChargerState_ChargingInfo_arg_tab[] = {
  {
    .name = "phase",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_ChargerState_ChargingInfo_phase_enum_tab,
    .nenums = ARRAY_SIZE(common_ChargerState_ChargingInfo_phase_enum_tab),
    .comment = "The current charging phase."
  },
  {
    .name = "rate",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = common_ChargerState_ChargingInfo_rate_enum_tab,
    .nenums = ARRAY_SIZE(common_ChargerState_ChargingInfo_rate_enum_tab),
    .comment = "The charge rate. If phase is DISCHARGING, refers to the last charge."
  },
  {
    .name = "intensity",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The charging intensity, in dA. (12dA = 1,2A) ; If phase is DISCHARGING, refers to the last charge. Equals to 0 if not known."
  },
  {
    .name = "fullChargingTime",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The full charging time estimated, in minute. If phase is DISCHARGING, refers to the last charge. Equals to 0 if not known."
  },
};
static struct arsdk_arg common_RunState_RunIdChanged_arg_tab[] = {
  {
    .name = "runId",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Id of the run"
  },
};
static struct arsdk_cmd common_Network_cmd_tab[] = {
  {
    .name = "Disconnect",
    .id = ARCOMMANDS_ID_COMMON_NETWORK_CMD_DISCONNECT,
    .args = NULL,
    .nargs = 0,
    .comment = "Signals the remote that the host will disconnect"
  },
};
static struct arsdk_cmd common_NetworkEvent_cmd_tab[] = {
  {
    .name = "Disconnection",
    .id = ARCOMMANDS_ID_COMMON_NETWORKEVENT_CMD_DISCONNECTION,
    .args = common_NetworkEvent_Disconnection_arg_tab,
    .nargs = ARRAY_SIZE(common_NetworkEvent_Disconnection_arg_tab),
    .comment = "Drone will disconnect"
  },
};
static struct arsdk_cmd common_Settings_cmd_tab[] = {
  {
    .name = "AllSettings",
    .id = ARCOMMANDS_ID_COMMON_SETTINGS_CMD_ALLSETTINGS,
    .args = NULL,
    .nargs = 0,
    .comment = "Ask for all settings"
  },
  {
    .name = "Reset",
    .id = ARCOMMANDS_ID_COMMON_SETTINGS_CMD_RESET,
    .args = NULL,
    .nargs = 0,
    .comment = "Reset all settings"
  },
  {
    .name = "ProductName",
    .id = ARCOMMANDS_ID_COMMON_SETTINGS_CMD_PRODUCTNAME,
    .args = common_Settings_ProductName_arg_tab,
    .nargs = ARRAY_SIZE(common_Settings_ProductName_arg_tab),
    .comment = "Set product name"
  },
  {
    .name = "Country",
    .id = ARCOMMANDS_ID_COMMON_SETTINGS_CMD_COUNTRY,
    .args = common_Settings_Country_arg_tab,
    .nargs = ARRAY_SIZE(common_Settings_Country_arg_tab),
    .comment = "Set the country"
  },
  {
    .name = "AutoCountry",
    .id = ARCOMMANDS_ID_COMMON_SETTINGS_CMD_AUTOCOUNTRY,
    .args = common_Settings_AutoCountry_arg_tab,
    .nargs = ARRAY_SIZE(common_Settings_AutoCountry_arg_tab),
    .comment = "Enable auto-country"
  },
};
static struct arsdk_cmd common_SettingsState_cmd_tab[] = {
  {
    .name = "AllSettingsChanged",
    .id = ARCOMMANDS_ID_COMMON_SETTINGSSTATE_CMD_ALLSETTINGSCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "All settings have been sent"
  },
  {
    .name = "ResetChanged",
    .id = ARCOMMANDS_ID_COMMON_SETTINGSSTATE_CMD_RESETCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "All settings have been reset"
  },
  {
    .name = "ProductNameChanged",
    .id = ARCOMMANDS_ID_COMMON_SETTINGSSTATE_CMD_PRODUCTNAMECHANGED,
    .args = common_SettingsState_ProductNameChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_SettingsState_ProductNameChanged_arg_tab),
    .comment = "Product name changed"
  },
  {
    .name = "ProductVersionChanged",
    .id = ARCOMMANDS_ID_COMMON_SETTINGSSTATE_CMD_PRODUCTVERSIONCHANGED,
    .args = common_SettingsState_ProductVersionChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_SettingsState_ProductVersionChanged_arg_tab),
    .comment = "Product version"
  },
  {
    .name = "ProductSerialHighChanged",
    .id = ARCOMMANDS_ID_COMMON_SETTINGSSTATE_CMD_PRODUCTSERIALHIGHCHANGED,
    .args = common_SettingsState_ProductSerialHighChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_SettingsState_ProductSerialHighChanged_arg_tab),
    .comment = "Product serial (1st part)"
  },
  {
    .name = "ProductSerialLowChanged",
    .id = ARCOMMANDS_ID_COMMON_SETTINGSSTATE_CMD_PRODUCTSERIALLOWCHANGED,
    .args = common_SettingsState_ProductSerialLowChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_SettingsState_ProductSerialLowChanged_arg_tab),
    .comment = "Product serial (2nd part)"
  },
  {
    .name = "CountryChanged",
    .id = ARCOMMANDS_ID_COMMON_SETTINGSSTATE_CMD_COUNTRYCHANGED,
    .args = common_SettingsState_CountryChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_SettingsState_CountryChanged_arg_tab),
    .comment = "Country changed"
  },
  {
    .name = "AutoCountryChanged",
    .id = ARCOMMANDS_ID_COMMON_SETTINGSSTATE_CMD_AUTOCOUNTRYCHANGED,
    .args = common_SettingsState_AutoCountryChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_SettingsState_AutoCountryChanged_arg_tab),
    .comment = "Auto-country changed"
  },
};
static struct arsdk_cmd common_Common_cmd_tab[] = {
  {
    .name = "AllStates",
    .id = ARCOMMANDS_ID_COMMON_COMMON_CMD_ALLSTATES,
    .args = NULL,
    .nargs = 0,
    .comment = "Ask for all states"
  },
  {
    .name = "CurrentDate",
    .id = ARCOMMANDS_ID_COMMON_COMMON_CMD_CURRENTDATE,
    .args = common_Common_CurrentDate_arg_tab,
    .nargs = ARRAY_SIZE(common_Common_CurrentDate_arg_tab),
    .comment = "Set the date"
  },
  {
    .name = "CurrentTime",
    .id = ARCOMMANDS_ID_COMMON_COMMON_CMD_CURRENTTIME,
    .args = common_Common_CurrentTime_arg_tab,
    .nargs = ARRAY_SIZE(common_Common_CurrentTime_arg_tab),
    .comment = "Set the time"
  },
  {
    .name = "Reboot",
    .id = ARCOMMANDS_ID_COMMON_COMMON_CMD_REBOOT,
    .args = NULL,
    .nargs = 0,
    .comment = "Reboot"
  },
};
static struct arsdk_cmd common_CommonState_cmd_tab[] = {
  {
    .name = "AllStatesChanged",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_ALLSTATESCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "All states have been sent"
  },
  {
    .name = "BatteryStateChanged",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_BATTERYSTATECHANGED,
    .args = common_CommonState_BatteryStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_BatteryStateChanged_arg_tab),
    .comment = "Battery state"
  },
  {
    .name = "MassStorageStateListChanged",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_MASSSTORAGESTATELISTCHANGED,
    .args = common_CommonState_MassStorageStateListChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_MassStorageStateListChanged_arg_tab),
    .comment = "Mass storage state list"
  },
  {
    .name = "MassStorageInfoStateListChanged",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_MASSSTORAGEINFOSTATELISTCHANGED,
    .args = common_CommonState_MassStorageInfoStateListChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_MassStorageInfoStateListChanged_arg_tab),
    .comment = "Mass storage info state list"
  },
  {
    .name = "CurrentDateChanged",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_CURRENTDATECHANGED,
    .args = common_CommonState_CurrentDateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_CurrentDateChanged_arg_tab),
    .comment = "Date changed"
  },
  {
    .name = "CurrentTimeChanged",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_CURRENTTIMECHANGED,
    .args = common_CommonState_CurrentTimeChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_CurrentTimeChanged_arg_tab),
    .comment = "Time changed"
  },
  {
    .name = "MassStorageInfoRemainingListChanged",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_MASSSTORAGEINFOREMAININGLISTCHANGED,
    .args = common_CommonState_MassStorageInfoRemainingListChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_MassStorageInfoRemainingListChanged_arg_tab),
    .comment = "Mass storage remaining data list"
  },
  {
    .name = "WifiSignalChanged",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_WIFISIGNALCHANGED,
    .args = common_CommonState_WifiSignalChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_WifiSignalChanged_arg_tab),
    .comment = "Rssi changed"
  },
  {
    .name = "SensorsStatesListChanged",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_SENSORSSTATESLISTCHANGED,
    .args = common_CommonState_SensorsStatesListChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_SensorsStatesListChanged_arg_tab),
    .comment = "Sensors state list"
  },
  {
    .name = "ProductModel",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_PRODUCTMODEL,
    .args = common_CommonState_ProductModel_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_ProductModel_arg_tab),
    .comment = "Product sub-model"
  },
  {
    .name = "CountryListKnown",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_COUNTRYLISTKNOWN,
    .args = common_CommonState_CountryListKnown_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_CountryListKnown_arg_tab),
    .comment = "Country list"
  },
  {
    .name = "DeprecatedMassStorageContentChanged",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_DEPRECATEDMASSSTORAGECONTENTCHANGED,
    .args = common_CommonState_DeprecatedMassStorageContentChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_DeprecatedMassStorageContentChanged_arg_tab),
    .comment = "Mass storage content changed"
  },
  {
    .name = "MassStorageContent",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_MASSSTORAGECONTENT,
    .args = common_CommonState_MassStorageContent_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_MassStorageContent_arg_tab),
    .comment = "Mass storage content"
  },
  {
    .name = "MassStorageContentForCurrentRun",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_MASSSTORAGECONTENTFORCURRENTRUN,
    .args = common_CommonState_MassStorageContentForCurrentRun_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_MassStorageContentForCurrentRun_arg_tab),
    .comment = "Mass storage content for current run"
  },
  {
    .name = "VideoRecordingTimestamp",
    .id = ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_VIDEORECORDINGTIMESTAMP,
    .args = common_CommonState_VideoRecordingTimestamp_arg_tab,
    .nargs = ARRAY_SIZE(common_CommonState_VideoRecordingTimestamp_arg_tab),
    .comment = "Video recording timestamp"
  },
};
static struct arsdk_cmd common_OverHeat_cmd_tab[] = {
  {
    .name = "SwitchOff",
    .id = ARCOMMANDS_ID_COMMON_OVERHEAT_CMD_SWITCHOFF,
    .args = NULL,
    .nargs = 0,
    .comment = "Switch off after an overheat"
  },
  {
    .name = "Ventilate",
    .id = ARCOMMANDS_ID_COMMON_OVERHEAT_CMD_VENTILATE,
    .args = NULL,
    .nargs = 0,
    .comment = "Ventilate after an overheat"
  },
};
static struct arsdk_cmd common_OverHeatState_cmd_tab[] = {
  {
    .name = "OverHeatChanged",
    .id = ARCOMMANDS_ID_COMMON_OVERHEATSTATE_CMD_OVERHEATCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "Overheat"
  },
  {
    .name = "OverHeatRegulationChanged",
    .id = ARCOMMANDS_ID_COMMON_OVERHEATSTATE_CMD_OVERHEATREGULATIONCHANGED,
    .args = common_OverHeatState_OverHeatRegulationChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_OverHeatState_OverHeatRegulationChanged_arg_tab),
    .comment = "Overheat regulation type"
  },
};
static struct arsdk_cmd common_Controller_cmd_tab[] = {
  {
    .name = "isPiloting",
    .id = ARCOMMANDS_ID_COMMON_CONTROLLER_CMD_ISPILOTING,
    .args = common_Controller_isPiloting_arg_tab,
    .nargs = ARRAY_SIZE(common_Controller_isPiloting_arg_tab),
    .comment = "Inform about hud entering"
  },
};
static struct arsdk_cmd common_WifiSettings_cmd_tab[] = {
  {
    .name = "OutdoorSetting",
    .id = ARCOMMANDS_ID_COMMON_WIFISETTINGS_CMD_OUTDOORSETTING,
    .args = common_WifiSettings_OutdoorSetting_arg_tab,
    .nargs = ARRAY_SIZE(common_WifiSettings_OutdoorSetting_arg_tab),
    .comment = "Set wifi outdoor mode"
  },
};
static struct arsdk_cmd common_WifiSettingsState_cmd_tab[] = {
  {
    .name = "outdoorSettingsChanged",
    .id = ARCOMMANDS_ID_COMMON_WIFISETTINGSSTATE_CMD_OUTDOORSETTINGSCHANGED,
    .args = common_WifiSettingsState_outdoorSettingsChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_WifiSettingsState_outdoorSettingsChanged_arg_tab),
    .comment = "Wifi outdoor mode"
  },
};
static struct arsdk_cmd common_Mavlink_cmd_tab[] = {
  {
    .name = "Start",
    .id = ARCOMMANDS_ID_COMMON_MAVLINK_CMD_START,
    .args = common_Mavlink_Start_arg_tab,
    .nargs = ARRAY_SIZE(common_Mavlink_Start_arg_tab),
    .comment = "Start a FlightPlan"
  },
  {
    .name = "Pause",
    .id = ARCOMMANDS_ID_COMMON_MAVLINK_CMD_PAUSE,
    .args = NULL,
    .nargs = 0,
    .comment = "Pause a FlightPlan"
  },
  {
    .name = "Stop",
    .id = ARCOMMANDS_ID_COMMON_MAVLINK_CMD_STOP,
    .args = NULL,
    .nargs = 0,
    .comment = "Stop a FlightPlan"
  },
};
static struct arsdk_cmd common_MavlinkState_cmd_tab[] = {
  {
    .name = "MavlinkFilePlayingStateChanged",
    .id = ARCOMMANDS_ID_COMMON_MAVLINKSTATE_CMD_MAVLINKFILEPLAYINGSTATECHANGED,
    .args = common_MavlinkState_MavlinkFilePlayingStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_MavlinkState_MavlinkFilePlayingStateChanged_arg_tab),
    .comment = "Playing state of a FlightPlan"
  },
  {
    .name = "MavlinkPlayErrorStateChanged",
    .id = ARCOMMANDS_ID_COMMON_MAVLINKSTATE_CMD_MAVLINKPLAYERRORSTATECHANGED,
    .args = common_MavlinkState_MavlinkPlayErrorStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_MavlinkState_MavlinkPlayErrorStateChanged_arg_tab),
    .comment = "FlightPlan error"
  },
  {
    .name = "MissionItemExecuted",
    .id = ARCOMMANDS_ID_COMMON_MAVLINKSTATE_CMD_MISSIONITEMEXECUTED,
    .args = common_MavlinkState_MissionItemExecuted_arg_tab,
    .nargs = ARRAY_SIZE(common_MavlinkState_MissionItemExecuted_arg_tab),
    .comment = "Mission item executed"
  },
};
static struct arsdk_cmd common_FlightPlanSettings_cmd_tab[] = {
  {
    .name = "ReturnHomeOnDisconnect",
    .id = ARCOMMANDS_ID_COMMON_FLIGHTPLANSETTINGS_CMD_RETURNHOMEONDISCONNECT,
    .args = common_FlightPlanSettings_ReturnHomeOnDisconnect_arg_tab,
    .nargs = ARRAY_SIZE(common_FlightPlanSettings_ReturnHomeOnDisconnect_arg_tab),
    .comment = "Set ReturnHome behavior during FlightPlan"
  },
};
static struct arsdk_cmd common_FlightPlanSettingsState_cmd_tab[] = {
  {
    .name = "ReturnHomeOnDisconnectChanged",
    .id = ARCOMMANDS_ID_COMMON_FLIGHTPLANSETTINGSSTATE_CMD_RETURNHOMEONDISCONNECTCHANGED,
    .args = common_FlightPlanSettingsState_ReturnHomeOnDisconnectChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_FlightPlanSettingsState_ReturnHomeOnDisconnectChanged_arg_tab),
    .comment = "ReturnHome behavior during FlightPlan"
  },
};
static struct arsdk_cmd common_Calibration_cmd_tab[] = {
  {
    .name = "MagnetoCalibration",
    .id = ARCOMMANDS_ID_COMMON_CALIBRATION_CMD_MAGNETOCALIBRATION,
    .args = common_Calibration_MagnetoCalibration_arg_tab,
    .nargs = ARRAY_SIZE(common_Calibration_MagnetoCalibration_arg_tab),
    .comment = "Start/Abort magnetometer calibration"
  },
  {
    .name = "PitotCalibration",
    .id = ARCOMMANDS_ID_COMMON_CALIBRATION_CMD_PITOTCALIBRATION,
    .args = common_Calibration_PitotCalibration_arg_tab,
    .nargs = ARRAY_SIZE(common_Calibration_PitotCalibration_arg_tab),
    .comment = "Start/Abort Pitot calibration"
  },
};
static struct arsdk_cmd common_CalibrationState_cmd_tab[] = {
  {
    .name = "MagnetoCalibrationStateChanged",
    .id = ARCOMMANDS_ID_COMMON_CALIBRATIONSTATE_CMD_MAGNETOCALIBRATIONSTATECHANGED,
    .args = common_CalibrationState_MagnetoCalibrationStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CalibrationState_MagnetoCalibrationStateChanged_arg_tab),
    .comment = "Magneto calib process axis state"
  },
  {
    .name = "MagnetoCalibrationRequiredState",
    .id = ARCOMMANDS_ID_COMMON_CALIBRATIONSTATE_CMD_MAGNETOCALIBRATIONREQUIREDSTATE,
    .args = common_CalibrationState_MagnetoCalibrationRequiredState_arg_tab,
    .nargs = ARRAY_SIZE(common_CalibrationState_MagnetoCalibrationRequiredState_arg_tab),
    .comment = "Calibration required"
  },
  {
    .name = "MagnetoCalibrationAxisToCalibrateChanged",
    .id = ARCOMMANDS_ID_COMMON_CALIBRATIONSTATE_CMD_MAGNETOCALIBRATIONAXISTOCALIBRATECHANGED,
    .args = common_CalibrationState_MagnetoCalibrationAxisToCalibrateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CalibrationState_MagnetoCalibrationAxisToCalibrateChanged_arg_tab),
    .comment = "Axis to calibrate during calibration process"
  },
  {
    .name = "MagnetoCalibrationStartedChanged",
    .id = ARCOMMANDS_ID_COMMON_CALIBRATIONSTATE_CMD_MAGNETOCALIBRATIONSTARTEDCHANGED,
    .args = common_CalibrationState_MagnetoCalibrationStartedChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CalibrationState_MagnetoCalibrationStartedChanged_arg_tab),
    .comment = "Calibration process state"
  },
  {
    .name = "PitotCalibrationStateChanged",
    .id = ARCOMMANDS_ID_COMMON_CALIBRATIONSTATE_CMD_PITOTCALIBRATIONSTATECHANGED,
    .args = common_CalibrationState_PitotCalibrationStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CalibrationState_PitotCalibrationStateChanged_arg_tab),
    .comment = "Sent when the state of the pitot calibration has changed"
  },
};
static struct arsdk_cmd common_CameraSettingsState_cmd_tab[] = {
  {
    .name = "CameraSettingsChanged",
    .id = ARCOMMANDS_ID_COMMON_CAMERASETTINGSSTATE_CMD_CAMERASETTINGSCHANGED,
    .args = common_CameraSettingsState_CameraSettingsChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_CameraSettingsState_CameraSettingsChanged_arg_tab),
    .comment = "Camera info"
  },
};
static struct arsdk_cmd common_GPS_cmd_tab[] = {
  {
    .name = "ControllerPositionForRun",
    .id = ARCOMMANDS_ID_COMMON_GPS_CMD_CONTROLLERPOSITIONFORRUN,
    .args = common_GPS_ControllerPositionForRun_arg_tab,
    .nargs = ARRAY_SIZE(common_GPS_ControllerPositionForRun_arg_tab),
    .comment = "Set the position of a run"
  },
};
static struct arsdk_cmd common_FlightPlanState_cmd_tab[] = {
  {
    .name = "AvailabilityStateChanged",
    .id = ARCOMMANDS_ID_COMMON_FLIGHTPLANSTATE_CMD_AVAILABILITYSTATECHANGED,
    .args = common_FlightPlanState_AvailabilityStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_FlightPlanState_AvailabilityStateChanged_arg_tab),
    .comment = "FlightPlan availability"
  },
  {
    .name = "ComponentStateListChanged",
    .id = ARCOMMANDS_ID_COMMON_FLIGHTPLANSTATE_CMD_COMPONENTSTATELISTCHANGED,
    .args = common_FlightPlanState_ComponentStateListChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_FlightPlanState_ComponentStateListChanged_arg_tab),
    .comment = "FlightPlan components state list"
  },
  {
    .name = "LockStateChanged",
    .id = ARCOMMANDS_ID_COMMON_FLIGHTPLANSTATE_CMD_LOCKSTATECHANGED,
    .args = common_FlightPlanState_LockStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_FlightPlanState_LockStateChanged_arg_tab),
    .comment = "FlightPlan lock state"
  },
};
static struct arsdk_cmd common_FlightPlanEvent_cmd_tab[] = {
  {
    .name = "StartingErrorEvent",
    .id = ARCOMMANDS_ID_COMMON_FLIGHTPLANEVENT_CMD_STARTINGERROREVENT,
    .args = NULL,
    .nargs = 0,
    .comment = "FlightPlan start error"
  },
  {
    .name = "SpeedBridleEvent",
    .id = ARCOMMANDS_ID_COMMON_FLIGHTPLANEVENT_CMD_SPEEDBRIDLEEVENT,
    .args = NULL,
    .nargs = 0,
    .comment = "FlightPlan speed clamping"
  },
};
static struct arsdk_cmd common_ARLibsVersionsState_cmd_tab[] = {
  {
    .name = "ControllerLibARCommandsVersion",
    .id = ARCOMMANDS_ID_COMMON_ARLIBSVERSIONSSTATE_CMD_CONTROLLERLIBARCOMMANDSVERSION,
    .args = common_ARLibsVersionsState_ControllerLibARCommandsVersion_arg_tab,
    .nargs = ARRAY_SIZE(common_ARLibsVersionsState_ControllerLibARCommandsVersion_arg_tab),
    .comment = "Controller libARCommands version"
  },
  {
    .name = "SkyControllerLibARCommandsVersion",
    .id = ARCOMMANDS_ID_COMMON_ARLIBSVERSIONSSTATE_CMD_SKYCONTROLLERLIBARCOMMANDSVERSION,
    .args = common_ARLibsVersionsState_SkyControllerLibARCommandsVersion_arg_tab,
    .nargs = ARRAY_SIZE(common_ARLibsVersionsState_SkyControllerLibARCommandsVersion_arg_tab),
    .comment = "SkyController libARCommands version"
  },
  {
    .name = "DeviceLibARCommandsVersion",
    .id = ARCOMMANDS_ID_COMMON_ARLIBSVERSIONSSTATE_CMD_DEVICELIBARCOMMANDSVERSION,
    .args = common_ARLibsVersionsState_DeviceLibARCommandsVersion_arg_tab,
    .nargs = ARRAY_SIZE(common_ARLibsVersionsState_DeviceLibARCommandsVersion_arg_tab),
    .comment = "Device libARCommands version"
  },
};
static struct arsdk_cmd common_Audio_cmd_tab[] = {
  {
    .name = "ControllerReadyForStreaming",
    .id = ARCOMMANDS_ID_COMMON_AUDIO_CMD_CONTROLLERREADYFORSTREAMING,
    .args = common_Audio_ControllerReadyForStreaming_arg_tab,
    .nargs = ARRAY_SIZE(common_Audio_ControllerReadyForStreaming_arg_tab),
    .comment = "Set audio stream direction"
  },
};
static struct arsdk_cmd common_AudioState_cmd_tab[] = {
  {
    .name = "AudioStreamingRunning",
    .id = ARCOMMANDS_ID_COMMON_AUDIOSTATE_CMD_AUDIOSTREAMINGRUNNING,
    .args = common_AudioState_AudioStreamingRunning_arg_tab,
    .nargs = ARRAY_SIZE(common_AudioState_AudioStreamingRunning_arg_tab),
    .comment = "Audio stream direction"
  },
};
static struct arsdk_cmd common_Headlights_cmd_tab[] = {
  {
    .name = "intensity",
    .id = ARCOMMANDS_ID_COMMON_HEADLIGHTS_CMD_INTENSITY,
    .args = common_Headlights_intensity_arg_tab,
    .nargs = ARRAY_SIZE(common_Headlights_intensity_arg_tab),
    .comment = "Set LEDs intensity"
  },
};
static struct arsdk_cmd common_HeadlightsState_cmd_tab[] = {
  {
    .name = "intensityChanged",
    .id = ARCOMMANDS_ID_COMMON_HEADLIGHTSSTATE_CMD_INTENSITYCHANGED,
    .args = common_HeadlightsState_intensityChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_HeadlightsState_intensityChanged_arg_tab),
    .comment = "LEDs intensity"
  },
};
static struct arsdk_cmd common_Animations_cmd_tab[] = {
  {
    .name = "StartAnimation",
    .id = ARCOMMANDS_ID_COMMON_ANIMATIONS_CMD_STARTANIMATION,
    .args = common_Animations_StartAnimation_arg_tab,
    .nargs = ARRAY_SIZE(common_Animations_StartAnimation_arg_tab),
    .comment = "Start an animation"
  },
  {
    .name = "StopAnimation",
    .id = ARCOMMANDS_ID_COMMON_ANIMATIONS_CMD_STOPANIMATION,
    .args = common_Animations_StopAnimation_arg_tab,
    .nargs = ARRAY_SIZE(common_Animations_StopAnimation_arg_tab),
    .comment = "Stop an animation"
  },
  {
    .name = "StopAllAnimations",
    .id = ARCOMMANDS_ID_COMMON_ANIMATIONS_CMD_STOPALLANIMATIONS,
    .args = NULL,
    .nargs = 0,
    .comment = "Stop all animations"
  },
};
static struct arsdk_cmd common_AnimationsState_cmd_tab[] = {
  {
    .name = "List",
    .id = ARCOMMANDS_ID_COMMON_ANIMATIONSSTATE_CMD_LIST,
    .args = common_AnimationsState_List_arg_tab,
    .nargs = ARRAY_SIZE(common_AnimationsState_List_arg_tab),
    .comment = "Animation state list"
  },
};
static struct arsdk_cmd common_Accessory_cmd_tab[] = {
  {
    .name = "Config",
    .id = ARCOMMANDS_ID_COMMON_ACCESSORY_CMD_CONFIG,
    .args = common_Accessory_Config_arg_tab,
    .nargs = ARRAY_SIZE(common_Accessory_Config_arg_tab),
    .comment = "Declare an accessory"
  },
};
static struct arsdk_cmd common_AccessoryState_cmd_tab[] = {
  {
    .name = "SupportedAccessoriesListChanged",
    .id = ARCOMMANDS_ID_COMMON_ACCESSORYSTATE_CMD_SUPPORTEDACCESSORIESLISTCHANGED,
    .args = common_AccessoryState_SupportedAccessoriesListChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_AccessoryState_SupportedAccessoriesListChanged_arg_tab),
    .comment = "Supported accessories list"
  },
  {
    .name = "AccessoryConfigChanged",
    .id = ARCOMMANDS_ID_COMMON_ACCESSORYSTATE_CMD_ACCESSORYCONFIGCHANGED,
    .args = common_AccessoryState_AccessoryConfigChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_AccessoryState_AccessoryConfigChanged_arg_tab),
    .comment = "Accessory config"
  },
  {
    .name = "AccessoryConfigModificationEnabled",
    .id = ARCOMMANDS_ID_COMMON_ACCESSORYSTATE_CMD_ACCESSORYCONFIGMODIFICATIONENABLED,
    .args = common_AccessoryState_AccessoryConfigModificationEnabled_arg_tab,
    .nargs = ARRAY_SIZE(common_AccessoryState_AccessoryConfigModificationEnabled_arg_tab),
    .comment = "Accessory declaration availability"
  },
};
static struct arsdk_cmd common_Charger_cmd_tab[] = {
  {
    .name = "SetMaxChargeRate",
    .id = ARCOMMANDS_ID_COMMON_CHARGER_CMD_SETMAXCHARGERATE,
    .args = common_Charger_SetMaxChargeRate_arg_tab,
    .nargs = ARRAY_SIZE(common_Charger_SetMaxChargeRate_arg_tab),
    .comment = "Set max charge rate"
  },
};
static struct arsdk_cmd common_ChargerState_cmd_tab[] = {
  {
    .name = "MaxChargeRateChanged",
    .id = ARCOMMANDS_ID_COMMON_CHARGERSTATE_CMD_MAXCHARGERATECHANGED,
    .args = common_ChargerState_MaxChargeRateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_ChargerState_MaxChargeRateChanged_arg_tab),
    .comment = "Max charge rate"
  },
  {
    .name = "CurrentChargeStateChanged",
    .id = ARCOMMANDS_ID_COMMON_CHARGERSTATE_CMD_CURRENTCHARGESTATECHANGED,
    .args = common_ChargerState_CurrentChargeStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_ChargerState_CurrentChargeStateChanged_arg_tab),
    .comment = "Current charge state"
  },
  {
    .name = "LastChargeRateChanged",
    .id = ARCOMMANDS_ID_COMMON_CHARGERSTATE_CMD_LASTCHARGERATECHANGED,
    .args = common_ChargerState_LastChargeRateChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_ChargerState_LastChargeRateChanged_arg_tab),
    .comment = "Last charge rate"
  },
  {
    .name = "ChargingInfo",
    .id = ARCOMMANDS_ID_COMMON_CHARGERSTATE_CMD_CHARGINGINFO,
    .args = common_ChargerState_ChargingInfo_arg_tab,
    .nargs = ARRAY_SIZE(common_ChargerState_ChargingInfo_arg_tab),
    .comment = "Charging information"
  },
};
static struct arsdk_cmd common_RunState_cmd_tab[] = {
  {
    .name = "RunIdChanged",
    .id = ARCOMMANDS_ID_COMMON_RUNSTATE_CMD_RUNIDCHANGED,
    .args = common_RunState_RunIdChanged_arg_tab,
    .nargs = ARRAY_SIZE(common_RunState_RunIdChanged_arg_tab),
    .comment = "Current run id"
  },
};
static struct arsdk_cmd common_Factory_cmd_tab[] = {
  {
    .name = "Reset",
    .id = ARCOMMANDS_ID_COMMON_FACTORY_CMD_RESET,
    .args = NULL,
    .nargs = 0,
    .comment = "Reset the product to its factory settings"
  },
};
static struct arsdk_class common_class_tab[] = {
  {
    .name = "Network",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_NETWORK,
    .cmds = common_Network_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Network_cmd_tab),
    .comment = "Network related commands"
  },
  {
    .name = "NetworkEvent",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_NETWORKEVENT,
    .cmds = common_NetworkEvent_cmd_tab,
    .ncmds = ARRAY_SIZE(common_NetworkEvent_cmd_tab),
    .comment = "Network Event from product"
  },
  {
    .name = "Settings",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_SETTINGS,
    .cmds = common_Settings_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Settings_cmd_tab),
    .comment = "Settings commands"
  },
  {
    .name = "SettingsState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_SETTINGSSTATE,
    .cmds = common_SettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_SettingsState_cmd_tab),
    .comment = "Settings state from product"
  },
  {
    .name = "Common",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_COMMON,
    .cmds = common_Common_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Common_cmd_tab),
    .comment = "Common commands"
  },
  {
    .name = "CommonState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_COMMONSTATE,
    .cmds = common_CommonState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_CommonState_cmd_tab),
    .comment = "Common state from product"
  },
  {
    .name = "OverHeat",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_OVERHEAT,
    .cmds = common_OverHeat_cmd_tab,
    .ncmds = ARRAY_SIZE(common_OverHeat_cmd_tab),
    .comment = "Over heat commands"
  },
  {
    .name = "OverHeatState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_OVERHEATSTATE,
    .cmds = common_OverHeatState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_OverHeatState_cmd_tab),
    .comment = "Overheat state from product"
  },
  {
    .name = "Controller",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_CONTROLLER,
    .cmds = common_Controller_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Controller_cmd_tab),
    .comment = "Notify the device about the state of the controller application."
  },
  {
    .name = "WifiSettings",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_WIFISETTINGS,
    .cmds = common_WifiSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(common_WifiSettings_cmd_tab),
    .comment = "Wifi settings commands"
  },
  {
    .name = "WifiSettingsState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_WIFISETTINGSSTATE,
    .cmds = common_WifiSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_WifiSettingsState_cmd_tab),
    .comment = "Wifi settings state from product"
  },
  {
    .name = "Mavlink",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_MAVLINK,
    .cmds = common_Mavlink_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Mavlink_cmd_tab),
    .comment = "Mavlink flight plans commands"
  },
  {
    .name = "MavlinkState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_MAVLINKSTATE,
    .cmds = common_MavlinkState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_MavlinkState_cmd_tab),
    .comment = "Mavlink flight plans states commands"
  },
  {
    .name = "FlightPlanSettings",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_FLIGHTPLANSETTINGS,
    .cmds = common_FlightPlanSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(common_FlightPlanSettings_cmd_tab),
    .comment = ""
  },
  {
    .name = "FlightPlanSettingsState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_FLIGHTPLANSETTINGSSTATE,
    .cmds = common_FlightPlanSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_FlightPlanSettingsState_cmd_tab),
    .comment = ""
  },
  {
    .name = "Calibration",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_CALIBRATION,
    .cmds = common_Calibration_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Calibration_cmd_tab),
    .comment = "Calibration commands"
  },
  {
    .name = "CalibrationState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_CALIBRATIONSTATE,
    .cmds = common_CalibrationState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_CalibrationState_cmd_tab),
    .comment = "Status of the calibration"
  },
  {
    .name = "CameraSettingsState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_CAMERASETTINGSSTATE,
    .cmds = common_CameraSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_CameraSettingsState_cmd_tab),
    .comment = "Status of the camera settings"
  },
  {
    .name = "GPS",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_GPS,
    .cmds = common_GPS_cmd_tab,
    .ncmds = ARRAY_SIZE(common_GPS_cmd_tab),
    .comment = "GPS related commands"
  },
  {
    .name = "FlightPlanState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_FLIGHTPLANSTATE,
    .cmds = common_FlightPlanState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_FlightPlanState_cmd_tab),
    .comment = "FlightPlan state commands"
  },
  {
    .name = "FlightPlanEvent",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_FLIGHTPLANEVENT,
    .cmds = common_FlightPlanEvent_cmd_tab,
    .ncmds = ARRAY_SIZE(common_FlightPlanEvent_cmd_tab),
    .comment = "FlightPlan Event commands"
  },
  {
    .name = "ARLibsVersionsState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_ARLIBSVERSIONSSTATE,
    .cmds = common_ARLibsVersionsState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_ARLibsVersionsState_cmd_tab),
    .comment = "ARlibs Versions Commands"
  },
  {
    .name = "Audio",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_AUDIO,
    .cmds = common_Audio_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Audio_cmd_tab),
    .comment = "Audio-related commands."
  },
  {
    .name = "AudioState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_AUDIOSTATE,
    .cmds = common_AudioState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_AudioState_cmd_tab),
    .comment = "Audio-related state updates."
  },
  {
    .name = "Headlights",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_HEADLIGHTS,
    .cmds = common_Headlights_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Headlights_cmd_tab),
    .comment = "Controls the headlight LEDs of the Evo variants."
  },
  {
    .name = "HeadlightsState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_HEADLIGHTSSTATE,
    .cmds = common_HeadlightsState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_HeadlightsState_cmd_tab),
    .comment = "Get information about the state of the Evo variants' LEDs."
  },
  {
    .name = "Animations",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_ANIMATIONS,
    .cmds = common_Animations_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Animations_cmd_tab),
    .comment = "Animations-related commands."
  },
  {
    .name = "AnimationsState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_ANIMATIONSSTATE,
    .cmds = common_AnimationsState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_AnimationsState_cmd_tab),
    .comment = "Animations-related notification/feedback commands."
  },
  {
    .name = "Accessory",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_ACCESSORY,
    .cmds = common_Accessory_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Accessory_cmd_tab),
    .comment = "Accessories-related commands."
  },
  {
    .name = "AccessoryState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_ACCESSORYSTATE,
    .cmds = common_AccessoryState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_AccessoryState_cmd_tab),
    .comment = "Accessories-related commands."
  },
  {
    .name = "Charger",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_CHARGER,
    .cmds = common_Charger_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Charger_cmd_tab),
    .comment = "Commands sent by the controller to set charger parameters."
  },
  {
    .name = "ChargerState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_CHARGERSTATE,
    .cmds = common_ChargerState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_ChargerState_cmd_tab),
    .comment = "Commands sent by the firmware to advertise the charger status."
  },
  {
    .name = "RunState",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_RUNSTATE,
    .cmds = common_RunState_cmd_tab,
    .ncmds = ARRAY_SIZE(common_RunState_cmd_tab),
    .comment = "Commands sent by the drone to inform about the run or flight state"
  },
  {
    .name = "Factory",
    .ident = ARCOMMANDS_ID_COMMON_CLASS_FACTORY,
    .cmds = common_Factory_cmd_tab,
    .ncmds = ARRAY_SIZE(common_Factory_cmd_tab),
    .comment = "Factory reset commands"
  },
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = NULL,
    .ncmds = 0,
    .comment = ""
  },
};
static struct arsdk_arg controller_info_defaultCls_gps_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Latitude of the controller (in deg)"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Longitude of the controller (in deg)"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude of the controller (in meters, according to sea level)"
  },
  {
    .name = "horizontal_accuracy",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Horizontal accuracy (in meter)"
  },
  {
    .name = "vertical_accuracy",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Vertical accuracy (in meter)"
  },
  {
    .name = "north_speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "North speed (in meter per second)"
  },
  {
    .name = "east_speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "East speed (in meter per second)"
  },
  {
    .name = "down_speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Vertical speed (in meter per second) (down is positive)"
  },
  {
    .name = "timestamp",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Timestamp of the gps info"
  },
};
static struct arsdk_arg controller_info_defaultCls_barometer_arg_tab[] = {
  {
    .name = "pressure",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Atmospheric pressure in Pa"
  },
  {
    .name = "timestamp",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Timestamp of the barometer info"
  },
};
static struct arsdk_cmd controller_info_defaultCls_cmd_tab[] = {
  {
    .name = "gps",
    .id = ARCOMMANDS_ID_CONTROLLER_INFO_CMD_GPS,
    .args = controller_info_defaultCls_gps_arg_tab,
    .nargs = ARRAY_SIZE(controller_info_defaultCls_gps_arg_tab),
    .comment = "Controller gps info"
  },
  {
    .name = "barometer",
    .id = ARCOMMANDS_ID_CONTROLLER_INFO_CMD_BAROMETER,
    .args = controller_info_defaultCls_barometer_arg_tab,
    .nargs = ARRAY_SIZE(controller_info_defaultCls_barometer_arg_tab),
    .comment = "Controller barometer info"
  },
};
static struct arsdk_class controller_info_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = controller_info_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(controller_info_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg debug_defaultCls_set_setting_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Setting Id."
  },
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "New setting value (string encoded)."
  },
};
static struct arsdk_arg debug_defaultCls_settings_info_arg_tab[] = {
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\nFlags use by maps and lists"
  },
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Setting Id."
  },
  {
    .name = "label",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Setting displayed label (single line)."
  },
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Setting type.\nSetting type."
  },
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Setting mode.\nSetting mode."
  },
  {
    .name = "range_min",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Setting range minimal value for decimal type."
  },
  {
    .name = "range_max",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Setting range max value for decimal type."
  },
  {
    .name = "range_step",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Setting step value for decimal type"
  },
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current Setting value (string encoded)."
  },
};
static struct arsdk_arg debug_defaultCls_settings_list_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Setting Id."
  },
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "New setting value (string encoded)."
  },
};
static struct arsdk_cmd debug_defaultCls_cmd_tab[] = {
  {
    .name = "get_all_settings",
    .id = ARCOMMANDS_ID_DEBUG_CMD_GET_ALL_SETTINGS,
    .args = NULL,
    .nargs = 0,
    .comment = "Cmd sent by controller to get all settings info (generate \"settings_info\" events)."
  },
  {
    .name = "set_setting",
    .id = ARCOMMANDS_ID_DEBUG_CMD_SET_SETTING,
    .args = debug_defaultCls_set_setting_arg_tab,
    .nargs = ARRAY_SIZE(debug_defaultCls_set_setting_arg_tab),
    .comment = "Change setting value."
  },
  {
    .name = "settings_info",
    .id = ARCOMMANDS_ID_DEBUG_CMD_SETTINGS_INFO,
    .args = debug_defaultCls_settings_info_arg_tab,
    .nargs = ARRAY_SIZE(debug_defaultCls_settings_info_arg_tab),
    .comment = "Sent by the drone as answer to get_settings_info"
  },
  {
    .name = "settings_list",
    .id = ARCOMMANDS_ID_DEBUG_CMD_SETTINGS_LIST,
    .args = debug_defaultCls_settings_list_arg_tab,
    .nargs = ARRAY_SIZE(debug_defaultCls_settings_list_arg_tab),
    .comment = "Setting value changed."
  },
};
static struct arsdk_class debug_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = debug_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(debug_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg drone_manager_defaultCls_connect_arg_tab[] = {
  {
    .name = "serial",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial number of the drone."
  },
  {
    .name = "key",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Security key (passphrase) to use.\nThis arg is ignored if the drone security is 'none'.\nIf the drone manager has a saved key for the drone, pass an empty string to use it"
  },
};
static struct arsdk_arg drone_manager_defaultCls_forget_arg_tab[] = {
  {
    .name = "serial",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial number of the drone to forget."
  },
};
static struct arsdk_arg drone_manager_defaultCls_drone_list_item_arg_tab[] = {
  {
    .name = "serial",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial number of the drone."
  },
  {
    .name = "model",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Model id of the drone."
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Name (SSID) of the drone."
  },
  {
    .name = "connection_order",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0 if the drone is unknwon (never connected).\nElse, order of last connection (1 = most recent)"
  },
  {
    .name = "active",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if the drone is active (the drone manager tries to connect or is connected to it)\n0 if the drone is not the active one."
  },
  {
    .name = "visible",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if the drone is currently visible, 0 otherwise."
  },
  {
    .name = "security",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Security method used by the drone.\nThe security of the drone network."
  },
  {
    .name = "has_saved_key",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if the drone manager has a saved security key for the drone, 0 otherwise.\nIf security method is not 'none', and this value is 0, then the controller should prompt the user for a passphrase before sending a connect."
  },
  {
    .name = "rssi",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The drone rssi (wifi signal strength estimation).\nThe value is meaningless if the drone is not visible."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg drone_manager_defaultCls_connection_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current state of the connection.\nThe state of the connection to a drone."
  },
  {
    .name = "serial",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial number of the drone."
  },
  {
    .name = "model",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Model id of the drone."
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Name (SSID) of the drone."
  },
};
static struct arsdk_arg drone_manager_defaultCls_authentication_failed_arg_tab[] = {
  {
    .name = "serial",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial number of the drone."
  },
  {
    .name = "model",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Model id of the drone."
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Name (SSID) of the drone."
  },
};
static struct arsdk_arg drone_manager_defaultCls_connection_refused_arg_tab[] = {
  {
    .name = "serial",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial number of the drone."
  },
  {
    .name = "model",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Model id of the drone."
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Name (SSID) of the drone."
  },
};
static struct arsdk_arg drone_manager_defaultCls_known_drone_item_arg_tab[] = {
  {
    .name = "serial",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial number of the drone."
  },
  {
    .name = "model",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Model id of the drone."
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Last visible Name (SSID) of the drone."
  },
  {
    .name = "security",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Security method used by the drone.\nThe security of the drone network."
  },
  {
    .name = "has_saved_key",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if the drone manager has a saved security key for the drone, 0 otherwise.\nIf security method is not 'none', and this value is 0, then the controller should prompt the user for a passphrase before sending a connect."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_cmd drone_manager_defaultCls_cmd_tab[] = {
  {
    .name = "discover_drones",
    .id = ARCOMMANDS_ID_DRONE_MANAGER_CMD_DISCOVER_DRONES,
    .args = NULL,
    .nargs = 0,
    .comment = "Request the drone list"
  },
  {
    .name = "connect",
    .id = ARCOMMANDS_ID_DRONE_MANAGER_CMD_CONNECT,
    .args = drone_manager_defaultCls_connect_arg_tab,
    .nargs = ARRAY_SIZE(drone_manager_defaultCls_connect_arg_tab),
    .comment = "Connect to a drone"
  },
  {
    .name = "forget",
    .id = ARCOMMANDS_ID_DRONE_MANAGER_CMD_FORGET,
    .args = drone_manager_defaultCls_forget_arg_tab,
    .nargs = ARRAY_SIZE(drone_manager_defaultCls_forget_arg_tab),
    .comment = "Forget a drone"
  },
  {
    .name = "drone_list_item",
    .id = ARCOMMANDS_ID_DRONE_MANAGER_CMD_DRONE_LIST_ITEM,
    .args = drone_manager_defaultCls_drone_list_item_arg_tab,
    .nargs = ARRAY_SIZE(drone_manager_defaultCls_drone_list_item_arg_tab),
    .comment = "Drone list item"
  },
  {
    .name = "connection_state",
    .id = ARCOMMANDS_ID_DRONE_MANAGER_CMD_CONNECTION_STATE,
    .args = drone_manager_defaultCls_connection_state_arg_tab,
    .nargs = ARRAY_SIZE(drone_manager_defaultCls_connection_state_arg_tab),
    .comment = "State of the connection"
  },
  {
    .name = "authentication_failed",
    .id = ARCOMMANDS_ID_DRONE_MANAGER_CMD_AUTHENTICATION_FAILED,
    .args = drone_manager_defaultCls_authentication_failed_arg_tab,
    .nargs = ARRAY_SIZE(drone_manager_defaultCls_authentication_failed_arg_tab),
    .comment = "Authentication failed"
  },
  {
    .name = "connection_refused",
    .id = ARCOMMANDS_ID_DRONE_MANAGER_CMD_CONNECTION_REFUSED,
    .args = drone_manager_defaultCls_connection_refused_arg_tab,
    .nargs = ARRAY_SIZE(drone_manager_defaultCls_connection_refused_arg_tab),
    .comment = "Connection refused"
  },
  {
    .name = "known_drone_item",
    .id = ARCOMMANDS_ID_DRONE_MANAGER_CMD_KNOWN_DRONE_ITEM,
    .args = drone_manager_defaultCls_known_drone_item_arg_tab,
    .nargs = ARRAY_SIZE(drone_manager_defaultCls_known_drone_item_arg_tab),
    .comment = "Known drone item"
  },
};
static struct arsdk_class drone_manager_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = drone_manager_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(drone_manager_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg follow_me_defaultCls_start_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "FollowMe mode"
  },
};
static struct arsdk_arg follow_me_defaultCls_configure_geographic_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Geographic and Relative follow me configuration parameters"
  },
  {
    .name = "distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The distance leader-follower in meter\nNot used when arg start is at 0"
  },
  {
    .name = "elevation",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The elevation leader-follower in rad (not used when arg start is at 0)"
  },
  {
    .name = "azimuth",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The azimuth north-leader-follower in rad (not used when arg start is at 0)"
  },
};
static struct arsdk_arg follow_me_defaultCls_configure_relative_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Geographic and Relative follow me configuration parameters"
  },
  {
    .name = "distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The distance leader-follower in meter"
  },
  {
    .name = "elevation",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The elevation leader-follower in rad"
  },
  {
    .name = "azimuth",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The azimuth north-leader-follower in rad"
  },
};
static struct arsdk_arg follow_me_defaultCls_start_helicoid_anim_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Helicoid animation configuration parameters."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The desired speed of the anim in m/s\nNot used when speed_is_default is 1"
  },
  {
    .name = "revolution_number",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The number of revolution (in turn)\nNegative value is infinite\nExample: 1.5 makes an entire turn plus half of a turn\nNot used when revolutionNb_is_default is 1"
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance that should be made by the product to reach the top of the helicoid in m\nNot used when verticalDistance_is_default is 1"
  },
};
static struct arsdk_arg follow_me_defaultCls_start_swing_anim_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Swing configure parameters."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The desired speed of the anim in m/s\nNot used when speed_is_default is 1\nNot used when start is 0"
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance that should be made by the product to reach the top of the swing in m\nNot used when verticalDistance_is_default is 1\nNot used when start is 0"
  },
};
static struct arsdk_arg follow_me_defaultCls_start_boomerang_anim_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Boomerang animation configure parameters."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The desired speed of the anim in m/s\nNot used when speed_is_default is 1\nNot used when start is 0"
  },
  {
    .name = "distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance that should be made by the product to reach its return point in m\nNot used when distance_is_default is 1\nNot used when start is 0"
  },
};
static struct arsdk_arg follow_me_defaultCls_start_candle_anim_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Candle animation configure parameters."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The desired speed of the anim in m/s\nNot used when speed_is_default is 1\nNot used when start is 0"
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance that should be made by the product to reach the top of the vertical zoom-out in m\nNot used when verticalDistance_is_default is 1\nNot used when start is 0"
  },
};
static struct arsdk_arg follow_me_defaultCls_start_dolly_slide_anim_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Dolly slide animation configure parameters."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The desired speed of the anim in m/s\nNot used when speed_is_default is 1\nNot used when start is 0"
  },
  {
    .name = "angle",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Desired angle Product-User-Target in rad\nNot used when angle_is_default is 1\nNot used when start is 0"
  },
  {
    .name = "horizontal_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance that should be made by the product to reach its target in m\nNot used when horizontalDistance_is_default is 1\nNot used when start is 0"
  },
};
static struct arsdk_arg follow_me_defaultCls_target_framing_position_arg_tab[] = {
  {
    .name = "horizontal",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Horizontal position in the video (in %, from left to right)"
  },
  {
    .name = "vertical",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Vertical position in the video (in %, from bottom to top)"
  },
};
static struct arsdk_arg follow_me_defaultCls_target_image_detection_arg_tab[] = {
  {
    .name = "target_azimuth",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Horizontal north-drone-target angle in radian"
  },
  {
    .name = "target_elevation",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Vertical angle horizon-drone-target in radian"
  },
  {
    .name = "change_of_scale",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Normalized relative radial speed in 1/second"
  },
  {
    .name = "confidence_index",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Confidence index of the detection (from 0 to 255, the highest is the best)"
  },
  {
    .name = "is_new_selection",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Boolean. 1 if the selection is new, 0 otherwise"
  },
  {
    .name = "timestamp",
    .type = ARSDK_ARG_TYPE_U64,
    .enums = NULL,
    .nenums = 0,
    .comment = "Acquisition time of processed picture in millisecond"
  },
};
static struct arsdk_arg follow_me_defaultCls_state_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mode asked by user\nFollowMe mode"
  },
  {
    .name = "behavior",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Behavior of the drone according to the asked mode\nFollowMe behavior"
  },
  {
    .name = "animation",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current animation.\nThis parameter has been deprecated. Please use the animation feature.\nFollowMe animation type"
  },
  {
    .name = "animation_available",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "List of available animations\nThis parameter has been deprecated. Please use the animation feature.\nFollowMe animation type"
  },
};
static struct arsdk_arg follow_me_defaultCls_mode_info_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "FollowMe mode"
  },
  {
    .name = "missing_requirements",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "List of missing requirements to enter this mode on start.\nBit is 0 if the input is not ok, 1 if the input is ok.\nIf at least one input is missing, drone won't able to follow the target.\nIt won't use any fallback either\nInput values used by the FollowMe"
  },
  {
    .name = "improvements",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "List of inputs that can improve the mode.\nBit is 0 if the input is not ok, 1 if the input is ok.\nIf at least one input is missing, a downgraded mode will be used. See behavior\nInput values used by the FollowMe"
  },
};
static struct arsdk_arg follow_me_defaultCls_geographic_config_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Geographic and Relative follow me configuration parameters"
  },
  {
    .name = "distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The distance leader-follower in meter\nIf distance is default, this value is the current drone distance"
  },
  {
    .name = "elevation",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The elevation leader-follower in rad\nIf elevation is default, this value is the current leader to drone elevation"
  },
  {
    .name = "azimuth",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The azimuth north-leader-follower in rad\nIf azimuth is default, this value is the current leader to drone azimuth"
  },
};
static struct arsdk_arg follow_me_defaultCls_relative_config_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Geographic and Relative follow me configuration parameters"
  },
  {
    .name = "distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The distance leader-follower in meter\nIf distance is default, this value is the current drone distance"
  },
  {
    .name = "elevation",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The elevation leader-follower in rad\nIf elevation is default, this value is the current leader to drone elevation"
  },
  {
    .name = "azimuth",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The azimuth course-leader-follower in rad\nIf azimuth is default, this value is the current leader to drone azimuth"
  },
};
static struct arsdk_arg follow_me_defaultCls_target_trajectory_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Target latitude (in degrees)"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Target longitude (in degrees)"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Target altitude (in meters, relative to sea level)"
  },
  {
    .name = "north_speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Target north speed (in m/s)"
  },
  {
    .name = "east_speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Target east speed (in m/s)"
  },
  {
    .name = "down_speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Target down speed (in m/s)"
  },
};
static struct arsdk_arg follow_me_defaultCls_helicoid_anim_config_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Helicoid animation configuration parameters."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The speed of the anim in m/s"
  },
  {
    .name = "revolution_nb",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The number of revolution (in turn)\nNegative value is infinite"
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance that will be made by the product to reach the top of the helicoid in m"
  },
};
static struct arsdk_arg follow_me_defaultCls_swing_anim_config_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Swing configure parameters."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The speed of the anim in m/s"
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance that will be made by the product to reach the top of the swing in m"
  },
};
static struct arsdk_arg follow_me_defaultCls_boomerang_anim_config_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Boomerang animation configure parameters."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The speed of the anim in m/s"
  },
  {
    .name = "distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance that will be made by the product to reach its return point in m"
  },
};
static struct arsdk_arg follow_me_defaultCls_candle_anim_config_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Candle animation configure parameters."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The speed of the anim in m/s"
  },
  {
    .name = "vertical_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance that will be made by the product to reach the top of the vertical zoom-out in m"
  },
};
static struct arsdk_arg follow_me_defaultCls_dolly_slide_anim_config_arg_tab[] = {
  {
    .name = "use_default",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Dolly slide animation configure parameters."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "The speed of the anim in m/s"
  },
  {
    .name = "angle",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Angle Product-User-Target in rad"
  },
  {
    .name = "horizontal_distance",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Distance that will be made by the product to reach its target in m"
  },
};
static struct arsdk_arg follow_me_defaultCls_target_framing_position_changed_arg_tab[] = {
  {
    .name = "horizontal",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Horizontal position in the video (in %, from left to right)"
  },
  {
    .name = "vertical",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Vertical position in the video (in %, from bottom to top)"
  },
};
static struct arsdk_arg follow_me_defaultCls_target_image_detection_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of the image detection"
  },
};
static struct arsdk_cmd follow_me_defaultCls_cmd_tab[] = {
  {
    .name = "start",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_START,
    .args = follow_me_defaultCls_start_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_start_arg_tab),
    .comment = "Start followMe mode"
  },
  {
    .name = "stop",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_STOP,
    .args = NULL,
    .nargs = 0,
    .comment = "Stop current followMe"
  },
  {
    .name = "configure_geographic",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_CONFIGURE_GEOGRAPHIC,
    .args = follow_me_defaultCls_configure_geographic_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_configure_geographic_arg_tab),
    .comment = "Configure the geographic follow me"
  },
  {
    .name = "configure_relative",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_CONFIGURE_RELATIVE,
    .args = follow_me_defaultCls_configure_relative_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_configure_relative_arg_tab),
    .comment = "Configure the relative follow me"
  },
  {
    .name = "stop_animation",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_STOP_ANIMATION,
    .args = NULL,
    .nargs = 0,
    .comment = "Stop current followMe animation"
  },
  {
    .name = "start_helicoid_anim",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_START_HELICOID_ANIM,
    .args = follow_me_defaultCls_start_helicoid_anim_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_start_helicoid_anim_arg_tab),
    .comment = "Start a helicoid animation"
  },
  {
    .name = "start_swing_anim",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_START_SWING_ANIM,
    .args = follow_me_defaultCls_start_swing_anim_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_start_swing_anim_arg_tab),
    .comment = "Start a swing animation"
  },
  {
    .name = "start_boomerang_anim",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_START_BOOMERANG_ANIM,
    .args = follow_me_defaultCls_start_boomerang_anim_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_start_boomerang_anim_arg_tab),
    .comment = "Start a boomerang animation"
  },
  {
    .name = "start_candle_anim",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_START_CANDLE_ANIM,
    .args = follow_me_defaultCls_start_candle_anim_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_start_candle_anim_arg_tab),
    .comment = "Start a candle animation"
  },
  {
    .name = "start_dolly_slide_anim",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_START_DOLLY_SLIDE_ANIM,
    .args = follow_me_defaultCls_start_dolly_slide_anim_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_start_dolly_slide_anim_arg_tab),
    .comment = "Start a dolly slide animation"
  },
  {
    .name = "target_framing_position",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_TARGET_FRAMING_POSITION,
    .args = follow_me_defaultCls_target_framing_position_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_target_framing_position_arg_tab),
    .comment = "Set the target framing"
  },
  {
    .name = "target_image_detection",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_TARGET_IMAGE_DETECTION,
    .args = follow_me_defaultCls_target_image_detection_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_target_image_detection_arg_tab),
    .comment = "Send vision detection results"
  },
  {
    .name = "state",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_STATE,
    .args = follow_me_defaultCls_state_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_state_arg_tab),
    .comment = "State of the FollowMe"
  },
  {
    .name = "mode_info",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_MODE_INFO,
    .args = follow_me_defaultCls_mode_info_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_mode_info_arg_tab),
    .comment = "FollowMe mode info"
  },
  {
    .name = "geographic_config",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_GEOGRAPHIC_CONFIG,
    .args = follow_me_defaultCls_geographic_config_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_geographic_config_arg_tab),
    .comment = "Geographic configuration changed"
  },
  {
    .name = "relative_config",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_RELATIVE_CONFIG,
    .args = follow_me_defaultCls_relative_config_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_relative_config_arg_tab),
    .comment = "Relative configuration changed"
  },
  {
    .name = "target_trajectory",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_TARGET_TRAJECTORY,
    .args = follow_me_defaultCls_target_trajectory_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_target_trajectory_arg_tab),
    .comment = "Target estimated trajectory"
  },
  {
    .name = "helicoid_anim_config",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_HELICOID_ANIM_CONFIG,
    .args = follow_me_defaultCls_helicoid_anim_config_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_helicoid_anim_config_arg_tab),
    .comment = "Helicoid animation configuration"
  },
  {
    .name = "swing_anim_config",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_SWING_ANIM_CONFIG,
    .args = follow_me_defaultCls_swing_anim_config_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_swing_anim_config_arg_tab),
    .comment = "Swing animation configuration changed"
  },
  {
    .name = "boomerang_anim_config",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_BOOMERANG_ANIM_CONFIG,
    .args = follow_me_defaultCls_boomerang_anim_config_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_boomerang_anim_config_arg_tab),
    .comment = "Boomerang animation configuration changed"
  },
  {
    .name = "candle_anim_config",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_CANDLE_ANIM_CONFIG,
    .args = follow_me_defaultCls_candle_anim_config_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_candle_anim_config_arg_tab),
    .comment = "Candle animation configuration changed"
  },
  {
    .name = "dolly_slide_anim_config",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_DOLLY_SLIDE_ANIM_CONFIG,
    .args = follow_me_defaultCls_dolly_slide_anim_config_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_dolly_slide_anim_config_arg_tab),
    .comment = "DollySlide animation configuration changed"
  },
  {
    .name = "target_framing_position_changed",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_TARGET_FRAMING_POSITION_CHANGED,
    .args = follow_me_defaultCls_target_framing_position_changed_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_target_framing_position_changed_arg_tab),
    .comment = "Desired target framing"
  },
  {
    .name = "target_image_detection_state",
    .id = ARCOMMANDS_ID_FOLLOW_ME_CMD_TARGET_IMAGE_DETECTION_STATE,
    .args = follow_me_defaultCls_target_image_detection_state_arg_tab,
    .nargs = ARRAY_SIZE(follow_me_defaultCls_target_image_detection_state_arg_tab),
    .comment = "State of the image detection"
  },
};
static struct arsdk_class follow_me_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = follow_me_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(follow_me_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg JumpingSumo_Piloting_PCMD_arg_tab[] = {
  {
    .name = "flag",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Boolean for \"touch screen\"."
  },
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed value [-100:100]."
  },
  {
    .name = "turn",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Turn value. [-100:100]"
  },
};
static struct arsdk_enum JumpingSumo_Piloting_Posture_type_enum_tab[] = {
  {
    .name = "standing",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_STANDING,
    .comment = "Standing type"
  },
  {
    .name = "jumper",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_JUMPER,
    .comment = "Jumper type"
  },
  {
    .name = "kicker",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTING_POSTURE_TYPE_KICKER,
    .comment = "Kicker type"
  },
};
static struct arsdk_arg JumpingSumo_Piloting_Posture_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_Piloting_Posture_type_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_Piloting_Posture_type_enum_tab),
    .comment = "Type of Posture"
  },
};
static struct arsdk_arg JumpingSumo_Piloting_addCapOffset_arg_tab[] = {
  {
    .name = "offset",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Offset value in radians."
  },
};
static struct arsdk_enum JumpingSumo_Animations_Jump_type_enum_tab[] = {
  {
    .name = "long",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE_LONG,
    .comment = "Long jump."
  },
  {
    .name = "high",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_JUMP_TYPE_HIGH,
    .comment = "High jump"
  },
};
static struct arsdk_arg JumpingSumo_Animations_Jump_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_Animations_Jump_type_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_Animations_Jump_type_enum_tab),
    .comment = "Type of jump"
  },
};
static struct arsdk_enum JumpingSumo_Animations_SimpleAnimation_id_enum_tab[] = {
  {
    .name = "stop",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_STOP,
    .comment = "Stop ongoing animation."
  },
  {
    .name = "spin",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPIN,
    .comment = "Start a spin animation."
  },
  {
    .name = "tap",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_TAP,
    .comment = "Start a tap animation."
  },
  {
    .name = "slowshake",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SLOWSHAKE,
    .comment = "Start a slow shake animation."
  },
  {
    .name = "metronome",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_METRONOME,
    .comment = "Start a Metronome animation."
  },
  {
    .name = "ondulation",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_ONDULATION,
    .comment = "Start a standing dance animation."
  },
  {
    .name = "spinjump",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPINJUMP,
    .comment = "Start a spin jump animation."
  },
  {
    .name = "spintoposture",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPINTOPOSTURE,
    .comment = "Start a spin that end in standing posture, or in jumper if it was standing animation."
  },
  {
    .name = "spiral",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SPIRAL,
    .comment = "Start a spiral animation."
  },
  {
    .name = "slalom",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONS_SIMPLEANIMATION_ID_SLALOM,
    .comment = "Start a slalom animation."
  },
};
static struct arsdk_arg JumpingSumo_Animations_SimpleAnimation_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_Animations_SimpleAnimation_id_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_Animations_SimpleAnimation_id_enum_tab),
    .comment = "Animation ID."
  },
};
static struct arsdk_arg JumpingSumo_MediaRecord_Picture_arg_tab[] = {
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id to take picture"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecord_Video_record_enum_tab[] = {
  {
    .name = "stop",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD_STOP,
    .comment = "Stop the video recording"
  },
  {
    .name = "start",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEO_RECORD_START,
    .comment = "Start the video recording"
  },
};
static struct arsdk_arg JumpingSumo_MediaRecord_Video_arg_tab[] = {
  {
    .name = "record",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecord_Video_record_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecord_Video_record_enum_tab),
    .comment = "Command to record video"
  },
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id to record"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecord_VideoV2_record_enum_tab[] = {
  {
    .name = "stop",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD_STOP,
    .comment = "Stop the video recording"
  },
  {
    .name = "start",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORD_VIDEOV2_RECORD_START,
    .comment = "Start the video recording"
  },
};
static struct arsdk_arg JumpingSumo_MediaRecord_VideoV2_arg_tab[] = {
  {
    .name = "record",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecord_VideoV2_record_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecord_VideoV2_record_enum_tab),
    .comment = "Command to record video"
  },
};
static struct arsdk_enum JumpingSumo_NetworkSettings_WifiSelection_type_enum_tab[] = {
  {
    .name = "auto",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE_AUTO,
    .comment = "Auto selection"
  },
  {
    .name = "manual",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_TYPE_MANUAL,
    .comment = "Manual selection"
  },
};
static struct arsdk_enum JumpingSumo_NetworkSettings_WifiSelection_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_5GHZ,
    .comment = "5 GHz band"
  },
  {
    .name = "all",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGS_WIFISELECTION_BAND_ALL,
    .comment = "Both 2.4 and 5 GHz bands"
  },
};
static struct arsdk_arg JumpingSumo_NetworkSettings_WifiSelection_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_NetworkSettings_WifiSelection_type_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_NetworkSettings_WifiSelection_type_enum_tab),
    .comment = "The type of wifi selection (auto, manual)"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_NetworkSettings_WifiSelection_band_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_NetworkSettings_WifiSelection_band_enum_tab),
    .comment = "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel (not used in auto mode)"
  },
};
static struct arsdk_enum JumpingSumo_Network_WifiScan_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_5GHZ,
    .comment = "5 GHz band"
  },
  {
    .name = "all",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORK_WIFISCAN_BAND_ALL,
    .comment = "Both 2.4 and 5 GHz bands"
  },
};
static struct arsdk_arg JumpingSumo_Network_WifiScan_arg_tab[] = {
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_Network_WifiScan_band_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_Network_WifiScan_band_enum_tab),
    .comment = "The band(s) : 2.4 Ghz, 5 Ghz, or both"
  },
};
static struct arsdk_arg JumpingSumo_AudioSettings_MasterVolume_arg_tab[] = {
  {
    .name = "volume",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Master audio volume [0:100]."
  },
};
static struct arsdk_enum JumpingSumo_AudioSettings_Theme_theme_enum_tab[] = {
  {
    .name = "default",
    .value = ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_DEFAULT,
    .comment = "Default audio theme (depends on the product color)"
  },
  {
    .name = "robot",
    .value = ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_ROBOT,
    .comment = "Robot audio theme."
  },
  {
    .name = "insect",
    .value = ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_INSECT,
    .comment = "Insect audio theme."
  },
  {
    .name = "monster",
    .value = ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGS_THEME_THEME_MONSTER,
    .comment = "Monster audio theme."
  },
};
static struct arsdk_arg JumpingSumo_AudioSettings_Theme_arg_tab[] = {
  {
    .name = "theme",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_AudioSettings_Theme_theme_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_AudioSettings_Theme_theme_enum_tab),
    .comment = "The audio theme to set."
  },
};
static struct arsdk_arg JumpingSumo_RoadPlan_ScriptUploaded_arg_tab[] = {
  {
    .name = "uuid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "UUID of uploaded file."
  },
  {
    .name = "md5Hash",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "MD5 hash code computed over file."
  },
};
static struct arsdk_arg JumpingSumo_RoadPlan_ScriptDelete_arg_tab[] = {
  {
    .name = "uuid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "UUID of the file to delete."
  },
};
static struct arsdk_arg JumpingSumo_RoadPlan_PlayScript_arg_tab[] = {
  {
    .name = "uuid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "UUID of the file to play."
  },
};
static struct arsdk_arg JumpingSumo_SpeedSettings_Outdoor_arg_tab[] = {
  {
    .name = "outdoor",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if outdoor, 0 if indoor"
  },
};
static struct arsdk_arg JumpingSumo_MediaStreaming_VideoEnable_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 to enable, 0 to disable."
  },
};
static struct arsdk_arg JumpingSumo_VideoSettings_Autorecord_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0: Disabled 1: Enabled."
  },
};
static struct arsdk_enum JumpingSumo_PilotingState_PostureChanged_state_enum_tab[] = {
  {
    .name = "standing",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_STANDING,
    .comment = "Standing state"
  },
  {
    .name = "jumper",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_JUMPER,
    .comment = "Jumper state"
  },
  {
    .name = "kicker",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_KICKER,
    .comment = "Kicker state"
  },
  {
    .name = "stuck",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_STUCK,
    .comment = "Stuck state"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_POSTURECHANGED_STATE_UNKNOWN,
    .comment = "Unknown state"
  },
};
static struct arsdk_arg JumpingSumo_PilotingState_PostureChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_PilotingState_PostureChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_PilotingState_PostureChanged_state_enum_tab),
    .comment = "State of posture"
  },
};
static struct arsdk_enum JumpingSumo_PilotingState_AlertStateChanged_state_enum_tab[] = {
  {
    .name = "none",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE,
    .comment = "No alert"
  },
  {
    .name = "critical_battery",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY,
    .comment = "Critical battery alert"
  },
  {
    .name = "low_battery",
    .value = ARCOMMANDS_JUMPINGSUMO_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY,
    .comment = "Low battery alert"
  },
};
static struct arsdk_arg JumpingSumo_PilotingState_AlertStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_PilotingState_AlertStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_PilotingState_AlertStateChanged_state_enum_tab),
    .comment = "JS alert state"
  },
};
static struct arsdk_arg JumpingSumo_PilotingState_SpeedChanged_arg_tab[] = {
  {
    .name = "speed",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed command applied to motors in range [-100;100]."
  },
  {
    .name = "realSpeed",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Actual real-world speed in cm/s. Value -32768 returned if not available."
  },
};
static struct arsdk_enum JumpingSumo_AnimationsState_JumpLoadChanged_state_enum_tab[] = {
  {
    .name = "unknown",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_UNKNOWN,
    .comment = "Unknown state (obsolete)."
  },
  {
    .name = "unloaded",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_UNLOADED,
    .comment = "Unloaded state."
  },
  {
    .name = "loaded",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_LOADED,
    .comment = "Loaded state."
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_BUSY,
    .comment = "Unknown state (obsolete)."
  },
  {
    .name = "low_battery_unloaded",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_LOW_BATTERY_UNLOADED,
    .comment = "Unloaded state and low battery."
  },
  {
    .name = "low_battery_loaded",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPLOADCHANGED_STATE_LOW_BATTERY_LOADED,
    .comment = "Loaded state and low battery."
  },
};
static struct arsdk_arg JumpingSumo_AnimationsState_JumpLoadChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_AnimationsState_JumpLoadChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_AnimationsState_JumpLoadChanged_state_enum_tab),
    .comment = "State of jump load"
  },
};
static struct arsdk_enum JumpingSumo_AnimationsState_JumpTypeChanged_state_enum_tab[] = {
  {
    .name = "none",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_NONE,
    .comment = "None."
  },
  {
    .name = "long",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_LONG,
    .comment = "Long jump type."
  },
  {
    .name = "high",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPTYPECHANGED_STATE_HIGH,
    .comment = "High jump type."
  },
};
static struct arsdk_arg JumpingSumo_AnimationsState_JumpTypeChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_AnimationsState_JumpTypeChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_AnimationsState_JumpTypeChanged_state_enum_tab),
    .comment = "State of jump type."
  },
};
static struct arsdk_enum JumpingSumo_AnimationsState_JumpMotorProblemChanged_error_enum_tab[] = {
  {
    .name = "none",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_NONE,
    .comment = "None."
  },
  {
    .name = "blocked",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_BLOCKED,
    .comment = "Motor blocked"
  },
  {
    .name = "over_heated",
    .value = ARCOMMANDS_JUMPINGSUMO_ANIMATIONSSTATE_JUMPMOTORPROBLEMCHANGED_ERROR_OVER_HEATED,
    .comment = "Motor over heated"
  },
};
static struct arsdk_arg JumpingSumo_AnimationsState_JumpMotorProblemChanged_arg_tab[] = {
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_AnimationsState_JumpMotorProblemChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_AnimationsState_JumpMotorProblemChanged_error_enum_tab),
    .comment = "Enum describing the problem of the motor"
  },
};
static struct arsdk_arg JumpingSumo_SettingsState_ProductGPSVersionChanged_arg_tab[] = {
  {
    .name = "software",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product GPS software version"
  },
  {
    .name = "hardware",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product GPS hardware version"
  },
};
static struct arsdk_arg JumpingSumo_MediaRecordState_PictureStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if picture has been taken, 0 otherwise"
  },
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id where the picture was recorded"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecordState_VideoStateChanged_state_enum_tab[] = {
  {
    .name = "stopped",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STOPPED,
    .comment = "Video was stopped"
  },
  {
    .name = "started",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_STARTED,
    .comment = "Video was started"
  },
  {
    .name = "failed",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGED_STATE_FAILED,
    .comment = "Video was failed"
  },
};
static struct arsdk_arg JumpingSumo_MediaRecordState_VideoStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecordState_VideoStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecordState_VideoStateChanged_state_enum_tab),
    .comment = "State of video"
  },
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id where the video was recorded"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecordState_PictureStateChangedV2_state_enum_tab[] = {
  {
    .name = "ready",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY,
    .comment = "The picture recording is ready"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY,
    .comment = "The picture recording is busy"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE,
    .comment = "The picture recording is not available"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecordState_PictureStateChangedV2_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN,
    .comment = "Unknown generic error"
  },
  {
    .name = "camera_ko",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO,
    .comment = "Picture camera is out of order"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL,
    .comment = "Memory full ; cannot save one additional picture"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY,
    .comment = "Battery is too low to start/keep recording."
  },
};
static struct arsdk_arg JumpingSumo_MediaRecordState_PictureStateChangedV2_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecordState_PictureStateChangedV2_state_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecordState_PictureStateChangedV2_state_enum_tab),
    .comment = "State of device picture recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecordState_PictureStateChangedV2_error_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecordState_PictureStateChangedV2_error_enum_tab),
    .comment = "Error to explain the state"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecordState_VideoStateChangedV2_state_enum_tab[] = {
  {
    .name = "stopped",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STOPPED,
    .comment = "Video is stopped"
  },
  {
    .name = "started",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STARTED,
    .comment = "Video is started"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_NOTAVAILABLE,
    .comment = "The video recording is not available"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecordState_VideoStateChangedV2_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_UNKNOWN,
    .comment = "Unknown generic error"
  },
  {
    .name = "camera_ko",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_CAMERA_KO,
    .comment = "Video camera is out of order"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MEMORYFULL,
    .comment = "Memory full ; cannot save one additional video"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_LOWBATTERY,
    .comment = "Battery is too low to start/keep recording."
  },
};
static struct arsdk_arg JumpingSumo_MediaRecordState_VideoStateChangedV2_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecordState_VideoStateChangedV2_state_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecordState_VideoStateChangedV2_state_enum_tab),
    .comment = "State of device video recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecordState_VideoStateChangedV2_error_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecordState_VideoStateChangedV2_error_enum_tab),
    .comment = "Error to explain the state"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecordEvent_PictureEventChanged_event_enum_tab[] = {
  {
    .name = "taken",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN,
    .comment = "Picture taken and saved"
  },
  {
    .name = "failed",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED,
    .comment = "Picture failed"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecordEvent_PictureEventChanged_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN,
    .comment = "Unknown generic error ; only when state is failed"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY,
    .comment = "Picture recording is busy ; only when state is failed"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE,
    .comment = "Picture recording not available ; only when state is failed"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL,
    .comment = "Memory full ; only when state is failed"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY,
    .comment = "Battery is too low to record."
  },
};
static struct arsdk_arg JumpingSumo_MediaRecordEvent_PictureEventChanged_arg_tab[] = {
  {
    .name = "event",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecordEvent_PictureEventChanged_event_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecordEvent_PictureEventChanged_event_enum_tab),
    .comment = "Last event of picture recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecordEvent_PictureEventChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecordEvent_PictureEventChanged_error_enum_tab),
    .comment = "Error to explain the event"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecordEvent_VideoEventChanged_event_enum_tab[] = {
  {
    .name = "start",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_START,
    .comment = "Video start"
  },
  {
    .name = "stop",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_STOP,
    .comment = "Video stop and saved"
  },
  {
    .name = "failed",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_FAILED,
    .comment = "Video failed"
  },
};
static struct arsdk_enum JumpingSumo_MediaRecordEvent_VideoEventChanged_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_UNKNOWN,
    .comment = "Unknown generic error ; only when state is failed"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_BUSY,
    .comment = "Video recording is busy ; only when state is failed"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_NOTAVAILABLE,
    .comment = "Video recording not available ; only when state is failed"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MEMORYFULL,
    .comment = "Memory full"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_LOWBATTERY,
    .comment = "Battery is too low to record."
  },
  {
    .name = "autoStopped",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_AUTOSTOPPED,
    .comment = "Video was auto stopped"
  },
};
static struct arsdk_arg JumpingSumo_MediaRecordEvent_VideoEventChanged_arg_tab[] = {
  {
    .name = "event",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecordEvent_VideoEventChanged_event_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecordEvent_VideoEventChanged_event_enum_tab),
    .comment = "Event of video recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaRecordEvent_VideoEventChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaRecordEvent_VideoEventChanged_error_enum_tab),
    .comment = "Error to explain the event"
  },
};
static struct arsdk_enum JumpingSumo_NetworkSettingsState_WifiSelectionChanged_type_enum_tab[] = {
  {
    .name = "auto_all",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_ALL,
    .comment = "Auto selection"
  },
  {
    .name = "auto_2_4ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_2_4GHZ,
    .comment = "Auto selection 2.4ghz"
  },
  {
    .name = "auto_5ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_5GHZ,
    .comment = "Auto selection 5 ghz"
  },
  {
    .name = "manual",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL,
    .comment = "Manual selection"
  },
};
static struct arsdk_enum JumpingSumo_NetworkSettingsState_WifiSelectionChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
  {
    .name = "all",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ALL,
    .comment = "Both 2.4 and 5 GHz bands"
  },
};
static struct arsdk_arg JumpingSumo_NetworkSettingsState_WifiSelectionChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_NetworkSettingsState_WifiSelectionChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_NetworkSettingsState_WifiSelectionChanged_type_enum_tab),
    .comment = "The type of wifi selection settings"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_NetworkSettingsState_WifiSelectionChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_NetworkSettingsState_WifiSelectionChanged_band_enum_tab),
    .comment = "The actual wifi band state"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel (depends of the band)"
  },
};
static struct arsdk_enum JumpingSumo_NetworkState_WifiScanListChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
};
static struct arsdk_arg JumpingSumo_NetworkState_WifiScanListChanged_arg_tab[] = {
  {
    .name = "ssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "SSID of the AP"
  },
  {
    .name = "rssi",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "RSSI of the AP in dbm (negative value)"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_NetworkState_WifiScanListChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_NetworkState_WifiScanListChanged_band_enum_tab),
    .comment = "The band : 2.4 GHz or 5 GHz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Channel of the AP"
  },
};
static struct arsdk_enum JumpingSumo_NetworkState_WifiAuthChannelListChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_JUMPINGSUMO_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
};
static struct arsdk_arg JumpingSumo_NetworkState_WifiAuthChannelListChanged_arg_tab[] = {
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_NetworkState_WifiAuthChannelListChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_NetworkState_WifiAuthChannelListChanged_band_enum_tab),
    .comment = "The band of this channel : 2.4 GHz or 5 GHz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The authorized channel."
  },
  {
    .name = "in_or_out",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)"
  },
};
static struct arsdk_arg JumpingSumo_NetworkState_LinkQualityChanged_arg_tab[] = {
  {
    .name = "quality",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The WiFi link quality in range 0-6, the higher the value, the higher the link quality."
  },
};
static struct arsdk_arg JumpingSumo_AudioSettingsState_MasterVolumeChanged_arg_tab[] = {
  {
    .name = "volume",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Master audio volume [0:100]."
  },
};
static struct arsdk_enum JumpingSumo_AudioSettingsState_ThemeChanged_theme_enum_tab[] = {
  {
    .name = "default",
    .value = ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_DEFAULT,
    .comment = "Default audio theme (depends on the product color)"
  },
  {
    .name = "robot",
    .value = ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_ROBOT,
    .comment = "Robot audio theme."
  },
  {
    .name = "insect",
    .value = ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_INSECT,
    .comment = "Insect audio theme."
  },
  {
    .name = "monster",
    .value = ARCOMMANDS_JUMPINGSUMO_AUDIOSETTINGSSTATE_THEMECHANGED_THEME_MONSTER,
    .comment = "Monster audio theme."
  },
};
static struct arsdk_arg JumpingSumo_AudioSettingsState_ThemeChanged_arg_tab[] = {
  {
    .name = "theme",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_AudioSettingsState_ThemeChanged_theme_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_AudioSettingsState_ThemeChanged_theme_enum_tab),
    .comment = "The audio theme to set."
  },
};
static struct arsdk_arg JumpingSumo_RoadPlanState_ScriptMetadataListChanged_arg_tab[] = {
  {
    .name = "uuid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Script uuid for which metadata changed."
  },
  {
    .name = "version",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Version number for this script."
  },
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product targeted by script."
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Display name of the script."
  },
  {
    .name = "lastModified",
    .type = ARSDK_ARG_TYPE_U64,
    .enums = NULL,
    .nenums = 0,
    .comment = "Timestamp relative to the UNIX epoch of the last time the file was modified."
  },
};
static struct arsdk_enum JumpingSumo_RoadPlanState_ScriptUploadChanged_resultCode_enum_tab[] = {
  {
    .name = "error_ok",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_OK,
    .comment = "The script was parsed successfully."
  },
  {
    .name = "error_file_corrupted",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_FILE_CORRUPTED,
    .comment = "The MD5 hash codes are different or file is unreadable."
  },
  {
    .name = "error_invalid_format",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_INVALID_FORMAT,
    .comment = "The parser is not well formed or can not be parsed."
  },
  {
    .name = "error_file_too_large",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_FILE_TOO_LARGE,
    .comment = "The file is larger than maximum allowed size."
  },
  {
    .name = "error_unsupported",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTUPLOADCHANGED_RESULTCODE_ERROR_UNSUPPORTED,
    .comment = "Script version is not supported by device."
  },
};
static struct arsdk_arg JumpingSumo_RoadPlanState_ScriptUploadChanged_arg_tab[] = {
  {
    .name = "resultCode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_RoadPlanState_ScriptUploadChanged_resultCode_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_RoadPlanState_ScriptUploadChanged_resultCode_enum_tab),
    .comment = "Error code."
  },
};
static struct arsdk_enum JumpingSumo_RoadPlanState_ScriptDeleteChanged_resultCode_enum_tab[] = {
  {
    .name = "error_ok",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ERROR_OK,
    .comment = "The script was deleted successfully."
  },
  {
    .name = "error_no_such_script",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ERROR_NO_SUCH_SCRIPT,
    .comment = "No script with this uuid exists."
  },
  {
    .name = "error_internal_failure",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_SCRIPTDELETECHANGED_RESULTCODE_ERROR_INTERNAL_FAILURE,
    .comment = "An internal error occured while attempting to delete the script."
  },
};
static struct arsdk_arg JumpingSumo_RoadPlanState_ScriptDeleteChanged_arg_tab[] = {
  {
    .name = "resultCode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_RoadPlanState_ScriptDeleteChanged_resultCode_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_RoadPlanState_ScriptDeleteChanged_resultCode_enum_tab),
    .comment = "Error code."
  },
};
static struct arsdk_enum JumpingSumo_RoadPlanState_PlayScriptChanged_resultCode_enum_tab[] = {
  {
    .name = "script_started",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_STARTED,
    .comment = "The script started playing successfully."
  },
  {
    .name = "script_finished",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_FINISHED,
    .comment = "The script finished successfully."
  },
  {
    .name = "script_no_such_script",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_NO_SUCH_SCRIPT,
    .comment = "No script with this uuid exists."
  },
  {
    .name = "script_error",
    .value = ARCOMMANDS_JUMPINGSUMO_ROADPLANSTATE_PLAYSCRIPTCHANGED_RESULTCODE_SCRIPT_ERROR,
    .comment = "An error occured while playing the script."
  },
};
static struct arsdk_arg JumpingSumo_RoadPlanState_PlayScriptChanged_arg_tab[] = {
  {
    .name = "resultCode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_RoadPlanState_PlayScriptChanged_resultCode_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_RoadPlanState_PlayScriptChanged_resultCode_enum_tab),
    .comment = "Error code."
  },
};
static struct arsdk_arg JumpingSumo_SpeedSettingsState_OutdoorChanged_arg_tab[] = {
  {
    .name = "outdoor",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if outdoor, 0 if indoor"
  },
};
static struct arsdk_enum JumpingSumo_MediaStreamingState_VideoEnableChanged_enabled_enum_tab[] = {
  {
    .name = "enabled",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENABLED,
    .comment = "Video streaming is enabled."
  },
  {
    .name = "disabled",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_DISABLED,
    .comment = "Video streaming is disabled."
  },
  {
    .name = "error",
    .value = ARCOMMANDS_JUMPINGSUMO_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ERROR,
    .comment = "Video streaming failed to start."
  },
};
static struct arsdk_arg JumpingSumo_MediaStreamingState_VideoEnableChanged_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = JumpingSumo_MediaStreamingState_VideoEnableChanged_enabled_enum_tab,
    .nenums = ARRAY_SIZE(JumpingSumo_MediaStreamingState_VideoEnableChanged_enabled_enum_tab),
    .comment = "Current video streaming status."
  },
};
static struct arsdk_arg JumpingSumo_VideoSettingsState_AutorecordChanged_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0: Disabled 1: Enabled."
  },
};
static struct arsdk_cmd JumpingSumo_Piloting_cmd_tab[] = {
  {
    .name = "PCMD",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_PILOTING_CMD_PCMD,
    .args = JumpingSumo_Piloting_PCMD_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_Piloting_PCMD_arg_tab),
    .comment = "Ask the JS speed and turn ratio."
  },
  {
    .name = "Posture",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_PILOTING_CMD_POSTURE,
    .args = JumpingSumo_Piloting_Posture_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_Piloting_Posture_arg_tab),
    .comment = "Request a posture"
  },
  {
    .name = "addCapOffset",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_PILOTING_CMD_ADDCAPOFFSET,
    .args = JumpingSumo_Piloting_addCapOffset_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_Piloting_addCapOffset_arg_tab),
    .comment = "Add the specified offset to the current cap."
  },
};
static struct arsdk_cmd JumpingSumo_PilotingState_cmd_tab[] = {
  {
    .name = "PostureChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_PILOTINGSTATE_CMD_POSTURECHANGED,
    .args = JumpingSumo_PilotingState_PostureChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_PilotingState_PostureChanged_arg_tab),
    .comment = "State of posture changed."
  },
  {
    .name = "AlertStateChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_PILOTINGSTATE_CMD_ALERTSTATECHANGED,
    .args = JumpingSumo_PilotingState_AlertStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_PilotingState_AlertStateChanged_arg_tab),
    .comment = "JS alert state changed"
  },
  {
    .name = "SpeedChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_PILOTINGSTATE_CMD_SPEEDCHANGED,
    .args = JumpingSumo_PilotingState_SpeedChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_PilotingState_SpeedChanged_arg_tab),
    .comment = "Notification sent when JS speed changes."
  },
};
static struct arsdk_cmd JumpingSumo_Animations_cmd_tab[] = {
  {
    .name = "JumpStop",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ANIMATIONS_CMD_JUMPSTOP,
    .args = NULL,
    .nargs = 0,
    .comment = "Stop jump, emergency jump stop, stop jump motor and stay there."
  },
  {
    .name = "JumpCancel",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ANIMATIONS_CMD_JUMPCANCEL,
    .args = NULL,
    .nargs = 0,
    .comment = "Cancel jump and come back to previous state (if possible)."
  },
  {
    .name = "JumpLoad",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ANIMATIONS_CMD_JUMPLOAD,
    .args = NULL,
    .nargs = 0,
    .comment = "Request jump loading"
  },
  {
    .name = "Jump",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ANIMATIONS_CMD_JUMP,
    .args = JumpingSumo_Animations_Jump_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_Animations_Jump_arg_tab),
    .comment = "Request a jump"
  },
  {
    .name = "SimpleAnimation",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ANIMATIONS_CMD_SIMPLEANIMATION,
    .args = JumpingSumo_Animations_SimpleAnimation_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_Animations_SimpleAnimation_arg_tab),
    .comment = "Play a parameterless animation."
  },
};
static struct arsdk_cmd JumpingSumo_AnimationsState_cmd_tab[] = {
  {
    .name = "JumpLoadChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ANIMATIONSSTATE_CMD_JUMPLOADCHANGED,
    .args = JumpingSumo_AnimationsState_JumpLoadChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_AnimationsState_JumpLoadChanged_arg_tab),
    .comment = "State of jump load changed"
  },
  {
    .name = "JumpTypeChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ANIMATIONSSTATE_CMD_JUMPTYPECHANGED,
    .args = JumpingSumo_AnimationsState_JumpTypeChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_AnimationsState_JumpTypeChanged_arg_tab),
    .comment = "State of jump type changed."
  },
  {
    .name = "JumpMotorProblemChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ANIMATIONSSTATE_CMD_JUMPMOTORPROBLEMCHANGED,
    .args = JumpingSumo_AnimationsState_JumpMotorProblemChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_AnimationsState_JumpMotorProblemChanged_arg_tab),
    .comment = "State about the jump motor problem"
  },
};
static struct arsdk_cmd JumpingSumo_SettingsState_cmd_tab[] = {
  {
    .name = "ProductGPSVersionChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_SETTINGSSTATE_CMD_PRODUCTGPSVERSIONCHANGED,
    .args = JumpingSumo_SettingsState_ProductGPSVersionChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_SettingsState_ProductGPSVersionChanged_arg_tab),
    .comment = "@deprecated"
  },
};
static struct arsdk_cmd JumpingSumo_MediaRecord_cmd_tab[] = {
  {
    .name = "Picture",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIARECORD_CMD_PICTURE,
    .args = JumpingSumo_MediaRecord_Picture_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaRecord_Picture_arg_tab),
    .comment = "@deprecated"
  },
  {
    .name = "Video",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIARECORD_CMD_VIDEO,
    .args = JumpingSumo_MediaRecord_Video_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaRecord_Video_arg_tab),
    .comment = "@deprecated"
  },
  {
    .name = "PictureV2",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIARECORD_CMD_PICTUREV2,
    .args = NULL,
    .nargs = 0,
    .comment = "Take picture"
  },
  {
    .name = "VideoV2",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIARECORD_CMD_VIDEOV2,
    .args = JumpingSumo_MediaRecord_VideoV2_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaRecord_VideoV2_arg_tab),
    .comment = "Video record"
  },
};
static struct arsdk_cmd JumpingSumo_MediaRecordState_cmd_tab[] = {
  {
    .name = "PictureStateChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIARECORDSTATE_CMD_PICTURESTATECHANGED,
    .args = JumpingSumo_MediaRecordState_PictureStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaRecordState_PictureStateChanged_arg_tab),
    .comment = "@deprecated"
  },
  {
    .name = "VideoStateChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIARECORDSTATE_CMD_VIDEOSTATECHANGED,
    .args = JumpingSumo_MediaRecordState_VideoStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaRecordState_VideoStateChanged_arg_tab),
    .comment = "@deprecated"
  },
  {
    .name = "PictureStateChangedV2",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIARECORDSTATE_CMD_PICTURESTATECHANGEDV2,
    .args = JumpingSumo_MediaRecordState_PictureStateChangedV2_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaRecordState_PictureStateChangedV2_arg_tab),
    .comment = "State of device picture recording changed"
  },
  {
    .name = "VideoStateChangedV2",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIARECORDSTATE_CMD_VIDEOSTATECHANGEDV2,
    .args = JumpingSumo_MediaRecordState_VideoStateChangedV2_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaRecordState_VideoStateChangedV2_arg_tab),
    .comment = "State of device video recording changed"
  },
};
static struct arsdk_cmd JumpingSumo_MediaRecordEvent_cmd_tab[] = {
  {
    .name = "PictureEventChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIARECORDEVENT_CMD_PICTUREEVENTCHANGED,
    .args = JumpingSumo_MediaRecordEvent_PictureEventChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaRecordEvent_PictureEventChanged_arg_tab),
    .comment = "Event of picture recording"
  },
  {
    .name = "VideoEventChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIARECORDEVENT_CMD_VIDEOEVENTCHANGED,
    .args = JumpingSumo_MediaRecordEvent_VideoEventChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaRecordEvent_VideoEventChanged_arg_tab),
    .comment = "Event of video recording"
  },
};
static struct arsdk_cmd JumpingSumo_NetworkSettings_cmd_tab[] = {
  {
    .name = "WifiSelection",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_NETWORKSETTINGS_CMD_WIFISELECTION,
    .args = JumpingSumo_NetworkSettings_WifiSelection_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_NetworkSettings_WifiSelection_arg_tab),
    .comment = "Auto-select channel of choosen band"
  },
};
static struct arsdk_cmd JumpingSumo_NetworkSettingsState_cmd_tab[] = {
  {
    .name = "WifiSelectionChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_NETWORKSETTINGSSTATE_CMD_WIFISELECTIONCHANGED,
    .args = JumpingSumo_NetworkSettingsState_WifiSelectionChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_NetworkSettingsState_WifiSelectionChanged_arg_tab),
    .comment = "Wifi selection from product"
  },
};
static struct arsdk_cmd JumpingSumo_Network_cmd_tab[] = {
  {
    .name = "WifiScan",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_NETWORK_CMD_WIFISCAN,
    .args = JumpingSumo_Network_WifiScan_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_Network_WifiScan_arg_tab),
    .comment = "Launches wifi network scan"
  },
  {
    .name = "WifiAuthChannel",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_NETWORK_CMD_WIFIAUTHCHANNEL,
    .args = NULL,
    .nargs = 0,
    .comment = "Controller inquire the list of authorized wifi channels."
  },
};
static struct arsdk_cmd JumpingSumo_NetworkState_cmd_tab[] = {
  {
    .name = "WifiScanListChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_NETWORKSTATE_CMD_WIFISCANLISTCHANGED,
    .args = JumpingSumo_NetworkState_WifiScanListChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_NetworkState_WifiScanListChanged_arg_tab),
    .comment = "One scanning result found"
  },
  {
    .name = "AllWifiScanChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_NETWORKSTATE_CMD_ALLWIFISCANCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "State sent when all scanning result sent"
  },
  {
    .name = "WifiAuthChannelListChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_NETWORKSTATE_CMD_WIFIAUTHCHANNELLISTCHANGED,
    .args = JumpingSumo_NetworkState_WifiAuthChannelListChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_NetworkState_WifiAuthChannelListChanged_arg_tab),
    .comment = "Notify of an Authorized Channel."
  },
  {
    .name = "AllWifiAuthChannelChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_NETWORKSTATE_CMD_ALLWIFIAUTHCHANNELCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "Notify the end of the list of Authorized wifi Channel."
  },
  {
    .name = "LinkQualityChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_NETWORKSTATE_CMD_LINKQUALITYCHANGED,
    .args = JumpingSumo_NetworkState_LinkQualityChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_NetworkState_LinkQualityChanged_arg_tab),
    .comment = "Notification sent by the firmware to give an indication of the WiFi link quality."
  },
};
static struct arsdk_cmd JumpingSumo_AudioSettings_cmd_tab[] = {
  {
    .name = "MasterVolume",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_AUDIOSETTINGS_CMD_MASTERVOLUME,
    .args = JumpingSumo_AudioSettings_MasterVolume_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_AudioSettings_MasterVolume_arg_tab),
    .comment = "Master volume control."
  },
  {
    .name = "Theme",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_AUDIOSETTINGS_CMD_THEME,
    .args = JumpingSumo_AudioSettings_Theme_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_AudioSettings_Theme_arg_tab),
    .comment = "Audio Theme."
  },
};
static struct arsdk_cmd JumpingSumo_AudioSettingsState_cmd_tab[] = {
  {
    .name = "MasterVolumeChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_AUDIOSETTINGSSTATE_CMD_MASTERVOLUMECHANGED,
    .args = JumpingSumo_AudioSettingsState_MasterVolumeChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_AudioSettingsState_MasterVolumeChanged_arg_tab),
    .comment = "Master volume control."
  },
  {
    .name = "ThemeChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_AUDIOSETTINGSSTATE_CMD_THEMECHANGED,
    .args = JumpingSumo_AudioSettingsState_ThemeChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_AudioSettingsState_ThemeChanged_arg_tab),
    .comment = "Command to notify controller of new Audio Theme."
  },
};
static struct arsdk_cmd JumpingSumo_RoadPlan_cmd_tab[] = {
  {
    .name = "AllScriptsMetadata",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ROADPLAN_CMD_ALLSCRIPTSMETADATA,
    .args = NULL,
    .nargs = 0,
    .comment = "Command to ask device all metadata scripts."
  },
  {
    .name = "ScriptUploaded",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ROADPLAN_CMD_SCRIPTUPLOADED,
    .args = JumpingSumo_RoadPlan_ScriptUploaded_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_RoadPlan_ScriptUploaded_arg_tab),
    .comment = "Notify device that a new file has been uploaded."
  },
  {
    .name = "ScriptDelete",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ROADPLAN_CMD_SCRIPTDELETE,
    .args = JumpingSumo_RoadPlan_ScriptDelete_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_RoadPlan_ScriptDelete_arg_tab),
    .comment = "Ask the device to delete a script."
  },
  {
    .name = "PlayScript",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ROADPLAN_CMD_PLAYSCRIPT,
    .args = JumpingSumo_RoadPlan_PlayScript_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_RoadPlan_PlayScript_arg_tab),
    .comment = "Ask the device to play a script."
  },
};
static struct arsdk_cmd JumpingSumo_RoadPlanState_cmd_tab[] = {
  {
    .name = "ScriptMetadataListChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ROADPLANSTATE_CMD_SCRIPTMETADATALISTCHANGED,
    .args = JumpingSumo_RoadPlanState_ScriptMetadataListChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_RoadPlanState_ScriptMetadataListChanged_arg_tab),
    .comment = "Update the controller with metadata."
  },
  {
    .name = "AllScriptsMetadataChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ROADPLANSTATE_CMD_ALLSCRIPTSMETADATACHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "Notify controller that all script metadatas are updated."
  },
  {
    .name = "ScriptUploadChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ROADPLANSTATE_CMD_SCRIPTUPLOADCHANGED,
    .args = JumpingSumo_RoadPlanState_ScriptUploadChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_RoadPlanState_ScriptUploadChanged_arg_tab),
    .comment = "Device response to ScriptUploaded command."
  },
  {
    .name = "ScriptDeleteChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ROADPLANSTATE_CMD_SCRIPTDELETECHANGED,
    .args = JumpingSumo_RoadPlanState_ScriptDeleteChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_RoadPlanState_ScriptDeleteChanged_arg_tab),
    .comment = "Device response to ScriptDelete command."
  },
  {
    .name = "PlayScriptChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_ROADPLANSTATE_CMD_PLAYSCRIPTCHANGED,
    .args = JumpingSumo_RoadPlanState_PlayScriptChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_RoadPlanState_PlayScriptChanged_arg_tab),
    .comment = "Device response to PlayScript command."
  },
};
static struct arsdk_cmd JumpingSumo_SpeedSettings_cmd_tab[] = {
  {
    .name = "Outdoor",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_SPEEDSETTINGS_CMD_OUTDOOR,
    .args = JumpingSumo_SpeedSettings_Outdoor_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_SpeedSettings_Outdoor_arg_tab),
    .comment = "@deprecated"
  },
};
static struct arsdk_cmd JumpingSumo_SpeedSettingsState_cmd_tab[] = {
  {
    .name = "OutdoorChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_SPEEDSETTINGSSTATE_CMD_OUTDOORCHANGED,
    .args = JumpingSumo_SpeedSettingsState_OutdoorChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_SpeedSettingsState_OutdoorChanged_arg_tab),
    .comment = "@deprecated"
  },
};
static struct arsdk_cmd JumpingSumo_MediaStreaming_cmd_tab[] = {
  {
    .name = "VideoEnable",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIASTREAMING_CMD_VIDEOENABLE,
    .args = JumpingSumo_MediaStreaming_VideoEnable_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaStreaming_VideoEnable_arg_tab),
    .comment = "Enable/disable video streaming."
  },
};
static struct arsdk_cmd JumpingSumo_MediaStreamingState_cmd_tab[] = {
  {
    .name = "VideoEnableChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_MEDIASTREAMINGSTATE_CMD_VIDEOENABLECHANGED,
    .args = JumpingSumo_MediaStreamingState_VideoEnableChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_MediaStreamingState_VideoEnableChanged_arg_tab),
    .comment = "Return video streaming status."
  },
};
static struct arsdk_cmd JumpingSumo_VideoSettings_cmd_tab[] = {
  {
    .name = "Autorecord",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_VIDEOSETTINGS_CMD_AUTORECORD,
    .args = JumpingSumo_VideoSettings_Autorecord_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_VideoSettings_Autorecord_arg_tab),
    .comment = "Set video automatic recording state."
  },
};
static struct arsdk_cmd JumpingSumo_VideoSettingsState_cmd_tab[] = {
  {
    .name = "AutorecordChanged",
    .id = ARCOMMANDS_ID_JUMPINGSUMO_VIDEOSETTINGSSTATE_CMD_AUTORECORDCHANGED,
    .args = JumpingSumo_VideoSettingsState_AutorecordChanged_arg_tab,
    .nargs = ARRAY_SIZE(JumpingSumo_VideoSettingsState_AutorecordChanged_arg_tab),
    .comment = "Get video automatic recording status."
  },
};
static struct arsdk_class JumpingSumo_class_tab[] = {
  {
    .name = "Piloting",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_PILOTING,
    .cmds = JumpingSumo_Piloting_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_Piloting_cmd_tab),
    .comment = "All commands related to piloting the JumpingSumo"
  },
  {
    .name = "PilotingState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_PILOTINGSTATE,
    .cmds = JumpingSumo_PilotingState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_PilotingState_cmd_tab),
    .comment = "Animations state from JS."
  },
  {
    .name = "Animations",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_ANIMATIONS,
    .cmds = JumpingSumo_Animations_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_Animations_cmd_tab),
    .comment = "Animation commands"
  },
  {
    .name = "AnimationsState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_ANIMATIONSSTATE,
    .cmds = JumpingSumo_AnimationsState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_AnimationsState_cmd_tab),
    .comment = "Animations state from JS."
  },
  {
    .name = "SettingsState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_SETTINGSSTATE,
    .cmds = JumpingSumo_SettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_SettingsState_cmd_tab),
    .comment = "Settings state from product"
  },
  {
    .name = "MediaRecord",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_MEDIARECORD,
    .cmds = JumpingSumo_MediaRecord_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_MediaRecord_cmd_tab),
    .comment = "Media recording management"
  },
  {
    .name = "MediaRecordState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_MEDIARECORDSTATE,
    .cmds = JumpingSumo_MediaRecordState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_MediaRecordState_cmd_tab),
    .comment = "State of media recording"
  },
  {
    .name = "MediaRecordEvent",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_MEDIARECORDEVENT,
    .cmds = JumpingSumo_MediaRecordEvent_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_MediaRecordEvent_cmd_tab),
    .comment = "Events of media recording"
  },
  {
    .name = "NetworkSettings",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_NETWORKSETTINGS,
    .cmds = JumpingSumo_NetworkSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_NetworkSettings_cmd_tab),
    .comment = "Network settings commands"
  },
  {
    .name = "NetworkSettingsState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_NETWORKSETTINGSSTATE,
    .cmds = JumpingSumo_NetworkSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_NetworkSettingsState_cmd_tab),
    .comment = "Network settings state from product"
  },
  {
    .name = "Network",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_NETWORK,
    .cmds = JumpingSumo_Network_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_Network_cmd_tab),
    .comment = "Network related commands"
  },
  {
    .name = "NetworkState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_NETWORKSTATE,
    .cmds = JumpingSumo_NetworkState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_NetworkState_cmd_tab),
    .comment = "Network state from Product"
  },
  {
    .name = "AudioSettings",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_AUDIOSETTINGS,
    .cmds = JumpingSumo_AudioSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_AudioSettings_cmd_tab),
    .comment = "Audio settings."
  },
  {
    .name = "AudioSettingsState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_AUDIOSETTINGSSTATE,
    .cmds = JumpingSumo_AudioSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_AudioSettingsState_cmd_tab),
    .comment = "Audio settings state."
  },
  {
    .name = "RoadPlan",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_ROADPLAN,
    .cmds = JumpingSumo_RoadPlan_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_RoadPlan_cmd_tab),
    .comment = "RoadPlan commands."
  },
  {
    .name = "RoadPlanState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_ROADPLANSTATE,
    .cmds = JumpingSumo_RoadPlanState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_RoadPlanState_cmd_tab),
    .comment = "RoadPlan command responses."
  },
  {
    .name = "SpeedSettings",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_SPEEDSETTINGS,
    .cmds = JumpingSumo_SpeedSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_SpeedSettings_cmd_tab),
    .comment = "Speed Settings commands"
  },
  {
    .name = "SpeedSettingsState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_SPEEDSETTINGSSTATE,
    .cmds = JumpingSumo_SpeedSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_SpeedSettingsState_cmd_tab),
    .comment = "Speed Settings state from product"
  },
  {
    .name = "MediaStreaming",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_MEDIASTREAMING,
    .cmds = JumpingSumo_MediaStreaming_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_MediaStreaming_cmd_tab),
    .comment = "Control media streaming behavior."
  },
  {
    .name = "MediaStreamingState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_MEDIASTREAMINGSTATE,
    .cmds = JumpingSumo_MediaStreamingState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_MediaStreamingState_cmd_tab),
    .comment = "Media streaming status."
  },
  {
    .name = "VideoSettings",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_VIDEOSETTINGS,
    .cmds = JumpingSumo_VideoSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_VideoSettings_cmd_tab),
    .comment = "Video settings."
  },
  {
    .name = "VideoSettingsState",
    .ident = ARCOMMANDS_ID_JUMPINGSUMO_CLASS_VIDEOSETTINGSSTATE,
    .cmds = JumpingSumo_VideoSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(JumpingSumo_VideoSettingsState_cmd_tab),
    .comment = "Video settings state."
  },
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = NULL,
    .ncmds = 0,
    .comment = ""
  },
};
static struct arsdk_arg mapper_defaultCls_grab_arg_tab[] = {
  {
    .name = "buttons",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Buttons to grab/ungrab (bitfield)"
  },
  {
    .name = "axes",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Axes to grab/ungrab (bitfield)"
  },
};
static struct arsdk_arg mapper_defaultCls_map_button_action_arg_tab[] = {
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product (see libARDiscovery for list)"
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The action (mapped on a button)"
  },
  {
    .name = "buttons",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Buttons combination mapped to the action (bitfield).\nSet 0 (no button) to unmap an action"
  },
};
static struct arsdk_arg mapper_defaultCls_map_axis_action_arg_tab[] = {
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product (see libARDiscovery for list)"
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The action (mapped on an axis)"
  },
  {
    .name = "axis",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "The axis number on which the action will be mapped.\nSet a negative value to unmap the action."
  },
  {
    .name = "buttons",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Buttons combination mapped to the action (bitfield).\nCan be zero if no buttons are required."
  },
};
static struct arsdk_arg mapper_defaultCls_reset_mapping_arg_tab[] = {
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "The product to reset, or 0 to reset all products."
  },
};
static struct arsdk_arg mapper_defaultCls_set_expo_arg_tab[] = {
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product (see libARDiscovery for list).\nSet to 0 to apply to all products"
  },
  {
    .name = "axis",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Axis number. Set to -1 to apply to all axes."
  },
  {
    .name = "expo",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Expo type"
  },
};
static struct arsdk_arg mapper_defaultCls_set_inverted_arg_tab[] = {
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product (see libARDiscovery for list).\nSet to 0 to apply to all products"
  },
  {
    .name = "axis",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Axis number"
  },
  {
    .name = "inverted",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0 : Axis not inverted.\n1 : Axis inverted"
  },
};
static struct arsdk_arg mapper_defaultCls_grab_state_arg_tab[] = {
  {
    .name = "buttons",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Grabbed buttons (bitfield)"
  },
  {
    .name = "axes",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Grabbed axes (bitfield)"
  },
  {
    .name = "buttons_state",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "For grabbed buttons only.\nState of the button when the grab starts (bitfield)"
  },
};
static struct arsdk_arg mapper_defaultCls_grab_button_event_arg_tab[] = {
  {
    .name = "button",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Button id"
  },
  {
    .name = "event",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Button event"
  },
};
static struct arsdk_arg mapper_defaultCls_grab_axis_event_arg_tab[] = {
  {
    .name = "axis",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Axis id"
  },
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Value in range [-100; 100]."
  },
};
static struct arsdk_arg mapper_defaultCls_button_mapping_item_arg_tab[] = {
  {
    .name = "uid",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Unique ID of the mapping."
  },
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product (see libARDiscovery for list)"
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The action (mapped on a button)"
  },
  {
    .name = "buttons",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Buttons combination mapped to the action (bitfield)."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg mapper_defaultCls_axis_mapping_item_arg_tab[] = {
  {
    .name = "uid",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Unique ID of the mapping."
  },
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product (see libARDiscovery for list)"
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The action (mapped on an axis)"
  },
  {
    .name = "axis",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "The axis number on which the action is mapped."
  },
  {
    .name = "buttons",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Buttons combination mapped to the action (bitfield)."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg mapper_defaultCls_application_axis_event_arg_tab[] = {
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The action (mapped on an axis)"
  },
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The current value of the axis."
  },
};
static struct arsdk_arg mapper_defaultCls_application_button_event_arg_tab[] = {
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The action (mapped on a button)"
  },
};
static struct arsdk_arg mapper_defaultCls_expo_map_item_arg_tab[] = {
  {
    .name = "uid",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Unique ID (for MAP_ITEM type)"
  },
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product (see libARDiscovery for list)"
  },
  {
    .name = "axis",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Axis number"
  },
  {
    .name = "expo",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Expo type"
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg mapper_defaultCls_inverted_map_item_arg_tab[] = {
  {
    .name = "uid",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Unique ID (for MAP_ITEM type)"
  },
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product (see libARDiscovery for list)"
  },
  {
    .name = "axis",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Axis number"
  },
  {
    .name = "inverted",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0 : Axis not inverted.\n1 : Axis inverted"
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg mapper_defaultCls_active_product_arg_tab[] = {
  {
    .name = "product",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product (see libARDiscovery for list)"
  },
};
static struct arsdk_cmd mapper_defaultCls_cmd_tab[] = {
  {
    .name = "grab",
    .id = ARCOMMANDS_ID_MAPPER_CMD_GRAB,
    .args = mapper_defaultCls_grab_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_grab_arg_tab),
    .comment = "Grab (or ungrab) controls"
  },
  {
    .name = "map_button_action",
    .id = ARCOMMANDS_ID_MAPPER_CMD_MAP_BUTTON_ACTION,
    .args = mapper_defaultCls_map_button_action_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_map_button_action_arg_tab),
    .comment = "Map a button action on one or more buttons"
  },
  {
    .name = "map_axis_action",
    .id = ARCOMMANDS_ID_MAPPER_CMD_MAP_AXIS_ACTION,
    .args = mapper_defaultCls_map_axis_action_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_map_axis_action_arg_tab),
    .comment = "Map an axis action to one axis and zero or more buttons"
  },
  {
    .name = "reset_mapping",
    .id = ARCOMMANDS_ID_MAPPER_CMD_RESET_MAPPING,
    .args = mapper_defaultCls_reset_mapping_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_reset_mapping_arg_tab),
    .comment = "Reset mapping to default values"
  },
  {
    .name = "set_expo",
    .id = ARCOMMANDS_ID_MAPPER_CMD_SET_EXPO,
    .args = mapper_defaultCls_set_expo_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_set_expo_arg_tab),
    .comment = "Set exponential type for the given axis, for the given product"
  },
  {
    .name = "set_inverted",
    .id = ARCOMMANDS_ID_MAPPER_CMD_SET_INVERTED,
    .args = mapper_defaultCls_set_inverted_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_set_inverted_arg_tab),
    .comment = "Set/unset inverted state for a physical axis"
  },
  {
    .name = "grab_state",
    .id = ARCOMMANDS_ID_MAPPER_CMD_GRAB_STATE,
    .args = mapper_defaultCls_grab_state_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_grab_state_arg_tab),
    .comment = "Grabbed controls"
  },
  {
    .name = "grab_button_event",
    .id = ARCOMMANDS_ID_MAPPER_CMD_GRAB_BUTTON_EVENT,
    .args = mapper_defaultCls_grab_button_event_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_grab_button_event_arg_tab),
    .comment = "Event on a grabbed button"
  },
  {
    .name = "grab_axis_event",
    .id = ARCOMMANDS_ID_MAPPER_CMD_GRAB_AXIS_EVENT,
    .args = mapper_defaultCls_grab_axis_event_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_grab_axis_event_arg_tab),
    .comment = "Event on a grabbed axis"
  },
  {
    .name = "button_mapping_item",
    .id = ARCOMMANDS_ID_MAPPER_CMD_BUTTON_MAPPING_ITEM,
    .args = mapper_defaultCls_button_mapping_item_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_button_mapping_item_arg_tab),
    .comment = "Item of the button_actions mapping list"
  },
  {
    .name = "axis_mapping_item",
    .id = ARCOMMANDS_ID_MAPPER_CMD_AXIS_MAPPING_ITEM,
    .args = mapper_defaultCls_axis_mapping_item_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_axis_mapping_item_arg_tab),
    .comment = "Item of the axis_actions mapping list"
  },
  {
    .name = "application_axis_event",
    .id = ARCOMMANDS_ID_MAPPER_CMD_APPLICATION_AXIS_EVENT,
    .args = mapper_defaultCls_application_axis_event_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_application_axis_event_arg_tab),
    .comment = "Application specific event"
  },
  {
    .name = "application_button_event",
    .id = ARCOMMANDS_ID_MAPPER_CMD_APPLICATION_BUTTON_EVENT,
    .args = mapper_defaultCls_application_button_event_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_application_button_event_arg_tab),
    .comment = "Application specific event"
  },
  {
    .name = "expo_map_item",
    .id = ARCOMMANDS_ID_MAPPER_CMD_EXPO_MAP_ITEM,
    .args = mapper_defaultCls_expo_map_item_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_expo_map_item_arg_tab),
    .comment = "Item of the expo map"
  },
  {
    .name = "inverted_map_item",
    .id = ARCOMMANDS_ID_MAPPER_CMD_INVERTED_MAP_ITEM,
    .args = mapper_defaultCls_inverted_map_item_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_inverted_map_item_arg_tab),
    .comment = "Item of the inverted map"
  },
  {
    .name = "active_product",
    .id = ARCOMMANDS_ID_MAPPER_CMD_ACTIVE_PRODUCT,
    .args = mapper_defaultCls_active_product_arg_tab,
    .nargs = ARRAY_SIZE(mapper_defaultCls_active_product_arg_tab),
    .comment = "Active product for the mapper"
  },
};
static struct arsdk_class mapper_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = mapper_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(mapper_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg mapper_mini_defaultCls_map_button_action_arg_tab[] = {
  {
    .name = "modes",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The modes on which the mapping will be set\nThe piloting mode of the product"
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The action (mapped on a button)"
  },
  {
    .name = "buttons",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Buttons combination mapped to the action (bitfield).\nSet 0 (no button) to unmap an action"
  },
};
static struct arsdk_arg mapper_mini_defaultCls_map_axis_action_arg_tab[] = {
  {
    .name = "modes",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The modes on which the mapping will be set\nThe piloting mode of the product"
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The action (mapped on an axis)"
  },
  {
    .name = "axis",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The axis number on which the action will be mapped.\nSet a negative value to unmap the action."
  },
  {
    .name = "buttons",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Buttons combination mapped to the action (bitfield).\nCan be zero if no buttons are required."
  },
};
static struct arsdk_arg mapper_mini_defaultCls_reset_mapping_arg_tab[] = {
  {
    .name = "modes",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The mode(s) to reset.\nThe piloting mode of the product"
  },
};
static struct arsdk_arg mapper_mini_defaultCls_button_mapping_item_arg_tab[] = {
  {
    .name = "uid",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Unique ID of the mapping."
  },
  {
    .name = "modes",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The modes on which the mapping is set\nThe piloting mode of the product"
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The action (mapped on a button)"
  },
  {
    .name = "buttons",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Buttons combination mapped to the action (bitfield)."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg mapper_mini_defaultCls_axis_mapping_item_arg_tab[] = {
  {
    .name = "uid",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Unique ID of the mapping."
  },
  {
    .name = "modes",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The modes on which the mapping is set\nThe piloting mode of the product"
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The action (mapped on an axis)"
  },
  {
    .name = "axis",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The axis number on which the action is mapped."
  },
  {
    .name = "buttons",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Buttons combination mapped to the action (bitfield)."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_cmd mapper_mini_defaultCls_cmd_tab[] = {
  {
    .name = "map_button_action",
    .id = ARCOMMANDS_ID_MAPPER_MINI_CMD_MAP_BUTTON_ACTION,
    .args = mapper_mini_defaultCls_map_button_action_arg_tab,
    .nargs = ARRAY_SIZE(mapper_mini_defaultCls_map_button_action_arg_tab),
    .comment = "Map a button action on one or more buttons"
  },
  {
    .name = "map_axis_action",
    .id = ARCOMMANDS_ID_MAPPER_MINI_CMD_MAP_AXIS_ACTION,
    .args = mapper_mini_defaultCls_map_axis_action_arg_tab,
    .nargs = ARRAY_SIZE(mapper_mini_defaultCls_map_axis_action_arg_tab),
    .comment = "Map an axis action to one axis and zero or more buttons"
  },
  {
    .name = "reset_mapping",
    .id = ARCOMMANDS_ID_MAPPER_MINI_CMD_RESET_MAPPING,
    .args = mapper_mini_defaultCls_reset_mapping_arg_tab,
    .nargs = ARRAY_SIZE(mapper_mini_defaultCls_reset_mapping_arg_tab),
    .comment = "Reset mapping to default values"
  },
  {
    .name = "button_mapping_item",
    .id = ARCOMMANDS_ID_MAPPER_MINI_CMD_BUTTON_MAPPING_ITEM,
    .args = mapper_mini_defaultCls_button_mapping_item_arg_tab,
    .nargs = ARRAY_SIZE(mapper_mini_defaultCls_button_mapping_item_arg_tab),
    .comment = "Item of the button_actions mapping list"
  },
  {
    .name = "axis_mapping_item",
    .id = ARCOMMANDS_ID_MAPPER_MINI_CMD_AXIS_MAPPING_ITEM,
    .args = mapper_mini_defaultCls_axis_mapping_item_arg_tab,
    .nargs = ARRAY_SIZE(mapper_mini_defaultCls_axis_mapping_item_arg_tab),
    .comment = "Item of the axis_actions mapping list"
  },
};
static struct arsdk_class mapper_mini_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = mapper_mini_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(mapper_mini_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg MiniDrone_Piloting_PCMD_arg_tab[] = {
  {
    .name = "flag",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Boolean flag to activate roll/pitch movement"
  },
  {
    .name = "roll",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Roll consign for the MiniDrone [-100;100]"
  },
  {
    .name = "pitch",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pitch consign for the MiniDrone [-100;100]"
  },
  {
    .name = "yaw",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Yaw consign for the MiniDrone [-100;100]"
  },
  {
    .name = "gaz",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Gaz consign for the MiniDrone [-100;100]"
  },
  {
    .name = "timestamp",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Timestamp in miliseconds. Not an absolute time. (Typically 0 = time of connexion)."
  },
};
static struct arsdk_arg MiniDrone_Piloting_AutoTakeOffMode_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of automatic take off mode"
  },
};
static struct arsdk_enum MiniDrone_Piloting_FlyingMode_mode_enum_tab[] = {
  {
    .name = "quadricopter",
    .value = ARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE_QUADRICOPTER,
    .comment = "Fly as a quadrictopter"
  },
  {
    .name = "plane_forward",
    .value = ARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE_PLANE_FORWARD,
    .comment = "Fly as a plane in forward mode"
  },
  {
    .name = "plane_backward",
    .value = ARCOMMANDS_MINIDRONE_PILOTING_FLYINGMODE_MODE_PLANE_BACKWARD,
    .comment = "Fly as a plane in backward mode"
  },
};
static struct arsdk_arg MiniDrone_Piloting_FlyingMode_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_Piloting_FlyingMode_mode_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_Piloting_FlyingMode_mode_enum_tab),
    .comment = "Drone Flying Mode"
  },
};
static struct arsdk_enum MiniDrone_Piloting_PlaneGearBox_state_enum_tab[] = {
  {
    .name = "gear_1",
    .value = ARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE_GEAR_1,
    .comment = "Gear 1. Low speed"
  },
  {
    .name = "gear_2",
    .value = ARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE_GEAR_2,
    .comment = "Gear 2. Middle speed"
  },
  {
    .name = "gear_3",
    .value = ARCOMMANDS_MINIDRONE_PILOTING_PLANEGEARBOX_STATE_GEAR_3,
    .comment = "Gear 3. High speed"
  },
};
static struct arsdk_arg MiniDrone_Piloting_PlaneGearBox_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_Piloting_PlaneGearBox_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_Piloting_PlaneGearBox_state_enum_tab),
    .comment = "Plane Gear Box"
  },
};
static struct arsdk_enum MiniDrone_Animations_Flip_direction_enum_tab[] = {
  {
    .name = "front",
    .value = ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_FRONT,
    .comment = "Flip direction front"
  },
  {
    .name = "back",
    .value = ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_BACK,
    .comment = "Flip direction back"
  },
  {
    .name = "right",
    .value = ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_RIGHT,
    .comment = "Flip direction right"
  },
  {
    .name = "left",
    .value = ARCOMMANDS_MINIDRONE_ANIMATIONS_FLIP_DIRECTION_LEFT,
    .comment = "Flip direction left"
  },
};
static struct arsdk_arg MiniDrone_Animations_Flip_arg_tab[] = {
  {
    .name = "direction",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_Animations_Flip_direction_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_Animations_Flip_direction_enum_tab),
    .comment = "Direction for the flip"
  },
};
static struct arsdk_arg MiniDrone_Animations_Cap_arg_tab[] = {
  {
    .name = "offset",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Change the cap with offset angle [-180;180]"
  },
};
static struct arsdk_arg MiniDrone_MediaRecord_Picture_arg_tab[] = {
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id to take picture"
  },
};
static struct arsdk_arg MiniDrone_PilotingSettings_MaxAltitude_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current altitude max in m"
  },
};
static struct arsdk_arg MiniDrone_PilotingSettings_MaxTilt_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current tilt max in degree"
  },
};
static struct arsdk_arg MiniDrone_PilotingSettings_BankedTurn_arg_tab[] = {
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 to enable, 0 to disable"
  },
};
static struct arsdk_arg MiniDrone_PilotingSettings_MaxThrottle_arg_tab[] = {
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Max throttle, between 0 and 1."
  },
};
static struct arsdk_enum MiniDrone_PilotingSettings_PreferredPilotingMode_mode_enum_tab[] = {
  {
    .name = "easy",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE_EASY,
    .comment = "The flight envelope of Mambo FPV has been divided in three piloting modes.\nThe first one corresponds to the well-known flying mode currently used for\nMambo, which is based in an horizontal stabilisation (performed via the\nvertical camera and the acceleration information) and a vertical acceleration\n(by means of the ultrasound, the barometer and the vertical accelerometer) in\norder for the drone to stay in fixed point position when no piloting commands\nare sent by the user."
  },
  {
    .name = "medium",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE_MEDIUM,
    .comment = "The second piloting mode consists of deactivating the horizontal stabilisation.\nThus, in this flying mode, when no piloting command is received, the drone will\ntry to stay at 0° tilt angle instead of responding to a 0 m/s horizontal speed\nreference. This behaviour will result in a slight horizontal drift."
  },
  {
    .name = "difficult",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSETTINGS_PREFERREDPILOTINGMODE_MODE_DIFFICULT,
    .comment = "The third piloting mode also adds the vertical stabilisation deactivation and,\ntherefore, a slight vertical drift. When flying in the third mode, a closed\nloop height control is no longer performed in order for the drone to keep a\ncertain height and vertical speed. Instead, the vertical command coming from\nthe user will directly generate an open loop acceleration command."
  },
};
static struct arsdk_arg MiniDrone_PilotingSettings_PreferredPilotingMode_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_PilotingSettings_PreferredPilotingMode_mode_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_PilotingSettings_PreferredPilotingMode_mode_enum_tab),
    .comment = "Piloting modes."
  },
};
static struct arsdk_arg MiniDrone_SpeedSettings_MaxVerticalSpeed_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max vertical speed in m/s"
  },
};
static struct arsdk_arg MiniDrone_SpeedSettings_MaxRotationSpeed_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max rotation speed in degree/s"
  },
};
static struct arsdk_arg MiniDrone_SpeedSettings_Wheels_arg_tab[] = {
  {
    .name = "present",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if present, 0 if not present"
  },
};
static struct arsdk_arg MiniDrone_SpeedSettings_MaxHorizontalSpeed_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max Horizontal speed in m/s"
  },
};
static struct arsdk_arg MiniDrone_SpeedSettings_MaxPlaneModeRotationSpeed_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max plane mode rotation speed in degree/s"
  },
};
static struct arsdk_arg MiniDrone_Settings_CutOutMode_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Enable cut out mode (1 if is activate, 0 otherwise)"
  },
};
static struct arsdk_arg MiniDrone_GPS_ControllerLatitudeForRun_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Controller latitude in decimal degrees"
  },
};
static struct arsdk_arg MiniDrone_GPS_ControllerLongitudeForRun_arg_tab[] = {
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Controller longitude in decimal degrees"
  },
};
static struct arsdk_arg MiniDrone_Configuration_ControllerType_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Controller type like iOS or Android"
  },
};
static struct arsdk_arg MiniDrone_Configuration_ControllerName_arg_tab[] = {
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Controller name like com.parrot.freeflight3"
  },
};
static struct arsdk_enum MiniDrone_UsbAccessory_LightControl_mode_enum_tab[] = {
  {
    .name = "FIXED",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE_FIXED,
    .comment = "Turn light in fixed state at a given intensity."
  },
  {
    .name = "BLINKED",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE_BLINKED,
    .comment = "Turn light in blinked state."
  },
  {
    .name = "OSCILLATED",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORY_LIGHTCONTROL_MODE_OSCILLATED,
    .comment = "Turn light in oscillated state."
  },
};
static struct arsdk_arg MiniDrone_UsbAccessory_LightControl_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Usb accessory id"
  },
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_UsbAccessory_LightControl_mode_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_UsbAccessory_LightControl_mode_enum_tab),
    .comment = "Usb Light mode."
  },
  {
    .name = "intensity",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Light intensity from 0 (OFF) to 100 (Max intensity).\nOnly used in FIXED mode."
  },
};
static struct arsdk_enum MiniDrone_UsbAccessory_ClawControl_action_enum_tab[] = {
  {
    .name = "OPEN",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORY_CLAWCONTROL_ACTION_OPEN,
    .comment = "Open Claw."
  },
  {
    .name = "CLOSE",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORY_CLAWCONTROL_ACTION_CLOSE,
    .comment = "Close Claw."
  },
};
static struct arsdk_arg MiniDrone_UsbAccessory_ClawControl_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Usb accessory id."
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_UsbAccessory_ClawControl_action_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_UsbAccessory_ClawControl_action_enum_tab),
    .comment = "USB Claw action."
  },
};
static struct arsdk_enum MiniDrone_UsbAccessory_GunControl_action_enum_tab[] = {
  {
    .name = "FIRE",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORY_GUNCONTROL_ACTION_FIRE,
    .comment = "Fire."
  },
};
static struct arsdk_arg MiniDrone_UsbAccessory_GunControl_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Usb accessory id"
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_UsbAccessory_GunControl_action_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_UsbAccessory_GunControl_action_enum_tab),
    .comment = "USB Gun action."
  },
};
static struct arsdk_arg MiniDrone_RemoteController_SetPairedRemote_arg_tab[] = {
  {
    .name = "msb_mac",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "2 most significant bytes of mac address"
  },
  {
    .name = "mid_mac",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "2 middle bytes of mac address"
  },
  {
    .name = "lsb_mac",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "2 least significant bytes of mac address"
  },
};
static struct arsdk_arg MiniDrone_VideoSettings_Autorecord_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0: disabled\n1: enabled"
  },
};
static struct arsdk_enum MiniDrone_VideoSettings_ElectricFrequency_frequency_enum_tab[] = {
  {
    .name = "fifty_hertz",
    .value = ARCOMMANDS_MINIDRONE_VIDEOSETTINGS_ELECTRICFREQUENCY_FREQUENCY_FIFTY_HERTZ,
    .comment = "Electric frequency of the country is 50hz."
  },
  {
    .name = "sixty_hertz",
    .value = ARCOMMANDS_MINIDRONE_VIDEOSETTINGS_ELECTRICFREQUENCY_FREQUENCY_SIXTY_HERTZ,
    .comment = "Electric frequency of the country is 60hz."
  },
};
static struct arsdk_arg MiniDrone_VideoSettings_ElectricFrequency_arg_tab[] = {
  {
    .name = "frequency",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_VideoSettings_ElectricFrequency_frequency_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_VideoSettings_ElectricFrequency_frequency_enum_tab),
    .comment = "Type of the electric frequency."
  },
};
static struct arsdk_enum MiniDrone_VideoSettings_VideoResolution_type_enum_tab[] = {
  {
    .name = "vga",
    .value = ARCOMMANDS_MINIDRONE_VIDEOSETTINGS_VIDEORESOLUTION_TYPE_VGA,
    .comment = "16/9 VGA streaming (640 x 360)."
  },
  {
    .name = "hd",
    .value = ARCOMMANDS_MINIDRONE_VIDEOSETTINGS_VIDEORESOLUTION_TYPE_HD,
    .comment = "HD streaming (1280 x 720)."
  },
};
static struct arsdk_arg MiniDrone_VideoSettings_VideoResolution_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_VideoSettings_VideoResolution_type_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_VideoSettings_VideoResolution_type_enum_tab),
    .comment = "Video resolution type."
  },
};
static struct arsdk_enum MiniDrone_Minicam_Video_record_enum_tab[] = {
  {
    .name = "stop",
    .value = ARCOMMANDS_MINIDRONE_MINICAM_VIDEO_RECORD_STOP,
    .comment = "Stop the video recording."
  },
  {
    .name = "start",
    .value = ARCOMMANDS_MINIDRONE_MINICAM_VIDEO_RECORD_START,
    .comment = "Start the video recording."
  },
};
static struct arsdk_arg MiniDrone_Minicam_Video_arg_tab[] = {
  {
    .name = "record",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_Minicam_Video_record_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_Minicam_Video_record_enum_tab),
    .comment = "Command to record video"
  },
};
static struct arsdk_enum MiniDrone_PilotingState_FlyingStateChanged_state_enum_tab[] = {
  {
    .name = "landed",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDED,
    .comment = "Landed state"
  },
  {
    .name = "takingoff",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_TAKINGOFF,
    .comment = "Taking off state"
  },
  {
    .name = "hovering",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_HOVERING,
    .comment = "Hovering state"
  },
  {
    .name = "flying",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_FLYING,
    .comment = "Flying state"
  },
  {
    .name = "landing",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDING,
    .comment = "Landing state"
  },
  {
    .name = "emergency",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY,
    .comment = "Emergency state"
  },
  {
    .name = "rolling",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_ROLLING,
    .comment = "Rolling state"
  },
  {
    .name = "init",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_INIT,
    .comment = "Initializing state (user should let the drone steady for a while)"
  },
};
static struct arsdk_arg MiniDrone_PilotingState_FlyingStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_PilotingState_FlyingStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_PilotingState_FlyingStateChanged_state_enum_tab),
    .comment = "Drone flying state"
  },
};
static struct arsdk_enum MiniDrone_PilotingState_AlertStateChanged_state_enum_tab[] = {
  {
    .name = "none",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE,
    .comment = "No alert"
  },
  {
    .name = "user",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_USER,
    .comment = "User emergency alert"
  },
  {
    .name = "cut_out",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CUT_OUT,
    .comment = "Cut out alert"
  },
  {
    .name = "critical_battery",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY,
    .comment = "Critical battery alert"
  },
  {
    .name = "low_battery",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY,
    .comment = "Low battery alert"
  },
};
static struct arsdk_arg MiniDrone_PilotingState_AlertStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_PilotingState_AlertStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_PilotingState_AlertStateChanged_state_enum_tab),
    .comment = "Drone alert state"
  },
};
static struct arsdk_arg MiniDrone_PilotingState_AutoTakeOffModeChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of automatic take off mode"
  },
};
static struct arsdk_enum MiniDrone_PilotingState_FlyingModeChanged_mode_enum_tab[] = {
  {
    .name = "quadricopter",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE_QUADRICOPTER,
    .comment = "Fly as a quadrictopter"
  },
  {
    .name = "plane_forward",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE_PLANE_FORWARD,
    .comment = "Fly as a plane in forward mode"
  },
  {
    .name = "plane_backward",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_FLYINGMODECHANGED_MODE_PLANE_BACKWARD,
    .comment = "Fly as a plane in backward mode"
  },
};
static struct arsdk_arg MiniDrone_PilotingState_FlyingModeChanged_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_PilotingState_FlyingModeChanged_mode_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_PilotingState_FlyingModeChanged_mode_enum_tab),
    .comment = "Drone Flying Mode"
  },
};
static struct arsdk_enum MiniDrone_PilotingState_PlaneGearBoxChanged_state_enum_tab[] = {
  {
    .name = "gear_1",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE_GEAR_1,
    .comment = "Gear 1. Low speed"
  },
  {
    .name = "gear_2",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE_GEAR_2,
    .comment = "Gear 2. Middle speed"
  },
  {
    .name = "gear_3",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PLANEGEARBOXCHANGED_STATE_GEAR_3,
    .comment = "Gear 3. High speed"
  },
};
static struct arsdk_arg MiniDrone_PilotingState_PlaneGearBoxChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_PilotingState_PlaneGearBoxChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_PilotingState_PlaneGearBoxChanged_state_enum_tab),
    .comment = "Plane Gear Box"
  },
};
static struct arsdk_enum MiniDrone_PilotingState_PilotingModeChanged_mode_enum_tab[] = {
  {
    .name = "easy",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE_EASY,
    .comment = "The flight envelope of Mambo FPV has been divided in three piloting modes.\nThe first one corresponds to the well-known flying mode currently used for\nMambo, which is based in an horizontal stabilisation (performed via the\nvertical camera and the acceleration information) and a vertical acceleration\n(by means of the ultrasound, the barometer and the vertical accelerometer) in\norder for the drone to stay in fixed point position when no piloting commands\nare sent by the user."
  },
  {
    .name = "medium",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE_MEDIUM,
    .comment = "The second piloting mode consists of deactivating the horizontal stabilisation.\nThus, in this flying mode, when no piloting command is received, the drone will\ntry to stay at 0° tilt angle instead of responding to a 0 m/s horizontal speed\nreference. This behaviour will result in a slight horizontal drift."
  },
  {
    .name = "difficult",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSTATE_PILOTINGMODECHANGED_MODE_DIFFICULT,
    .comment = "The third piloting mode also adds the vertical stabilisation deactivation and,\ntherefore, a slight vertical drift. When flying in the third mode, a closed\nloop height control is no longer performed in order for the drone to keep a\ncertain height and vertical speed. Instead, the vertical command coming from\nthe user will directly generate an open loop acceleration command."
  },
};
static struct arsdk_arg MiniDrone_PilotingState_PilotingModeChanged_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_PilotingState_PilotingModeChanged_mode_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_PilotingState_PilotingModeChanged_mode_enum_tab),
    .comment = ""
  },
};
static struct arsdk_arg MiniDrone_MediaRecordState_PictureStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if picture has been taken, 0 otherwise"
  },
  {
    .name = "mass_storage_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Mass storage id to record"
  },
};
static struct arsdk_enum MiniDrone_MediaRecordState_PictureStateChangedV2_state_enum_tab[] = {
  {
    .name = "ready",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY,
    .comment = "The picture recording is ready"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY,
    .comment = "The picture recording is busy"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE,
    .comment = "The picture recording is not available"
  },
};
static struct arsdk_enum MiniDrone_MediaRecordState_PictureStateChangedV2_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN,
    .comment = "Unknown generic error"
  },
  {
    .name = "camera_ko",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO,
    .comment = "Picture camera is out of order"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL,
    .comment = "Memory full ; cannot save one additional picture"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY,
    .comment = "Battery is too low to start/keep recording."
  },
};
static struct arsdk_arg MiniDrone_MediaRecordState_PictureStateChangedV2_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_MediaRecordState_PictureStateChangedV2_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_MediaRecordState_PictureStateChangedV2_state_enum_tab),
    .comment = "State of device picture recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_MediaRecordState_PictureStateChangedV2_error_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_MediaRecordState_PictureStateChangedV2_error_enum_tab),
    .comment = "Error to explain the state"
  },
};
static struct arsdk_enum MiniDrone_MediaRecordEvent_PictureEventChanged_event_enum_tab[] = {
  {
    .name = "taken",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN,
    .comment = "Picture taken and saved"
  },
  {
    .name = "failed",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED,
    .comment = "Picture failed"
  },
};
static struct arsdk_enum MiniDrone_MediaRecordEvent_PictureEventChanged_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN,
    .comment = "Unknown generic error ; only when state is failed"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY,
    .comment = "Picture recording is busy ; only when state is failed"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE,
    .comment = "Picture recording not available ; only when state is failed"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL,
    .comment = "Memory full ; only when state is failed"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_MINIDRONE_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY,
    .comment = "Battery is too low to record."
  },
};
static struct arsdk_arg MiniDrone_MediaRecordEvent_PictureEventChanged_arg_tab[] = {
  {
    .name = "event",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_MediaRecordEvent_PictureEventChanged_event_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_MediaRecordEvent_PictureEventChanged_event_enum_tab),
    .comment = "Last event of picture recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_MediaRecordEvent_PictureEventChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_MediaRecordEvent_PictureEventChanged_error_enum_tab),
    .comment = "Error to explain the event"
  },
};
static struct arsdk_arg MiniDrone_PilotingSettingsState_MaxAltitudeChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current altitude max"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of altitude"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of altitude"
  },
};
static struct arsdk_arg MiniDrone_PilotingSettingsState_MaxTiltChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max tilt"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of tilt"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of tilt"
  },
};
static struct arsdk_arg MiniDrone_PilotingSettingsState_BankedTurnChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if enabled, 0 if disabled"
  },
};
static struct arsdk_arg MiniDrone_PilotingSettingsState_MaxThrottleChanged_arg_tab[] = {
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Max throttle, between 0 and 1."
  },
};
static struct arsdk_enum MiniDrone_PilotingSettingsState_PreferredPilotingModeChanged_mode_enum_tab[] = {
  {
    .name = "easy",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE_EASY,
    .comment = "The flight envelope of Mambo FPV has been divided in three piloting modes.\nThe first one corresponds to the well-known flying mode currently used for\nMambo, which is based in an horizontal stabilisation (performed via the\nvertical camera and the acceleration information) and a vertical acceleration\n(by means of the ultrasound, the barometer and the vertical accelerometer) in\norder for the drone to stay in fixed point position when no piloting commands\nare sent by the user."
  },
  {
    .name = "medium",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE_MEDIUM,
    .comment = "The second piloting mode consists of deactivating the horizontal stabilisation.\nThus, in this flying mode, when no piloting command is received, the drone will\ntry to stay at 0° tilt angle instead of responding to a 0 m/s horizontal speed\nreference. This behaviour will result in a slight horizontal drift."
  },
  {
    .name = "difficult",
    .value = ARCOMMANDS_MINIDRONE_PILOTINGSETTINGSSTATE_PREFERREDPILOTINGMODECHANGED_MODE_DIFFICULT,
    .comment = "The third piloting mode also adds the vertical stabilisation deactivation and,\ntherefore, a slight vertical drift. When flying in the third mode, a closed\nloop height control is no longer performed in order for the drone to keep a\ncertain height and vertical speed. Instead, the vertical command coming from\nthe user will directly generate an open loop acceleration command."
  },
};
static struct arsdk_arg MiniDrone_PilotingSettingsState_PreferredPilotingModeChanged_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_PilotingSettingsState_PreferredPilotingModeChanged_mode_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_PilotingSettingsState_PreferredPilotingModeChanged_mode_enum_tab),
    .comment = ""
  },
};
static struct arsdk_arg MiniDrone_SpeedSettingsState_MaxVerticalSpeedChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max vertical speed in m/s"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of vertical speed"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of vertical speed"
  },
};
static struct arsdk_arg MiniDrone_SpeedSettingsState_MaxRotationSpeedChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max rotation speed in degree/s"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of rotation speed"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of rotation speed"
  },
};
static struct arsdk_arg MiniDrone_SpeedSettingsState_WheelsChanged_arg_tab[] = {
  {
    .name = "present",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if present, 0 if not present"
  },
};
static struct arsdk_arg MiniDrone_SpeedSettingsState_MaxHorizontalSpeedChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max horizontal speed in m/s"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of horizontal speed"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of horizontal speed"
  },
};
static struct arsdk_arg MiniDrone_SpeedSettingsState_MaxPlaneModeRotationSpeedChanged_arg_tab[] = {
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current max plane mode rotation speed in degree/s"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range min of plane mode rotation speed"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Range max of plane mode rotation speed"
  },
};
static struct arsdk_arg MiniDrone_SettingsState_ProductMotorsVersionChanged_arg_tab[] = {
  {
    .name = "motor",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product Motor number [1 - 4]"
  },
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product Motor type"
  },
  {
    .name = "software",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product Motors software version"
  },
  {
    .name = "hardware",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product Motors hardware version"
  },
};
static struct arsdk_arg MiniDrone_SettingsState_ProductInertialVersionChanged_arg_tab[] = {
  {
    .name = "software",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product Inertial software version"
  },
  {
    .name = "hardware",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product Inertial hardware version"
  },
};
static struct arsdk_arg MiniDrone_SettingsState_CutOutModeChanged_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of cut out mode (1 if is activate, 0 otherwise)"
  },
};
static struct arsdk_arg MiniDrone_FloodControlState_FloodControlChanged_arg_tab[] = {
  {
    .name = "delay",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Delay (in ms) between two PCMD"
  },
};
static struct arsdk_enum MiniDrone_UsbAccessoryState_LightState_state_enum_tab[] = {
  {
    .name = "FIXED",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE_FIXED,
    .comment = "Fixed state at given intensity."
  },
  {
    .name = "BLINKED",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE_BLINKED,
    .comment = "Blinked state."
  },
  {
    .name = "OSCILLATED",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_LIGHTSTATE_STATE_OSCILLATED,
    .comment = "Oscillated state."
  },
};
static struct arsdk_arg MiniDrone_UsbAccessoryState_LightState_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Usb accessory id"
  },
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_UsbAccessoryState_LightState_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_UsbAccessoryState_LightState_state_enum_tab),
    .comment = "Usb Light state."
  },
  {
    .name = "intensity",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Light intensity from 0 (OFF) to 100 (Max intensity).\nOnly used in FIXED state."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list."
  },
};
static struct arsdk_enum MiniDrone_UsbAccessoryState_ClawState_state_enum_tab[] = {
  {
    .name = "OPENED",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE_OPENED,
    .comment = "Claw is fully opened."
  },
  {
    .name = "OPENING",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE_OPENING,
    .comment = "Claw open in progress."
  },
  {
    .name = "CLOSED",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE_CLOSED,
    .comment = "Claw is fully closed."
  },
  {
    .name = "CLOSING",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_CLAWSTATE_STATE_CLOSING,
    .comment = "Claw close in progress."
  },
};
static struct arsdk_arg MiniDrone_UsbAccessoryState_ClawState_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Usb accessory id"
  },
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_UsbAccessoryState_ClawState_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_UsbAccessoryState_ClawState_state_enum_tab),
    .comment = "Usb Claw state."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list."
  },
};
static struct arsdk_enum MiniDrone_UsbAccessoryState_GunState_state_enum_tab[] = {
  {
    .name = "READY",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE_READY,
    .comment = "Gun is ready to fire."
  },
  {
    .name = "BUSY",
    .value = ARCOMMANDS_MINIDRONE_USBACCESSORYSTATE_GUNSTATE_STATE_BUSY,
    .comment = "Gun is busy (ie not ready to fire)."
  },
};
static struct arsdk_arg MiniDrone_UsbAccessoryState_GunState_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Usb accessory id."
  },
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_UsbAccessoryState_GunState_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_UsbAccessoryState_GunState_state_enum_tab),
    .comment = "USB Claw state."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list."
  },
};
static struct arsdk_arg MiniDrone_NavigationDataState_DronePosition_arg_tab[] = {
  {
    .name = "posx",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Position on X axis, relative to take off position (cm)."
  },
  {
    .name = "posy",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Position on Y axis, relative to take off position (cm)."
  },
  {
    .name = "posz",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Position on Z axis, relative to take off position (cm)."
  },
  {
    .name = "psi",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Psi angle [-180; 180], relative to take off orientation."
  },
  {
    .name = "ts",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Time elapsed since last data send (ms)."
  },
};
static struct arsdk_arg MiniDrone_NavigationDataState_DroneSpeed_arg_tab[] = {
  {
    .name = "speed_x",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed on the x axis (when drone moves forward, speed is > 0)."
  },
  {
    .name = "speed_y",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed on the y axis (when drone moves right, speed is > 0)."
  },
  {
    .name = "speed_z",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Speed on the z axis (when drone moves down, speed is > 0)."
  },
  {
    .name = "ts",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Acquisition timestamp (ms)."
  },
};
static struct arsdk_arg MiniDrone_NavigationDataState_DroneAltitude_arg_tab[] = {
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude in meters."
  },
  {
    .name = "ts",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Acquisition timestamp (ms)."
  },
};
static struct arsdk_arg MiniDrone_NavigationDataState_DroneQuaternion_arg_tab[] = {
  {
    .name = "q_w",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Element w."
  },
  {
    .name = "q_x",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Element x."
  },
  {
    .name = "q_y",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Element y."
  },
  {
    .name = "q_z",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Element z."
  },
  {
    .name = "ts",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Acquisition timestamp (ms)."
  },
};
static struct arsdk_enum MiniDrone_MinicamState_PowerModeChanged_power_mode_enum_tab[] = {
  {
    .name = "low",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE_LOW,
    .comment = "Low power: most hardware is powered off, wake up via USB resume.\n\nUsed when charging."
  },
  {
    .name = "medium",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE_MEDIUM,
    .comment = "Medium power: video hardware is powered off.\n\nUsed when drone is not flying during more than 3 minutes.\nNote that it can still stream the SD content."
  },
  {
    .name = "normal",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_POWERMODECHANGED_POWER_MODE_NORMAL,
    .comment = "Normal power: all features are available.\n\nUsed when flying."
  },
};
static struct arsdk_arg MiniDrone_MinicamState_PowerModeChanged_arg_tab[] = {
  {
    .name = "power_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_MinicamState_PowerModeChanged_power_mode_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_MinicamState_PowerModeChanged_power_mode_enum_tab),
    .comment = "Power mode of the camera."
  },
};
static struct arsdk_arg MiniDrone_MinicamState_ProductSerialChanged_arg_tab[] = {
  {
    .name = "serial_number",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial number."
  },
};
static struct arsdk_enum MiniDrone_MinicamState_StateChanged_state_enum_tab[] = {
  {
    .name = "unplugged",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE_UNPLUGGED,
    .comment = "Minicam is unplugged."
  },
  {
    .name = "plugged",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE_PLUGGED,
    .comment = "Minicam is plugged, but not ready."
  },
  {
    .name = "ready",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_STATECHANGED_STATE_READY,
    .comment = "Minicam is ready."
  },
};
static struct arsdk_arg MiniDrone_MinicamState_StateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_MinicamState_StateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_MinicamState_StateChanged_state_enum_tab),
    .comment = "State of the camera."
  },
};
static struct arsdk_arg MiniDrone_MinicamState_VersionChanged_arg_tab[] = {
  {
    .name = "software",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Accessory software version."
  },
  {
    .name = "hardware",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Accessory hardware version."
  },
};
static struct arsdk_enum MiniDrone_MinicamState_PictureChanged_state_enum_tab[] = {
  {
    .name = "ready",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE_READY,
    .comment = "Picture recording is ready."
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE_BUSY,
    .comment = "Picture recording is busy."
  },
  {
    .name = "not_available",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_STATE_NOT_AVAILABLE,
    .comment = "Picture recording is not available."
  },
};
static struct arsdk_enum MiniDrone_MinicamState_PictureChanged_result_enum_tab[] = {
  {
    .name = "success",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_SUCCESS,
    .comment = "Success."
  },
  {
    .name = "full_device",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_FULL_DEVICE,
    .comment = "Device is full."
  },
  {
    .name = "continuous_shooting",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_CONTINUOUS_SHOOTING,
    .comment = "Continuous shooting is already running."
  },
  {
    .name = "full_queue",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_FULL_QUEUE,
    .comment = "Over snapshot max queue size."
  },
  {
    .name = "error",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_ERROR,
    .comment = "Couldn't take picture."
  },
  {
    .name = "no_sd",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_NO_SD,
    .comment = "SD card doesn't exist."
  },
  {
    .name = "sd_bad_format",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_SD_BAD_FORMAT,
    .comment = "SD card format error."
  },
  {
    .name = "sd_formatting",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_PICTURECHANGED_RESULT_SD_FORMATTING,
    .comment = "SD card is formatting."
  },
};
static struct arsdk_arg MiniDrone_MinicamState_PictureChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_MinicamState_PictureChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_MinicamState_PictureChanged_state_enum_tab),
    .comment = "State of device picture recording."
  },
  {
    .name = "result",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_MinicamState_PictureChanged_result_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_MinicamState_PictureChanged_result_enum_tab),
    .comment = "Result of device picture recording."
  },
};
static struct arsdk_enum MiniDrone_MinicamState_VideoStateChanged_state_enum_tab[] = {
  {
    .name = "stopped",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE_STOPPED,
    .comment = "Video is stopped."
  },
  {
    .name = "started",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE_STARTED,
    .comment = "Video is started."
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_STATE_NOTAVAILABLE,
    .comment = "The video recording is not available."
  },
};
static struct arsdk_enum MiniDrone_MinicamState_VideoStateChanged_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_OK,
    .comment = "No Error."
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_UNKNOWN,
    .comment = "Unknown generic error."
  },
  {
    .name = "camera_ko",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_CAMERA_KO,
    .comment = "Video camera is out of order."
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_MEMORYFULL,
    .comment = "Memory full ; cannot save one additional video."
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_LOWBATTERY,
    .comment = "Battery is too low to start/keep recording."
  },
  {
    .name = "no_sd",
    .value = ARCOMMANDS_MINIDRONE_MINICAMSTATE_VIDEOSTATECHANGED_ERROR_NO_SD,
    .comment = "SD card doesn't exist."
  },
};
static struct arsdk_arg MiniDrone_MinicamState_VideoStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_MinicamState_VideoStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_MinicamState_VideoStateChanged_state_enum_tab),
    .comment = "State of device video recording."
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_MinicamState_VideoStateChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_MinicamState_VideoStateChanged_error_enum_tab),
    .comment = "Error to explain the state."
  },
};
static struct arsdk_arg MiniDrone_MinicamState_MassStorageFormatChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if Mass Storage has been formatted, 0 otherwise."
  },
};
static struct arsdk_arg MiniDrone_VideoSettingsState_AutorecordChanged_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0: disabled\n1: enabled"
  },
};
static struct arsdk_enum MiniDrone_VideoSettingsState_ElectricFrequencyChanged_frequency_enum_tab[] = {
  {
    .name = "fifty_hertz",
    .value = ARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_FIFTY_HERTZ,
    .comment = "Electric frequency of the country is 50hz."
  },
  {
    .name = "sixty_hertz",
    .value = ARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_ELECTRICFREQUENCYCHANGED_FREQUENCY_SIXTY_HERTZ,
    .comment = "Electric frequency of the country is 60hz."
  },
};
static struct arsdk_arg MiniDrone_VideoSettingsState_ElectricFrequencyChanged_arg_tab[] = {
  {
    .name = "frequency",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_VideoSettingsState_ElectricFrequencyChanged_frequency_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_VideoSettingsState_ElectricFrequencyChanged_frequency_enum_tab),
    .comment = "Type of the electric frequency."
  },
};
static struct arsdk_enum MiniDrone_VideoSettingsState_VideoResolutionChanged_type_enum_tab[] = {
  {
    .name = "vga",
    .value = ARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_VIDEORESOLUTIONCHANGED_TYPE_VGA,
    .comment = "16/9 VGA streaming (640 x 360)."
  },
  {
    .name = "hd",
    .value = ARCOMMANDS_MINIDRONE_VIDEOSETTINGSSTATE_VIDEORESOLUTIONCHANGED_TYPE_HD,
    .comment = "HD streaming (1280 x 720)."
  },
};
static struct arsdk_arg MiniDrone_VideoSettingsState_VideoResolutionChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = MiniDrone_VideoSettingsState_VideoResolutionChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(MiniDrone_VideoSettingsState_VideoResolutionChanged_type_enum_tab),
    .comment = "Video resolution type."
  },
};
static struct arsdk_arg MiniDrone_RemoteControllerState_ConnectionChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "New connection state.\n0=disconnected\n1=connected"
  },
};
static struct arsdk_cmd MiniDrone_Piloting_cmd_tab[] = {
  {
    .name = "FlatTrim",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTING_CMD_FLATTRIM,
    .args = NULL,
    .nargs = 0,
    .comment = "Do a flat trim"
  },
  {
    .name = "TakeOff",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTING_CMD_TAKEOFF,
    .args = NULL,
    .nargs = 0,
    .comment = "Ask the drone to take off"
  },
  {
    .name = "PCMD",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTING_CMD_PCMD,
    .args = MiniDrone_Piloting_PCMD_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_Piloting_PCMD_arg_tab),
    .comment = "Ask the drone to move around."
  },
  {
    .name = "Landing",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTING_CMD_LANDING,
    .args = NULL,
    .nargs = 0,
    .comment = "Ask the MiniDrone to land"
  },
  {
    .name = "Emergency",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTING_CMD_EMERGENCY,
    .args = NULL,
    .nargs = 0,
    .comment = "Put drone in emergency state"
  },
  {
    .name = "AutoTakeOffMode",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTING_CMD_AUTOTAKEOFFMODE,
    .args = MiniDrone_Piloting_AutoTakeOffMode_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_Piloting_AutoTakeOffMode_arg_tab),
    .comment = "Set MiniDrone automatic take off mode"
  },
  {
    .name = "FlyingMode",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTING_CMD_FLYINGMODE,
    .args = MiniDrone_Piloting_FlyingMode_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_Piloting_FlyingMode_arg_tab),
    .comment = "Set drone FlyingMode. Only supported by WingX"
  },
  {
    .name = "PlaneGearBox",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTING_CMD_PLANEGEARBOX,
    .args = MiniDrone_Piloting_PlaneGearBox_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_Piloting_PlaneGearBox_arg_tab),
    .comment = "Set Plane Gear Box. Only supported by WingX"
  },
  {
    .name = "TogglePilotingMode",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTING_CMD_TOGGLEPILOTINGMODE,
    .args = NULL,
    .nargs = 0,
    .comment = "Command to toggle between \"easy\" piloting mode and \"preferred\" piloting mode."
  },
};
static struct arsdk_cmd MiniDrone_PilotingState_cmd_tab[] = {
  {
    .name = "FlatTrimChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSTATE_CMD_FLATTRIMCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "MiniDrone send flat trim was correctly processed"
  },
  {
    .name = "FlyingStateChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSTATE_CMD_FLYINGSTATECHANGED,
    .args = MiniDrone_PilotingState_FlyingStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingState_FlyingStateChanged_arg_tab),
    .comment = "Drone flying state changed"
  },
  {
    .name = "AlertStateChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSTATE_CMD_ALERTSTATECHANGED,
    .args = MiniDrone_PilotingState_AlertStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingState_AlertStateChanged_arg_tab),
    .comment = "Drone alert state changed"
  },
  {
    .name = "AutoTakeOffModeChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSTATE_CMD_AUTOTAKEOFFMODECHANGED,
    .args = MiniDrone_PilotingState_AutoTakeOffModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingState_AutoTakeOffModeChanged_arg_tab),
    .comment = "Set MiniDrone automatic take off mode"
  },
  {
    .name = "FlyingModeChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSTATE_CMD_FLYINGMODECHANGED,
    .args = MiniDrone_PilotingState_FlyingModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingState_FlyingModeChanged_arg_tab),
    .comment = "FlyingMode changed. Only supported by WingX"
  },
  {
    .name = "PlaneGearBoxChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSTATE_CMD_PLANEGEARBOXCHANGED,
    .args = MiniDrone_PilotingState_PlaneGearBoxChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingState_PlaneGearBoxChanged_arg_tab),
    .comment = "Plane Gear Box changed. Only supported by WingX"
  },
  {
    .name = "PilotingModeChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSTATE_CMD_PILOTINGMODECHANGED,
    .args = MiniDrone_PilotingState_PilotingModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingState_PilotingModeChanged_arg_tab),
    .comment = "Event informing about the piloting mode."
  },
};
static struct arsdk_cmd MiniDrone_Animations_cmd_tab[] = {
  {
    .name = "Flip",
    .id = ARCOMMANDS_ID_MINIDRONE_ANIMATIONS_CMD_FLIP,
    .args = MiniDrone_Animations_Flip_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_Animations_Flip_arg_tab),
    .comment = "Make a flip"
  },
  {
    .name = "Cap",
    .id = ARCOMMANDS_ID_MINIDRONE_ANIMATIONS_CMD_CAP,
    .args = MiniDrone_Animations_Cap_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_Animations_Cap_arg_tab),
    .comment = "Change the product cap"
  },
};
static struct arsdk_cmd MiniDrone_MediaRecord_cmd_tab[] = {
  {
    .name = "Picture",
    .id = ARCOMMANDS_ID_MINIDRONE_MEDIARECORD_CMD_PICTURE,
    .args = MiniDrone_MediaRecord_Picture_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MediaRecord_Picture_arg_tab),
    .comment = "@deprecated"
  },
  {
    .name = "PictureV2",
    .id = ARCOMMANDS_ID_MINIDRONE_MEDIARECORD_CMD_PICTUREV2,
    .args = NULL,
    .nargs = 0,
    .comment = "Take picture"
  },
};
static struct arsdk_cmd MiniDrone_MediaRecordState_cmd_tab[] = {
  {
    .name = "PictureStateChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_MEDIARECORDSTATE_CMD_PICTURESTATECHANGED,
    .args = MiniDrone_MediaRecordState_PictureStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MediaRecordState_PictureStateChanged_arg_tab),
    .comment = "@deprecated"
  },
  {
    .name = "PictureStateChangedV2",
    .id = ARCOMMANDS_ID_MINIDRONE_MEDIARECORDSTATE_CMD_PICTURESTATECHANGEDV2,
    .args = MiniDrone_MediaRecordState_PictureStateChangedV2_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MediaRecordState_PictureStateChangedV2_arg_tab),
    .comment = "State of device picture recording changed"
  },
};
static struct arsdk_cmd MiniDrone_MediaRecordEvent_cmd_tab[] = {
  {
    .name = "PictureEventChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_MEDIARECORDEVENT_CMD_PICTUREEVENTCHANGED,
    .args = MiniDrone_MediaRecordEvent_PictureEventChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MediaRecordEvent_PictureEventChanged_arg_tab),
    .comment = "Event of picture recording"
  },
};
static struct arsdk_cmd MiniDrone_PilotingSettings_cmd_tab[] = {
  {
    .name = "MaxAltitude",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSETTINGS_CMD_MAXALTITUDE,
    .args = MiniDrone_PilotingSettings_MaxAltitude_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingSettings_MaxAltitude_arg_tab),
    .comment = "Set Max Altitude"
  },
  {
    .name = "MaxTilt",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSETTINGS_CMD_MAXTILT,
    .args = MiniDrone_PilotingSettings_MaxTilt_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingSettings_MaxTilt_arg_tab),
    .comment = "Set Max Tilt"
  },
  {
    .name = "BankedTurn",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSETTINGS_CMD_BANKEDTURN,
    .args = MiniDrone_PilotingSettings_BankedTurn_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingSettings_BankedTurn_arg_tab),
    .comment = "Set banked turn mode"
  },
  {
    .name = "MaxThrottle",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSETTINGS_CMD_MAXTHROTTLE,
    .args = MiniDrone_PilotingSettings_MaxThrottle_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingSettings_MaxThrottle_arg_tab),
    .comment = "This setting represents the vertical acceleration command that will be sent to the drone when piloting in gaz mode."
  },
  {
    .name = "PreferredPilotingMode",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSETTINGS_CMD_PREFERREDPILOTINGMODE,
    .args = MiniDrone_PilotingSettings_PreferredPilotingMode_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingSettings_PreferredPilotingMode_arg_tab),
    .comment = "The flight envelope of Mambo FPV has been divided in three piloting modes."
  },
};
static struct arsdk_cmd MiniDrone_PilotingSettingsState_cmd_tab[] = {
  {
    .name = "MaxAltitudeChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSETTINGSSTATE_CMD_MAXALTITUDECHANGED,
    .args = MiniDrone_PilotingSettingsState_MaxAltitudeChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingSettingsState_MaxAltitudeChanged_arg_tab),
    .comment = "Max Altitude sent by product"
  },
  {
    .name = "MaxTiltChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSETTINGSSTATE_CMD_MAXTILTCHANGED,
    .args = MiniDrone_PilotingSettingsState_MaxTiltChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingSettingsState_MaxTiltChanged_arg_tab),
    .comment = "Max tilt sent by product"
  },
  {
    .name = "BankedTurnChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSETTINGSSTATE_CMD_BANKEDTURNCHANGED,
    .args = MiniDrone_PilotingSettingsState_BankedTurnChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingSettingsState_BankedTurnChanged_arg_tab),
    .comment = "Banked Turn mode"
  },
  {
    .name = "MaxThrottleChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSETTINGSSTATE_CMD_MAXTHROTTLECHANGED,
    .args = MiniDrone_PilotingSettingsState_MaxThrottleChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingSettingsState_MaxThrottleChanged_arg_tab),
    .comment = "Event informing about the max throttle."
  },
  {
    .name = "PreferredPilotingModeChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_PILOTINGSETTINGSSTATE_CMD_PREFERREDPILOTINGMODECHANGED,
    .args = MiniDrone_PilotingSettingsState_PreferredPilotingModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_PilotingSettingsState_PreferredPilotingModeChanged_arg_tab),
    .comment = "Event informing about the preferred piloting mode."
  },
};
static struct arsdk_cmd MiniDrone_SpeedSettings_cmd_tab[] = {
  {
    .name = "MaxVerticalSpeed",
    .id = ARCOMMANDS_ID_MINIDRONE_SPEEDSETTINGS_CMD_MAXVERTICALSPEED,
    .args = MiniDrone_SpeedSettings_MaxVerticalSpeed_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SpeedSettings_MaxVerticalSpeed_arg_tab),
    .comment = "Set Max Vertical speed"
  },
  {
    .name = "MaxRotationSpeed",
    .id = ARCOMMANDS_ID_MINIDRONE_SPEEDSETTINGS_CMD_MAXROTATIONSPEED,
    .args = MiniDrone_SpeedSettings_MaxRotationSpeed_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SpeedSettings_MaxRotationSpeed_arg_tab),
    .comment = "Set Max Rotation speed"
  },
  {
    .name = "Wheels",
    .id = ARCOMMANDS_ID_MINIDRONE_SPEEDSETTINGS_CMD_WHEELS,
    .args = MiniDrone_SpeedSettings_Wheels_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SpeedSettings_Wheels_arg_tab),
    .comment = "Presence of wheels"
  },
  {
    .name = "MaxHorizontalSpeed",
    .id = ARCOMMANDS_ID_MINIDRONE_SPEEDSETTINGS_CMD_MAXHORIZONTALSPEED,
    .args = MiniDrone_SpeedSettings_MaxHorizontalSpeed_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SpeedSettings_MaxHorizontalSpeed_arg_tab),
    .comment = "Set Max Horizontal speed (only used in case where PilotingSettings_MaxTilt is not used like in hydrofoil mode)"
  },
  {
    .name = "MaxPlaneModeRotationSpeed",
    .id = ARCOMMANDS_ID_MINIDRONE_SPEEDSETTINGS_CMD_MAXPLANEMODEROTATIONSPEED,
    .args = MiniDrone_SpeedSettings_MaxPlaneModeRotationSpeed_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SpeedSettings_MaxPlaneModeRotationSpeed_arg_tab),
    .comment = "Set max plane mode rotation speed (only available for wing x)"
  },
};
static struct arsdk_cmd MiniDrone_SpeedSettingsState_cmd_tab[] = {
  {
    .name = "MaxVerticalSpeedChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_SPEEDSETTINGSSTATE_CMD_MAXVERTICALSPEEDCHANGED,
    .args = MiniDrone_SpeedSettingsState_MaxVerticalSpeedChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SpeedSettingsState_MaxVerticalSpeedChanged_arg_tab),
    .comment = "Max vertical speed sent by product"
  },
  {
    .name = "MaxRotationSpeedChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_SPEEDSETTINGSSTATE_CMD_MAXROTATIONSPEEDCHANGED,
    .args = MiniDrone_SpeedSettingsState_MaxRotationSpeedChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SpeedSettingsState_MaxRotationSpeedChanged_arg_tab),
    .comment = "Max rotation speed sent by product"
  },
  {
    .name = "WheelsChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_SPEEDSETTINGSSTATE_CMD_WHEELSCHANGED,
    .args = MiniDrone_SpeedSettingsState_WheelsChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SpeedSettingsState_WheelsChanged_arg_tab),
    .comment = "Presence of wheels sent by product"
  },
  {
    .name = "MaxHorizontalSpeedChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_SPEEDSETTINGSSTATE_CMD_MAXHORIZONTALSPEEDCHANGED,
    .args = MiniDrone_SpeedSettingsState_MaxHorizontalSpeedChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SpeedSettingsState_MaxHorizontalSpeedChanged_arg_tab),
    .comment = "Max horizontal speed sent by product (only used in case where PilotingSettings_MaxTilt is not used like in hydrofoil mode)"
  },
  {
    .name = "MaxPlaneModeRotationSpeedChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_SPEEDSETTINGSSTATE_CMD_MAXPLANEMODEROTATIONSPEEDCHANGED,
    .args = MiniDrone_SpeedSettingsState_MaxPlaneModeRotationSpeedChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SpeedSettingsState_MaxPlaneModeRotationSpeedChanged_arg_tab),
    .comment = "Max plane rotation speed sent by product (only available for wing x)"
  },
};
static struct arsdk_cmd MiniDrone_Settings_cmd_tab[] = {
  {
    .name = "CutOutMode",
    .id = ARCOMMANDS_ID_MINIDRONE_SETTINGS_CMD_CUTOUTMODE,
    .args = MiniDrone_Settings_CutOutMode_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_Settings_CutOutMode_arg_tab),
    .comment = "Set MiniDrone cut out mode"
  },
};
static struct arsdk_cmd MiniDrone_SettingsState_cmd_tab[] = {
  {
    .name = "ProductMotorsVersionChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_SETTINGSSTATE_CMD_PRODUCTMOTORSVERSIONCHANGED,
    .args = MiniDrone_SettingsState_ProductMotorsVersionChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SettingsState_ProductMotorsVersionChanged_arg_tab),
    .comment = "@deprecated"
  },
  {
    .name = "ProductInertialVersionChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_SETTINGSSTATE_CMD_PRODUCTINERTIALVERSIONCHANGED,
    .args = MiniDrone_SettingsState_ProductInertialVersionChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SettingsState_ProductInertialVersionChanged_arg_tab),
    .comment = "@deprecated"
  },
  {
    .name = "CutOutModeChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_SETTINGSSTATE_CMD_CUTOUTMODECHANGED,
    .args = MiniDrone_SettingsState_CutOutModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_SettingsState_CutOutModeChanged_arg_tab),
    .comment = "MiniDrone cut out mode"
  },
};
static struct arsdk_cmd MiniDrone_FloodControlState_cmd_tab[] = {
  {
    .name = "FloodControlChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_FLOODCONTROLSTATE_CMD_FLOODCONTROLCHANGED,
    .args = MiniDrone_FloodControlState_FloodControlChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_FloodControlState_FloodControlChanged_arg_tab),
    .comment = "@deprecated"
  },
};
static struct arsdk_cmd MiniDrone_GPS_cmd_tab[] = {
  {
    .name = "ControllerLatitudeForRun",
    .id = ARCOMMANDS_ID_MINIDRONE_GPS_CMD_CONTROLLERLATITUDEFORRUN,
    .args = MiniDrone_GPS_ControllerLatitudeForRun_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_GPS_ControllerLatitudeForRun_arg_tab),
    .comment = "Set the controller latitude for a run."
  },
  {
    .name = "ControllerLongitudeForRun",
    .id = ARCOMMANDS_ID_MINIDRONE_GPS_CMD_CONTROLLERLONGITUDEFORRUN,
    .args = MiniDrone_GPS_ControllerLongitudeForRun_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_GPS_ControllerLongitudeForRun_arg_tab),
    .comment = "Set the controller longitude for a run."
  },
};
static struct arsdk_cmd MiniDrone_Configuration_cmd_tab[] = {
  {
    .name = "ControllerType",
    .id = ARCOMMANDS_ID_MINIDRONE_CONFIGURATION_CMD_CONTROLLERTYPE,
    .args = MiniDrone_Configuration_ControllerType_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_Configuration_ControllerType_arg_tab),
    .comment = "Set the controller type."
  },
  {
    .name = "ControllerName",
    .id = ARCOMMANDS_ID_MINIDRONE_CONFIGURATION_CMD_CONTROLLERNAME,
    .args = MiniDrone_Configuration_ControllerName_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_Configuration_ControllerName_arg_tab),
    .comment = "Set the controller name."
  },
};
static struct arsdk_cmd MiniDrone_UsbAccessoryState_cmd_tab[] = {
  {
    .name = "LightState",
    .id = ARCOMMANDS_ID_MINIDRONE_USBACCESSORYSTATE_CMD_LIGHTSTATE,
    .args = MiniDrone_UsbAccessoryState_LightState_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_UsbAccessoryState_LightState_arg_tab),
    .comment = "USB Light accessory state cmd."
  },
  {
    .name = "ClawState",
    .id = ARCOMMANDS_ID_MINIDRONE_USBACCESSORYSTATE_CMD_CLAWSTATE,
    .args = MiniDrone_UsbAccessoryState_ClawState_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_UsbAccessoryState_ClawState_arg_tab),
    .comment = "USB Claw accessory state cmd."
  },
  {
    .name = "GunState",
    .id = ARCOMMANDS_ID_MINIDRONE_USBACCESSORYSTATE_CMD_GUNSTATE,
    .args = MiniDrone_UsbAccessoryState_GunState_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_UsbAccessoryState_GunState_arg_tab),
    .comment = "USB Gun accessory state cmd."
  },
};
static struct arsdk_cmd MiniDrone_UsbAccessory_cmd_tab[] = {
  {
    .name = "LightControl",
    .id = ARCOMMANDS_ID_MINIDRONE_USBACCESSORY_CMD_LIGHTCONTROL,
    .args = MiniDrone_UsbAccessory_LightControl_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_UsbAccessory_LightControl_arg_tab),
    .comment = "USB Light control cmd."
  },
  {
    .name = "ClawControl",
    .id = ARCOMMANDS_ID_MINIDRONE_USBACCESSORY_CMD_CLAWCONTROL,
    .args = MiniDrone_UsbAccessory_ClawControl_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_UsbAccessory_ClawControl_arg_tab),
    .comment = "USB Claw control cmd."
  },
  {
    .name = "GunControl",
    .id = ARCOMMANDS_ID_MINIDRONE_USBACCESSORY_CMD_GUNCONTROL,
    .args = MiniDrone_UsbAccessory_GunControl_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_UsbAccessory_GunControl_arg_tab),
    .comment = "USB Gun control cmd."
  },
};
static struct arsdk_cmd MiniDrone_RemoteController_cmd_tab[] = {
  {
    .name = "SetPairedRemote",
    .id = ARCOMMANDS_ID_MINIDRONE_REMOTECONTROLLER_CMD_SETPAIREDREMOTE,
    .args = MiniDrone_RemoteController_SetPairedRemote_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_RemoteController_SetPairedRemote_arg_tab),
    .comment = "Send the address of the remote controller on which the drone should be paired"
  },
};
static struct arsdk_cmd MiniDrone_NavigationDataState_cmd_tab[] = {
  {
    .name = "DronePosition",
    .id = ARCOMMANDS_ID_MINIDRONE_NAVIGATIONDATASTATE_CMD_DRONEPOSITION,
    .args = MiniDrone_NavigationDataState_DronePosition_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_NavigationDataState_DronePosition_arg_tab),
    .comment = "Get the drone position from takeoff point (0, 0, 0, 0)."
  },
  {
    .name = "DroneSpeed",
    .id = ARCOMMANDS_ID_MINIDRONE_NAVIGATIONDATASTATE_CMD_DRONESPEED,
    .args = MiniDrone_NavigationDataState_DroneSpeed_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_NavigationDataState_DroneSpeed_arg_tab),
    .comment = "Event informing about the estimated drone speed in horizontal frame."
  },
  {
    .name = "DroneAltitude",
    .id = ARCOMMANDS_ID_MINIDRONE_NAVIGATIONDATASTATE_CMD_DRONEALTITUDE,
    .args = MiniDrone_NavigationDataState_DroneAltitude_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_NavigationDataState_DroneAltitude_arg_tab),
    .comment = "Event informing about the estimated altitude above takeoff level."
  },
  {
    .name = "DroneQuaternion",
    .id = ARCOMMANDS_ID_MINIDRONE_NAVIGATIONDATASTATE_CMD_DRONEQUATERNION,
    .args = MiniDrone_NavigationDataState_DroneQuaternion_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_NavigationDataState_DroneQuaternion_arg_tab),
    .comment = "Event informing about the estimated quaternion."
  },
};
static struct arsdk_cmd MiniDrone_MinicamState_cmd_tab[] = {
  {
    .name = "PowerModeChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_MINICAMSTATE_CMD_POWERMODECHANGED,
    .args = MiniDrone_MinicamState_PowerModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MinicamState_PowerModeChanged_arg_tab),
    .comment = "Event informing about the minicam power mode."
  },
  {
    .name = "ProductSerialChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_MINICAMSTATE_CMD_PRODUCTSERIALCHANGED,
    .args = MiniDrone_MinicamState_ProductSerialChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MinicamState_ProductSerialChanged_arg_tab),
    .comment = "Event informing about the minicam product serial number."
  },
  {
    .name = "StateChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_MINICAMSTATE_CMD_STATECHANGED,
    .args = MiniDrone_MinicamState_StateChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MinicamState_StateChanged_arg_tab),
    .comment = "Event informing about the state of the camera."
  },
  {
    .name = "VersionChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_MINICAMSTATE_CMD_VERSIONCHANGED,
    .args = MiniDrone_MinicamState_VersionChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MinicamState_VersionChanged_arg_tab),
    .comment = "Get the accessory Version."
  },
  {
    .name = "PictureChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_MINICAMSTATE_CMD_PICTURECHANGED,
    .args = MiniDrone_MinicamState_PictureChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MinicamState_PictureChanged_arg_tab),
    .comment = "Event informing that the picture has been taken."
  },
  {
    .name = "VideoStateChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_MINICAMSTATE_CMD_VIDEOSTATECHANGED,
    .args = MiniDrone_MinicamState_VideoStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MinicamState_VideoStateChanged_arg_tab),
    .comment = "Event informing about the video recording state."
  },
  {
    .name = "MassStorageFormatChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_MINICAMSTATE_CMD_MASSSTORAGEFORMATCHANGED,
    .args = MiniDrone_MinicamState_MassStorageFormatChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_MinicamState_MassStorageFormatChanged_arg_tab),
    .comment = "Event informing that the mass storage has been formatted."
  },
};
static struct arsdk_cmd MiniDrone_VideoSettings_cmd_tab[] = {
  {
    .name = "Autorecord",
    .id = ARCOMMANDS_ID_MINIDRONE_VIDEOSETTINGS_CMD_AUTORECORD,
    .args = MiniDrone_VideoSettings_Autorecord_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_VideoSettings_Autorecord_arg_tab),
    .comment = "Set video automatic recording state."
  },
  {
    .name = "ElectricFrequency",
    .id = ARCOMMANDS_ID_MINIDRONE_VIDEOSETTINGS_CMD_ELECTRICFREQUENCY,
    .args = MiniDrone_VideoSettings_ElectricFrequency_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_VideoSettings_ElectricFrequency_arg_tab),
    .comment = "Set the electric frequency (Anti-flickering)."
  },
  {
    .name = "VideoResolution",
    .id = ARCOMMANDS_ID_MINIDRONE_VIDEOSETTINGS_CMD_VIDEORESOLUTION,
    .args = MiniDrone_VideoSettings_VideoResolution_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_VideoSettings_VideoResolution_arg_tab),
    .comment = "Set video streaming and recording resolution."
  },
};
static struct arsdk_cmd MiniDrone_VideoSettingsState_cmd_tab[] = {
  {
    .name = "AutorecordChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_VIDEOSETTINGSSTATE_CMD_AUTORECORDCHANGED,
    .args = MiniDrone_VideoSettingsState_AutorecordChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_VideoSettingsState_AutorecordChanged_arg_tab),
    .comment = "Event informing about the video automatic recording status."
  },
  {
    .name = "ElectricFrequencyChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_VIDEOSETTINGSSTATE_CMD_ELECTRICFREQUENCYCHANGED,
    .args = MiniDrone_VideoSettingsState_ElectricFrequencyChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_VideoSettingsState_ElectricFrequencyChanged_arg_tab),
    .comment = "Event informing about the electric frequency (Anti-flickering)."
  },
  {
    .name = "VideoResolutionChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_VIDEOSETTINGSSTATE_CMD_VIDEORESOLUTIONCHANGED,
    .args = MiniDrone_VideoSettingsState_VideoResolutionChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_VideoSettingsState_VideoResolutionChanged_arg_tab),
    .comment = "Event informing about the streaming resolution."
  },
};
static struct arsdk_cmd MiniDrone_Minicam_cmd_tab[] = {
  {
    .name = "Picture",
    .id = ARCOMMANDS_ID_MINIDRONE_MINICAM_CMD_PICTURE,
    .args = NULL,
    .nargs = 0,
    .comment = "Take picture."
  },
  {
    .name = "Video",
    .id = ARCOMMANDS_ID_MINIDRONE_MINICAM_CMD_VIDEO,
    .args = MiniDrone_Minicam_Video_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_Minicam_Video_arg_tab),
    .comment = "Start/Stop video recording."
  },
  {
    .name = "MassStorageFormat",
    .id = ARCOMMANDS_ID_MINIDRONE_MINICAM_CMD_MASSSTORAGEFORMAT,
    .args = NULL,
    .nargs = 0,
    .comment = "Format mass storage."
  },
};
static struct arsdk_cmd MiniDrone_RemoteControllerState_cmd_tab[] = {
  {
    .name = "ConnectionChanged",
    .id = ARCOMMANDS_ID_MINIDRONE_REMOTECONTROLLERSTATE_CMD_CONNECTIONCHANGED,
    .args = MiniDrone_RemoteControllerState_ConnectionChanged_arg_tab,
    .nargs = ARRAY_SIZE(MiniDrone_RemoteControllerState_ConnectionChanged_arg_tab),
    .comment = "State of the connection to the remote controller changed."
  },
};
static struct arsdk_class MiniDrone_class_tab[] = {
  {
    .name = "Piloting",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_PILOTING,
    .cmds = MiniDrone_Piloting_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_Piloting_cmd_tab),
    .comment = "All commands related to piloting the MiniDrone"
  },
  {
    .name = "PilotingState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_PILOTINGSTATE,
    .cmds = MiniDrone_PilotingState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_PilotingState_cmd_tab),
    .comment = "Occasional information"
  },
  {
    .name = "Animations",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_ANIMATIONS,
    .cmds = MiniDrone_Animations_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_Animations_cmd_tab),
    .comment = "Animation commands"
  },
  {
    .name = "MediaRecord",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_MEDIARECORD,
    .cmds = MiniDrone_MediaRecord_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_MediaRecord_cmd_tab),
    .comment = "Media recording management"
  },
  {
    .name = "MediaRecordState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_MEDIARECORDSTATE,
    .cmds = MiniDrone_MediaRecordState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_MediaRecordState_cmd_tab),
    .comment = "State of media recording"
  },
  {
    .name = "MediaRecordEvent",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_MEDIARECORDEVENT,
    .cmds = MiniDrone_MediaRecordEvent_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_MediaRecordEvent_cmd_tab),
    .comment = "Events of media recording"
  },
  {
    .name = "PilotingSettings",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_PILOTINGSETTINGS,
    .cmds = MiniDrone_PilotingSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_PilotingSettings_cmd_tab),
    .comment = "Piloting Settings commands"
  },
  {
    .name = "PilotingSettingsState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_PILOTINGSETTINGSSTATE,
    .cmds = MiniDrone_PilotingSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_PilotingSettingsState_cmd_tab),
    .comment = "Piloting Settings state from product"
  },
  {
    .name = "SpeedSettings",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_SPEEDSETTINGS,
    .cmds = MiniDrone_SpeedSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_SpeedSettings_cmd_tab),
    .comment = "Speed Settings commands"
  },
  {
    .name = "SpeedSettingsState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_SPEEDSETTINGSSTATE,
    .cmds = MiniDrone_SpeedSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_SpeedSettingsState_cmd_tab),
    .comment = "Speed Settings state from product"
  },
  {
    .name = "Settings",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_SETTINGS,
    .cmds = MiniDrone_Settings_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_Settings_cmd_tab),
    .comment = "Settings commands"
  },
  {
    .name = "SettingsState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_SETTINGSSTATE,
    .cmds = MiniDrone_SettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_SettingsState_cmd_tab),
    .comment = "Settings state from product"
  },
  {
    .name = "FloodControlState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_FLOODCONTROLSTATE,
    .cmds = MiniDrone_FloodControlState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_FloodControlState_cmd_tab),
    .comment = "Settings state from product"
  },
  {
    .name = "GPS",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_GPS,
    .cmds = MiniDrone_GPS_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_GPS_cmd_tab),
    .comment = "GPS related commands"
  },
  {
    .name = "Configuration",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_CONFIGURATION,
    .cmds = MiniDrone_Configuration_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_Configuration_cmd_tab),
    .comment = "Configuration related commands"
  },
  {
    .name = "UsbAccessoryState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_USBACCESSORYSTATE,
    .cmds = MiniDrone_UsbAccessoryState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_UsbAccessoryState_cmd_tab),
    .comment = "USB Accessories state commands."
  },
  {
    .name = "UsbAccessory",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_USBACCESSORY,
    .cmds = MiniDrone_UsbAccessory_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_UsbAccessory_cmd_tab),
    .comment = "USB Accessories control commands."
  },
  {
    .name = "RemoteController",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_REMOTECONTROLLER,
    .cmds = MiniDrone_RemoteController_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_RemoteController_cmd_tab),
    .comment = "Remote controller related commands."
  },
  {
    .name = "NavigationDataState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_NAVIGATIONDATASTATE,
    .cmds = MiniDrone_NavigationDataState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_NavigationDataState_cmd_tab),
    .comment = "Navigation Data."
  },
  {
    .name = "MinicamState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_MINICAMSTATE,
    .cmds = MiniDrone_MinicamState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_MinicamState_cmd_tab),
    .comment = "Minicam related events."
  },
  {
    .name = "VideoSettings",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_VIDEOSETTINGS,
    .cmds = MiniDrone_VideoSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_VideoSettings_cmd_tab),
    .comment = "Video settings."
  },
  {
    .name = "VideoSettingsState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_VIDEOSETTINGSSTATE,
    .cmds = MiniDrone_VideoSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_VideoSettingsState_cmd_tab),
    .comment = "Video settings state."
  },
  {
    .name = "Minicam",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_MINICAM,
    .cmds = MiniDrone_Minicam_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_Minicam_cmd_tab),
    .comment = "Minicam related commands."
  },
  {
    .name = "RemoteControllerState",
    .ident = ARCOMMANDS_ID_MINIDRONE_CLASS_REMOTECONTROLLERSTATE,
    .cmds = MiniDrone_RemoteControllerState_cmd_tab,
    .ncmds = ARRAY_SIZE(MiniDrone_RemoteControllerState_cmd_tab),
    .comment = "State changes related to the remote controller."
  },
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = NULL,
    .ncmds = 0,
    .comment = ""
  },
};
static struct arsdk_arg powerup_Piloting_PCMD_arg_tab[] = {
  {
    .name = "flag",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Boolean for \"touch screen\"."
  },
  {
    .name = "throttle",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Throttle value [0:100]."
  },
  {
    .name = "roll",
    .type = ARSDK_ARG_TYPE_I8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Yaw-roll value. [-100:100]"
  },
};
static struct arsdk_arg powerup_Piloting_UserTakeOff_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "State of user take off mode\n- 1 to enter in user take off.\n- 0 to exit from user take off."
  },
};
static struct arsdk_enum powerup_Piloting_MotorMode_mode_enum_tab[] = {
  {
    .name = "normal",
    .value = ARCOMMANDS_POWERUP_PILOTING_MOTORMODE_MODE_NORMAL,
    .comment = "The motors will only start on user action after being in state user take off"
  },
  {
    .name = "forced",
    .value = ARCOMMANDS_POWERUP_PILOTING_MOTORMODE_MODE_FORCED,
    .comment = "Motors will use the current pcmd values without considering the flying state"
  },
};
static struct arsdk_arg powerup_Piloting_MotorMode_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_Piloting_MotorMode_mode_enum_tab,
    .nenums = ARRAY_SIZE(powerup_Piloting_MotorMode_mode_enum_tab),
    .comment = ""
  },
};
static struct arsdk_enum powerup_PilotingSettings_set_setting_enum_tab[] = {
  {
    .name = "MAX_ROLL",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_MAX_ROLL,
    .comment = "Max roll value. In degree."
  },
  {
    .name = "ROLL_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ROLL_KP,
    .comment = "How fast the plane reaches the desired roll angle. No unit."
  },
  {
    .name = "ROLL_RATE_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ROLL_RATE_KP,
    .comment = "How fast the plane reaches the desired roll rate. No unit."
  },
  {
    .name = "MAX_PITCH",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_MAX_PITCH,
    .comment = "Max pitch value. In degree."
  },
  {
    .name = "MIN_PITCH",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_MIN_PITCH,
    .comment = "Min pitch value. In degree."
  },
  {
    .name = "PITCH_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_PITCH_KP,
    .comment = "How fast the plane reaches the desired pitch angle. No unit."
  },
  {
    .name = "PITCH_RATE_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_PITCH_RATE_KP,
    .comment = "How fast the plane reaches the desired pitch rate. No unit."
  },
  {
    .name = "YAW_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_YAW_KP,
    .comment = "How fast the plane reaches the desired yaw angle. No unit."
  },
  {
    .name = "YAW_RATE_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_YAW_RATE_KP,
    .comment = "How fast the plane reaches the desired yaw rate. No unit."
  },
  {
    .name = "ROLL_TO_THROTTLE_RATE",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ROLL_TO_THROTTLE_RATE,
    .comment = "Portion of thrust that is added to motors according to the roll/yaw\ncommand to compensate a dive during turn. No unit."
  },
  {
    .name = "ANGLE_OF_ATTACK",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ANGLE_OF_ATTACK,
    .comment = "Angle of attack of a plane needed horizontal flight."
  },
  {
    .name = "ALT_HOLD",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ALT_HOLD,
    .comment = "Altitude hold during autopilot. 0 for false, other value for true."
  },
  {
    .name = "ALT_HOLD_THROTTLE",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_ALT_HOLD_THROTTLE,
    .comment = "Altitude hold throttle. Expressed in percentage divided by 100 (from 0 to 1)."
  },
  {
    .name = "DR_RSSI_EDGE",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_DR_RSSI_EDGE,
    .comment = "Rssi value that indicates that the airplane is close to the pilot."
  },
  {
    .name = "RECOVERY_DURATION_LIMIT",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_RECOVERY_DURATION_LIMIT,
    .comment = "Limit time for return home duration. In seconds."
  },
  {
    .name = "WIND_SPEED",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_WIND_SPEED,
    .comment = "Wind speed in m/s. Should be sent before flight."
  },
  {
    .name = "PLANE_SPEED",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGS_SET_SETTING_PLANE_SPEED,
    .comment = "Target plane speed in m/s. Should be sent before flight."
  },
};
static struct arsdk_arg powerup_PilotingSettings_set_arg_tab[] = {
  {
    .name = "setting",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_PilotingSettings_set_setting_enum_tab,
    .nenums = ARRAY_SIZE(powerup_PilotingSettings_set_setting_enum_tab),
    .comment = "Variety of setting that can be customized"
  },
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "value of the given setting"
  },
};
static struct arsdk_enum powerup_MediaRecord_VideoV2_record_enum_tab[] = {
  {
    .name = "stop",
    .value = ARCOMMANDS_POWERUP_MEDIARECORD_VIDEOV2_RECORD_STOP,
    .comment = "Stop the video recording"
  },
  {
    .name = "start",
    .value = ARCOMMANDS_POWERUP_MEDIARECORD_VIDEOV2_RECORD_START,
    .comment = "Start the video recording"
  },
};
static struct arsdk_arg powerup_MediaRecord_VideoV2_arg_tab[] = {
  {
    .name = "record",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_MediaRecord_VideoV2_record_enum_tab,
    .nenums = ARRAY_SIZE(powerup_MediaRecord_VideoV2_record_enum_tab),
    .comment = "Command to record video"
  },
};
static struct arsdk_enum powerup_NetworkSettings_WifiSelection_type_enum_tab[] = {
  {
    .name = "auto",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_TYPE_AUTO,
    .comment = "Auto selection"
  },
  {
    .name = "manual",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_TYPE_MANUAL,
    .comment = "Manual selection"
  },
};
static struct arsdk_enum powerup_NetworkSettings_WifiSelection_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND_5GHZ,
    .comment = "5 GHz band"
  },
  {
    .name = "all",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGS_WIFISELECTION_BAND_ALL,
    .comment = "Both 2.4 and 5 GHz bands"
  },
};
static struct arsdk_arg powerup_NetworkSettings_WifiSelection_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_NetworkSettings_WifiSelection_type_enum_tab,
    .nenums = ARRAY_SIZE(powerup_NetworkSettings_WifiSelection_type_enum_tab),
    .comment = "The type of wifi selection (auto, manual)"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_NetworkSettings_WifiSelection_band_enum_tab,
    .nenums = ARRAY_SIZE(powerup_NetworkSettings_WifiSelection_band_enum_tab),
    .comment = "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel (not used in auto mode)"
  },
};
static struct arsdk_enum powerup_Network_WifiScan_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND_5GHZ,
    .comment = "5 GHz band"
  },
  {
    .name = "all",
    .value = ARCOMMANDS_POWERUP_NETWORK_WIFISCAN_BAND_ALL,
    .comment = "Both 2.4 and 5 GHz bands"
  },
};
static struct arsdk_arg powerup_Network_WifiScan_arg_tab[] = {
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_Network_WifiScan_band_enum_tab,
    .nenums = ARRAY_SIZE(powerup_Network_WifiScan_band_enum_tab),
    .comment = "The band(s) : 2.4 Ghz, 5 Ghz, or both"
  },
};
static struct arsdk_arg powerup_MediaStreaming_VideoEnable_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 to enable, 0 to disable."
  },
};
static struct arsdk_arg powerup_VideoSettings_Autorecord_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0: Disabled 1: Enabled."
  },
};
static struct arsdk_enum powerup_VideoSettings_VideoMode_mode_enum_tab[] = {
  {
    .name = "quality",
    .value = ARCOMMANDS_POWERUP_VIDEOSETTINGS_VIDEOMODE_MODE_QUALITY,
    .comment = "Maximize video quality (VGA 30fps)."
  },
  {
    .name = "performance",
    .value = ARCOMMANDS_POWERUP_VIDEOSETTINGS_VIDEOMODE_MODE_PERFORMANCE,
    .comment = "Maximize video performance (QVGA 24fps)."
  },
};
static struct arsdk_arg powerup_VideoSettings_VideoMode_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_VideoSettings_VideoMode_mode_enum_tab,
    .nenums = ARRAY_SIZE(powerup_VideoSettings_VideoMode_mode_enum_tab),
    .comment = "Video mode"
  },
};
static struct arsdk_arg powerup_Sounds_buzz_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0: Disabled 1: Enabled."
  },
};
static struct arsdk_enum powerup_PilotingState_AlertStateChanged_state_enum_tab[] = {
  {
    .name = "none",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE_NONE,
    .comment = "No alert"
  },
  {
    .name = "critical_battery",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE_CRITICAL_BATTERY,
    .comment = "Critical battery alert"
  },
  {
    .name = "low_battery",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_ALERTSTATECHANGED_STATE_LOW_BATTERY,
    .comment = "Low battery alert"
  },
};
static struct arsdk_arg powerup_PilotingState_AlertStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_PilotingState_AlertStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(powerup_PilotingState_AlertStateChanged_state_enum_tab),
    .comment = "JS alert state"
  },
};
static struct arsdk_enum powerup_PilotingState_FlyingStateChanged_state_enum_tab[] = {
  {
    .name = "landed",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDED,
    .comment = "Landed state"
  },
  {
    .name = "takingoff",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_TAKINGOFF,
    .comment = "Taking off state"
  },
  {
    .name = "flying",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_FLYING,
    .comment = "Flying state"
  },
  {
    .name = "recovery",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_RECOVERY,
    .comment = "Recovery state"
  },
  {
    .name = "emergency",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY,
    .comment = "Emergency state"
  },
  {
    .name = "usertakeoff",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_USERTAKEOFF,
    .comment = "User take off state. Waiting for user action to take off."
  },
  {
    .name = "init",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_INIT,
    .comment = "Initializing state (user should let the drone steady for a while)"
  },
};
static struct arsdk_arg powerup_PilotingState_FlyingStateChanged_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_PilotingState_FlyingStateChanged_state_enum_tab,
    .nenums = ARRAY_SIZE(powerup_PilotingState_FlyingStateChanged_state_enum_tab),
    .comment = "Drone flying state"
  },
};
static struct arsdk_enum powerup_PilotingState_MotorModeChanged_mode_enum_tab[] = {
  {
    .name = "normal",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_MOTORMODECHANGED_MODE_NORMAL,
    .comment = "The motors will only start on user action after being in state user take off"
  },
  {
    .name = "forced",
    .value = ARCOMMANDS_POWERUP_PILOTINGSTATE_MOTORMODECHANGED_MODE_FORCED,
    .comment = "Motors will use the current pcmd values without considering the flying state"
  },
};
static struct arsdk_arg powerup_PilotingState_MotorModeChanged_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_PilotingState_MotorModeChanged_mode_enum_tab,
    .nenums = ARRAY_SIZE(powerup_PilotingState_MotorModeChanged_mode_enum_tab),
    .comment = ""
  },
};
static struct arsdk_arg powerup_PilotingState_AttitudeChanged_arg_tab[] = {
  {
    .name = "roll",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "roll value (in radian) (relative to horizontal)"
  },
  {
    .name = "pitch",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Pitch value (in radian) (relative to horizontal)"
  },
  {
    .name = "yaw",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Yaw value (in radian) (relative to North)"
  },
};
static struct arsdk_arg powerup_PilotingState_AltitudeChanged_arg_tab[] = {
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude in meters relative to take off altitude"
  },
};
static struct arsdk_enum powerup_PilotingSettingsState_settingChanged_setting_enum_tab[] = {
  {
    .name = "MAX_ROLL",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_MAX_ROLL,
    .comment = "Max roll value. In degree."
  },
  {
    .name = "ROLL_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ROLL_KP,
    .comment = "How fast the plane reaches the desired roll angle. No unit."
  },
  {
    .name = "ROLL_RATE_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ROLL_RATE_KP,
    .comment = "How fast the plane reaches the desired roll rate. No unit."
  },
  {
    .name = "MAX_PITCH",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_MAX_PITCH,
    .comment = "Max pitch value. In degree."
  },
  {
    .name = "MIN_PITCH",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_MIN_PITCH,
    .comment = "Min pitch value. In degree."
  },
  {
    .name = "PITCH_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_PITCH_KP,
    .comment = "How fast the plane reaches the desired pitch angle. No unit."
  },
  {
    .name = "PITCH_RATE_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_PITCH_RATE_KP,
    .comment = "How fast the plane reaches the desired pitch rate. No unit."
  },
  {
    .name = "YAW_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_YAW_KP,
    .comment = "How fast the plane reaches the desired yaw angle. No unit."
  },
  {
    .name = "YAW_RATE_KP",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_YAW_RATE_KP,
    .comment = "How fast the plane reaches the desired yaw rate. No unit."
  },
  {
    .name = "ROLL_TO_THROTTLE_RATE",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ROLL_TO_THROTTLE_RATE,
    .comment = "Portion of thrust that is added to motors according to the roll/yaw\ncommand to compensate a dive during turn. No unit."
  },
  {
    .name = "ANGLE_OF_ATTACK",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ANGLE_OF_ATTACK,
    .comment = "Angle of attack of a plane needed horizontal flight."
  },
  {
    .name = "ALT_HOLD",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ALT_HOLD,
    .comment = "Altitude hold during autopilot. 0 for false, other value for true."
  },
  {
    .name = "ALT_HOLD_THROTTLE",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_ALT_HOLD_THROTTLE,
    .comment = "Altitude hold throttle. Expressed in percentage divided by 100 (from 0 to 1)."
  },
  {
    .name = "DR_RSSI_EDGE",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_DR_RSSI_EDGE,
    .comment = "Rssi value that indicates that the airplane is close to the pilot."
  },
  {
    .name = "RECOVERY_DURATION_LIMIT",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_RECOVERY_DURATION_LIMIT,
    .comment = "Limit time for return home duration. In seconds."
  },
  {
    .name = "WIND_SPEED",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_WIND_SPEED,
    .comment = "Wind speed in m/s."
  },
  {
    .name = "PLANE_SPEED",
    .value = ARCOMMANDS_POWERUP_PILOTINGSETTINGSSTATE_SETTINGCHANGED_SETTING_PLANE_SPEED,
    .comment = "Target plane speed in m/s."
  },
};
static struct arsdk_arg powerup_PilotingSettingsState_settingChanged_arg_tab[] = {
  {
    .name = "setting",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_PilotingSettingsState_settingChanged_setting_enum_tab,
    .nenums = ARRAY_SIZE(powerup_PilotingSettingsState_settingChanged_setting_enum_tab),
    .comment = "Variety of setting that can be customized"
  },
  {
    .name = "current",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current value of the given setting"
  },
  {
    .name = "min",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Minimal value of the given setting"
  },
  {
    .name = "max",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Max value of the given setting"
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list."
  },
};
static struct arsdk_enum powerup_MediaRecordState_PictureStateChangedV2_state_enum_tab[] = {
  {
    .name = "ready",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_READY,
    .comment = "The picture recording is ready"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_BUSY,
    .comment = "The picture recording is busy"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_STATE_NOTAVAILABLE,
    .comment = "The picture recording is not available"
  },
};
static struct arsdk_enum powerup_MediaRecordState_PictureStateChangedV2_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_UNKNOWN,
    .comment = "Unknown generic error"
  },
  {
    .name = "camera_ko",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_CAMERA_KO,
    .comment = "Picture camera is out of order"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_MEMORYFULL,
    .comment = "Memory full ; cannot save one additional picture"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_PICTURESTATECHANGEDV2_ERROR_LOWBATTERY,
    .comment = "Battery is too low to start/keep recording."
  },
};
static struct arsdk_arg powerup_MediaRecordState_PictureStateChangedV2_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_MediaRecordState_PictureStateChangedV2_state_enum_tab,
    .nenums = ARRAY_SIZE(powerup_MediaRecordState_PictureStateChangedV2_state_enum_tab),
    .comment = "State of device picture recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_MediaRecordState_PictureStateChangedV2_error_enum_tab,
    .nenums = ARRAY_SIZE(powerup_MediaRecordState_PictureStateChangedV2_error_enum_tab),
    .comment = "Error to explain the state"
  },
};
static struct arsdk_enum powerup_MediaRecordState_VideoStateChangedV2_state_enum_tab[] = {
  {
    .name = "stopped",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STOPPED,
    .comment = "Video is stopped"
  },
  {
    .name = "started",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_STARTED,
    .comment = "Video is started"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_STATE_NOTAVAILABLE,
    .comment = "The video recording is not available"
  },
};
static struct arsdk_enum powerup_MediaRecordState_VideoStateChangedV2_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_UNKNOWN,
    .comment = "Unknown generic error"
  },
  {
    .name = "camera_ko",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_CAMERA_KO,
    .comment = "Video camera is out of order"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_MEMORYFULL,
    .comment = "Memory full ; cannot save one additional video"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDSTATE_VIDEOSTATECHANGEDV2_ERROR_LOWBATTERY,
    .comment = "Battery is too low to start/keep recording."
  },
};
static struct arsdk_arg powerup_MediaRecordState_VideoStateChangedV2_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_MediaRecordState_VideoStateChangedV2_state_enum_tab,
    .nenums = ARRAY_SIZE(powerup_MediaRecordState_VideoStateChangedV2_state_enum_tab),
    .comment = "State of device video recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_MediaRecordState_VideoStateChangedV2_error_enum_tab,
    .nenums = ARRAY_SIZE(powerup_MediaRecordState_VideoStateChangedV2_error_enum_tab),
    .comment = "Error to explain the state"
  },
};
static struct arsdk_enum powerup_MediaRecordEvent_PictureEventChanged_event_enum_tab[] = {
  {
    .name = "taken",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_TAKEN,
    .comment = "Picture taken and saved"
  },
  {
    .name = "failed",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_EVENT_FAILED,
    .comment = "Picture failed"
  },
};
static struct arsdk_enum powerup_MediaRecordEvent_PictureEventChanged_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_UNKNOWN,
    .comment = "Unknown generic error ; only when state is failed"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_BUSY,
    .comment = "Picture recording is busy ; only when state is failed"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_NOTAVAILABLE,
    .comment = "Picture recording not available ; only when state is failed"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_MEMORYFULL,
    .comment = "Memory full ; only when state is failed"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_PICTUREEVENTCHANGED_ERROR_LOWBATTERY,
    .comment = "Battery is too low to record."
  },
};
static struct arsdk_arg powerup_MediaRecordEvent_PictureEventChanged_arg_tab[] = {
  {
    .name = "event",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_MediaRecordEvent_PictureEventChanged_event_enum_tab,
    .nenums = ARRAY_SIZE(powerup_MediaRecordEvent_PictureEventChanged_event_enum_tab),
    .comment = "Last event of picture recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_MediaRecordEvent_PictureEventChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(powerup_MediaRecordEvent_PictureEventChanged_error_enum_tab),
    .comment = "Error to explain the event"
  },
};
static struct arsdk_enum powerup_MediaRecordEvent_VideoEventChanged_event_enum_tab[] = {
  {
    .name = "start",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_START,
    .comment = "Video start"
  },
  {
    .name = "stop",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_STOP,
    .comment = "Video stop and saved"
  },
  {
    .name = "failed",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_EVENT_FAILED,
    .comment = "Video failed"
  },
};
static struct arsdk_enum powerup_MediaRecordEvent_VideoEventChanged_error_enum_tab[] = {
  {
    .name = "ok",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_OK,
    .comment = "No Error"
  },
  {
    .name = "unknown",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_UNKNOWN,
    .comment = "Unknown generic error ; only when state is failed"
  },
  {
    .name = "busy",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_BUSY,
    .comment = "Video recording is busy ; only when state is failed"
  },
  {
    .name = "notAvailable",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_NOTAVAILABLE,
    .comment = "Video recording not available ; only when state is failed"
  },
  {
    .name = "memoryFull",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_MEMORYFULL,
    .comment = "Memory full"
  },
  {
    .name = "lowBattery",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_LOWBATTERY,
    .comment = "Battery is too low to record."
  },
  {
    .name = "autoStopped",
    .value = ARCOMMANDS_POWERUP_MEDIARECORDEVENT_VIDEOEVENTCHANGED_ERROR_AUTOSTOPPED,
    .comment = "Video was auto stopped"
  },
};
static struct arsdk_arg powerup_MediaRecordEvent_VideoEventChanged_arg_tab[] = {
  {
    .name = "event",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_MediaRecordEvent_VideoEventChanged_event_enum_tab,
    .nenums = ARRAY_SIZE(powerup_MediaRecordEvent_VideoEventChanged_event_enum_tab),
    .comment = "Event of video recording"
  },
  {
    .name = "error",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_MediaRecordEvent_VideoEventChanged_error_enum_tab,
    .nenums = ARRAY_SIZE(powerup_MediaRecordEvent_VideoEventChanged_error_enum_tab),
    .comment = "Error to explain the event"
  },
};
static struct arsdk_enum powerup_NetworkSettingsState_WifiSelectionChanged_type_enum_tab[] = {
  {
    .name = "auto_all",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_ALL,
    .comment = "Auto selection"
  },
  {
    .name = "auto_2_4ghz",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_2_4GHZ,
    .comment = "Auto selection 2.4ghz"
  },
  {
    .name = "auto_5ghz",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_AUTO_5GHZ,
    .comment = "Auto selection 5 ghz"
  },
  {
    .name = "manual",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL,
    .comment = "Manual selection"
  },
};
static struct arsdk_enum powerup_NetworkSettingsState_WifiSelectionChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
  {
    .name = "all",
    .value = ARCOMMANDS_POWERUP_NETWORKSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_ALL,
    .comment = "Both 2.4 and 5 GHz bands"
  },
};
static struct arsdk_arg powerup_NetworkSettingsState_WifiSelectionChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_NetworkSettingsState_WifiSelectionChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(powerup_NetworkSettingsState_WifiSelectionChanged_type_enum_tab),
    .comment = "The type of wifi selection settings"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_NetworkSettingsState_WifiSelectionChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(powerup_NetworkSettingsState_WifiSelectionChanged_band_enum_tab),
    .comment = "The actual wifi band state"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel (depends of the band)"
  },
};
static struct arsdk_enum powerup_NetworkState_WifiScanListChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_POWERUP_NETWORKSTATE_WIFISCANLISTCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
};
static struct arsdk_arg powerup_NetworkState_WifiScanListChanged_arg_tab[] = {
  {
    .name = "ssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "SSID of the AP"
  },
  {
    .name = "rssi",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "RSSI of the AP in dbm (negative value)"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_NetworkState_WifiScanListChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(powerup_NetworkState_WifiScanListChanged_band_enum_tab),
    .comment = "The band : 2.4 GHz or 5 GHz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Channel of the AP"
  },
};
static struct arsdk_enum powerup_NetworkState_WifiAuthChannelListChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_POWERUP_NETWORKSTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
};
static struct arsdk_arg powerup_NetworkState_WifiAuthChannelListChanged_arg_tab[] = {
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_NetworkState_WifiAuthChannelListChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(powerup_NetworkState_WifiAuthChannelListChanged_band_enum_tab),
    .comment = "The band of this channel : 2.4 GHz or 5 GHz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The authorized channel."
  },
  {
    .name = "in_or_out",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)"
  },
};
static struct arsdk_arg powerup_NetworkState_LinkQualityChanged_arg_tab[] = {
  {
    .name = "quality",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The WiFi link quality in range 0-6, the higher the value, the higher the link quality."
  },
};
static struct arsdk_enum powerup_MediaStreamingState_VideoEnableChanged_enabled_enum_tab[] = {
  {
    .name = "enabled",
    .value = ARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ENABLED,
    .comment = "Video streaming is enabled."
  },
  {
    .name = "disabled",
    .value = ARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_DISABLED,
    .comment = "Video streaming is disabled."
  },
  {
    .name = "error",
    .value = ARCOMMANDS_POWERUP_MEDIASTREAMINGSTATE_VIDEOENABLECHANGED_ENABLED_ERROR,
    .comment = "Video streaming failed to start."
  },
};
static struct arsdk_arg powerup_MediaStreamingState_VideoEnableChanged_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_MediaStreamingState_VideoEnableChanged_enabled_enum_tab,
    .nenums = ARRAY_SIZE(powerup_MediaStreamingState_VideoEnableChanged_enabled_enum_tab),
    .comment = "Current video streaming status."
  },
};
static struct arsdk_arg powerup_VideoSettingsState_AutorecordChanged_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0: Disabled 1: Enabled."
  },
};
static struct arsdk_enum powerup_VideoSettingsState_VideoModeChanged_mode_enum_tab[] = {
  {
    .name = "quality",
    .value = ARCOMMANDS_POWERUP_VIDEOSETTINGSSTATE_VIDEOMODECHANGED_MODE_QUALITY,
    .comment = "Maximize video quality (VGA 30fps)."
  },
  {
    .name = "performance",
    .value = ARCOMMANDS_POWERUP_VIDEOSETTINGSSTATE_VIDEOMODECHANGED_MODE_PERFORMANCE,
    .comment = "Maximize video performance (QVGA 24fps)."
  },
};
static struct arsdk_arg powerup_VideoSettingsState_VideoModeChanged_arg_tab[] = {
  {
    .name = "mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = powerup_VideoSettingsState_VideoModeChanged_mode_enum_tab,
    .nenums = ARRAY_SIZE(powerup_VideoSettingsState_VideoModeChanged_mode_enum_tab),
    .comment = "Video mode"
  },
};
static struct arsdk_arg powerup_SoundsState_buzzChanged_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "0: Disabled 1: Enabled."
  },
};
static struct arsdk_cmd powerup_Piloting_cmd_tab[] = {
  {
    .name = "PCMD",
    .id = ARCOMMANDS_ID_POWERUP_PILOTING_CMD_PCMD,
    .args = powerup_Piloting_PCMD_arg_tab,
    .nargs = ARRAY_SIZE(powerup_Piloting_PCMD_arg_tab),
    .comment = "Ask the Power Up speed and turn ratio."
  },
  {
    .name = "UserTakeOff",
    .id = ARCOMMANDS_ID_POWERUP_PILOTING_CMD_USERTAKEOFF,
    .args = powerup_Piloting_UserTakeOff_arg_tab,
    .nargs = ARRAY_SIZE(powerup_Piloting_UserTakeOff_arg_tab),
    .comment = "Set drone in user take off state"
  },
  {
    .name = "MotorMode",
    .id = ARCOMMANDS_ID_POWERUP_PILOTING_CMD_MOTORMODE,
    .args = powerup_Piloting_MotorMode_arg_tab,
    .nargs = ARRAY_SIZE(powerup_Piloting_MotorMode_arg_tab),
    .comment = "Motor mode"
  },
};
static struct arsdk_cmd powerup_PilotingState_cmd_tab[] = {
  {
    .name = "AlertStateChanged",
    .id = ARCOMMANDS_ID_POWERUP_PILOTINGSTATE_CMD_ALERTSTATECHANGED,
    .args = powerup_PilotingState_AlertStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_PilotingState_AlertStateChanged_arg_tab),
    .comment = "JS alert state changed"
  },
  {
    .name = "FlyingStateChanged",
    .id = ARCOMMANDS_ID_POWERUP_PILOTINGSTATE_CMD_FLYINGSTATECHANGED,
    .args = powerup_PilotingState_FlyingStateChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_PilotingState_FlyingStateChanged_arg_tab),
    .comment = "Drone flying state changed"
  },
  {
    .name = "MotorModeChanged",
    .id = ARCOMMANDS_ID_POWERUP_PILOTINGSTATE_CMD_MOTORMODECHANGED,
    .args = powerup_PilotingState_MotorModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_PilotingState_MotorModeChanged_arg_tab),
    .comment = "Motor mode changed"
  },
  {
    .name = "AttitudeChanged",
    .id = ARCOMMANDS_ID_POWERUP_PILOTINGSTATE_CMD_ATTITUDECHANGED,
    .args = powerup_PilotingState_AttitudeChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_PilotingState_AttitudeChanged_arg_tab),
    .comment = "Drone attitude changed"
  },
  {
    .name = "AltitudeChanged",
    .id = ARCOMMANDS_ID_POWERUP_PILOTINGSTATE_CMD_ALTITUDECHANGED,
    .args = powerup_PilotingState_AltitudeChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_PilotingState_AltitudeChanged_arg_tab),
    .comment = "Drone altitude changed"
  },
};
static struct arsdk_cmd powerup_PilotingSettings_cmd_tab[] = {
  {
    .name = "set",
    .id = ARCOMMANDS_ID_POWERUP_PILOTINGSETTINGS_CMD_SET,
    .args = powerup_PilotingSettings_set_arg_tab,
    .nargs = ARRAY_SIZE(powerup_PilotingSettings_set_arg_tab),
    .comment = "Set the given setting"
  },
};
static struct arsdk_cmd powerup_PilotingSettingsState_cmd_tab[] = {
  {
    .name = "settingChanged",
    .id = ARCOMMANDS_ID_POWERUP_PILOTINGSETTINGSSTATE_CMD_SETTINGCHANGED,
    .args = powerup_PilotingSettingsState_settingChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_PilotingSettingsState_settingChanged_arg_tab),
    .comment = "Fired when a setting has changed"
  },
};
static struct arsdk_cmd powerup_MediaRecord_cmd_tab[] = {
  {
    .name = "PictureV2",
    .id = ARCOMMANDS_ID_POWERUP_MEDIARECORD_CMD_PICTUREV2,
    .args = NULL,
    .nargs = 0,
    .comment = "Take picture"
  },
  {
    .name = "VideoV2",
    .id = ARCOMMANDS_ID_POWERUP_MEDIARECORD_CMD_VIDEOV2,
    .args = powerup_MediaRecord_VideoV2_arg_tab,
    .nargs = ARRAY_SIZE(powerup_MediaRecord_VideoV2_arg_tab),
    .comment = "Video record"
  },
};
static struct arsdk_cmd powerup_MediaRecordState_cmd_tab[] = {
  {
    .name = "PictureStateChangedV2",
    .id = ARCOMMANDS_ID_POWERUP_MEDIARECORDSTATE_CMD_PICTURESTATECHANGEDV2,
    .args = powerup_MediaRecordState_PictureStateChangedV2_arg_tab,
    .nargs = ARRAY_SIZE(powerup_MediaRecordState_PictureStateChangedV2_arg_tab),
    .comment = "State of device picture recording changed"
  },
  {
    .name = "VideoStateChangedV2",
    .id = ARCOMMANDS_ID_POWERUP_MEDIARECORDSTATE_CMD_VIDEOSTATECHANGEDV2,
    .args = powerup_MediaRecordState_VideoStateChangedV2_arg_tab,
    .nargs = ARRAY_SIZE(powerup_MediaRecordState_VideoStateChangedV2_arg_tab),
    .comment = "State of device video recording changed"
  },
};
static struct arsdk_cmd powerup_MediaRecordEvent_cmd_tab[] = {
  {
    .name = "PictureEventChanged",
    .id = ARCOMMANDS_ID_POWERUP_MEDIARECORDEVENT_CMD_PICTUREEVENTCHANGED,
    .args = powerup_MediaRecordEvent_PictureEventChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_MediaRecordEvent_PictureEventChanged_arg_tab),
    .comment = "Event of picture recording"
  },
  {
    .name = "VideoEventChanged",
    .id = ARCOMMANDS_ID_POWERUP_MEDIARECORDEVENT_CMD_VIDEOEVENTCHANGED,
    .args = powerup_MediaRecordEvent_VideoEventChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_MediaRecordEvent_VideoEventChanged_arg_tab),
    .comment = "Event of video recording"
  },
};
static struct arsdk_cmd powerup_NetworkSettings_cmd_tab[] = {
  {
    .name = "WifiSelection",
    .id = ARCOMMANDS_ID_POWERUP_NETWORKSETTINGS_CMD_WIFISELECTION,
    .args = powerup_NetworkSettings_WifiSelection_arg_tab,
    .nargs = ARRAY_SIZE(powerup_NetworkSettings_WifiSelection_arg_tab),
    .comment = "Auto-select channel of choosen band"
  },
};
static struct arsdk_cmd powerup_NetworkSettingsState_cmd_tab[] = {
  {
    .name = "WifiSelectionChanged",
    .id = ARCOMMANDS_ID_POWERUP_NETWORKSETTINGSSTATE_CMD_WIFISELECTIONCHANGED,
    .args = powerup_NetworkSettingsState_WifiSelectionChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_NetworkSettingsState_WifiSelectionChanged_arg_tab),
    .comment = "Wifi selection from product"
  },
};
static struct arsdk_cmd powerup_Network_cmd_tab[] = {
  {
    .name = "WifiScan",
    .id = ARCOMMANDS_ID_POWERUP_NETWORK_CMD_WIFISCAN,
    .args = powerup_Network_WifiScan_arg_tab,
    .nargs = ARRAY_SIZE(powerup_Network_WifiScan_arg_tab),
    .comment = "Launches wifi network scan"
  },
  {
    .name = "WifiAuthChannel",
    .id = ARCOMMANDS_ID_POWERUP_NETWORK_CMD_WIFIAUTHCHANNEL,
    .args = NULL,
    .nargs = 0,
    .comment = "Controller inquire the list of authorized wifi channels."
  },
};
static struct arsdk_cmd powerup_NetworkState_cmd_tab[] = {
  {
    .name = "WifiScanListChanged",
    .id = ARCOMMANDS_ID_POWERUP_NETWORKSTATE_CMD_WIFISCANLISTCHANGED,
    .args = powerup_NetworkState_WifiScanListChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_NetworkState_WifiScanListChanged_arg_tab),
    .comment = "One scanning result found"
  },
  {
    .name = "AllWifiScanChanged",
    .id = ARCOMMANDS_ID_POWERUP_NETWORKSTATE_CMD_ALLWIFISCANCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "State sent when all scanning result sent"
  },
  {
    .name = "WifiAuthChannelListChanged",
    .id = ARCOMMANDS_ID_POWERUP_NETWORKSTATE_CMD_WIFIAUTHCHANNELLISTCHANGED,
    .args = powerup_NetworkState_WifiAuthChannelListChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_NetworkState_WifiAuthChannelListChanged_arg_tab),
    .comment = "Notify of an Authorized Channel."
  },
  {
    .name = "AllWifiAuthChannelChanged",
    .id = ARCOMMANDS_ID_POWERUP_NETWORKSTATE_CMD_ALLWIFIAUTHCHANNELCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "Notify the end of the list of Authorized wifi Channel."
  },
  {
    .name = "LinkQualityChanged",
    .id = ARCOMMANDS_ID_POWERUP_NETWORKSTATE_CMD_LINKQUALITYCHANGED,
    .args = powerup_NetworkState_LinkQualityChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_NetworkState_LinkQualityChanged_arg_tab),
    .comment = "Notification sent by the firmware to give an indication of the WiFi link quality."
  },
};
static struct arsdk_cmd powerup_MediaStreaming_cmd_tab[] = {
  {
    .name = "VideoEnable",
    .id = ARCOMMANDS_ID_POWERUP_MEDIASTREAMING_CMD_VIDEOENABLE,
    .args = powerup_MediaStreaming_VideoEnable_arg_tab,
    .nargs = ARRAY_SIZE(powerup_MediaStreaming_VideoEnable_arg_tab),
    .comment = "Enable/disable video streaming."
  },
};
static struct arsdk_cmd powerup_MediaStreamingState_cmd_tab[] = {
  {
    .name = "VideoEnableChanged",
    .id = ARCOMMANDS_ID_POWERUP_MEDIASTREAMINGSTATE_CMD_VIDEOENABLECHANGED,
    .args = powerup_MediaStreamingState_VideoEnableChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_MediaStreamingState_VideoEnableChanged_arg_tab),
    .comment = "Return video streaming status."
  },
};
static struct arsdk_cmd powerup_VideoSettings_cmd_tab[] = {
  {
    .name = "Autorecord",
    .id = ARCOMMANDS_ID_POWERUP_VIDEOSETTINGS_CMD_AUTORECORD,
    .args = powerup_VideoSettings_Autorecord_arg_tab,
    .nargs = ARRAY_SIZE(powerup_VideoSettings_Autorecord_arg_tab),
    .comment = "Set video automatic recording state."
  },
  {
    .name = "VideoMode",
    .id = ARCOMMANDS_ID_POWERUP_VIDEOSETTINGS_CMD_VIDEOMODE,
    .args = powerup_VideoSettings_VideoMode_arg_tab,
    .nargs = ARRAY_SIZE(powerup_VideoSettings_VideoMode_arg_tab),
    .comment = "Set video mode"
  },
};
static struct arsdk_cmd powerup_VideoSettingsState_cmd_tab[] = {
  {
    .name = "AutorecordChanged",
    .id = ARCOMMANDS_ID_POWERUP_VIDEOSETTINGSSTATE_CMD_AUTORECORDCHANGED,
    .args = powerup_VideoSettingsState_AutorecordChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_VideoSettingsState_AutorecordChanged_arg_tab),
    .comment = "Get video automatic recording status."
  },
  {
    .name = "VideoModeChanged",
    .id = ARCOMMANDS_ID_POWERUP_VIDEOSETTINGSSTATE_CMD_VIDEOMODECHANGED,
    .args = powerup_VideoSettingsState_VideoModeChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_VideoSettingsState_VideoModeChanged_arg_tab),
    .comment = "Video mode"
  },
};
static struct arsdk_cmd powerup_Sounds_cmd_tab[] = {
  {
    .name = "buzz",
    .id = ARCOMMANDS_ID_POWERUP_SOUNDS_CMD_BUZZ,
    .args = powerup_Sounds_buzz_arg_tab,
    .nargs = ARRAY_SIZE(powerup_Sounds_buzz_arg_tab),
    .comment = "Enable/disable the buzzer sound"
  },
};
static struct arsdk_cmd powerup_SoundsState_cmd_tab[] = {
  {
    .name = "buzzChanged",
    .id = ARCOMMANDS_ID_POWERUP_SOUNDSSTATE_CMD_BUZZCHANGED,
    .args = powerup_SoundsState_buzzChanged_arg_tab,
    .nargs = ARRAY_SIZE(powerup_SoundsState_buzzChanged_arg_tab),
    .comment = "State of the buzzer"
  },
};
static struct arsdk_class powerup_class_tab[] = {
  {
    .name = "Piloting",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_PILOTING,
    .cmds = powerup_Piloting_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_Piloting_cmd_tab),
    .comment = "All commands related to piloting the PowerUp"
  },
  {
    .name = "PilotingState",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_PILOTINGSTATE,
    .cmds = powerup_PilotingState_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_PilotingState_cmd_tab),
    .comment = "Piloting state from Power Up."
  },
  {
    .name = "PilotingSettings",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_PILOTINGSETTINGS,
    .cmds = powerup_PilotingSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_PilotingSettings_cmd_tab),
    .comment = "Piloting settings"
  },
  {
    .name = "PilotingSettingsState",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_PILOTINGSETTINGSSTATE,
    .cmds = powerup_PilotingSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_PilotingSettingsState_cmd_tab),
    .comment = "Piloting settings"
  },
  {
    .name = "MediaRecord",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_MEDIARECORD,
    .cmds = powerup_MediaRecord_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_MediaRecord_cmd_tab),
    .comment = "Media recording management"
  },
  {
    .name = "MediaRecordState",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_MEDIARECORDSTATE,
    .cmds = powerup_MediaRecordState_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_MediaRecordState_cmd_tab),
    .comment = "State of media recording"
  },
  {
    .name = "MediaRecordEvent",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_MEDIARECORDEVENT,
    .cmds = powerup_MediaRecordEvent_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_MediaRecordEvent_cmd_tab),
    .comment = "Events of media recording"
  },
  {
    .name = "NetworkSettings",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_NETWORKSETTINGS,
    .cmds = powerup_NetworkSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_NetworkSettings_cmd_tab),
    .comment = "Network settings commands"
  },
  {
    .name = "NetworkSettingsState",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_NETWORKSETTINGSSTATE,
    .cmds = powerup_NetworkSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_NetworkSettingsState_cmd_tab),
    .comment = "Network settings state from product"
  },
  {
    .name = "Network",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_NETWORK,
    .cmds = powerup_Network_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_Network_cmd_tab),
    .comment = "Network related commands"
  },
  {
    .name = "NetworkState",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_NETWORKSTATE,
    .cmds = powerup_NetworkState_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_NetworkState_cmd_tab),
    .comment = "Network state from Product"
  },
  {
    .name = "MediaStreaming",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_MEDIASTREAMING,
    .cmds = powerup_MediaStreaming_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_MediaStreaming_cmd_tab),
    .comment = "Control media streaming behavior."
  },
  {
    .name = "MediaStreamingState",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_MEDIASTREAMINGSTATE,
    .cmds = powerup_MediaStreamingState_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_MediaStreamingState_cmd_tab),
    .comment = "Media streaming status."
  },
  {
    .name = "VideoSettings",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_VIDEOSETTINGS,
    .cmds = powerup_VideoSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_VideoSettings_cmd_tab),
    .comment = "Video settings."
  },
  {
    .name = "VideoSettingsState",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_VIDEOSETTINGSSTATE,
    .cmds = powerup_VideoSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_VideoSettingsState_cmd_tab),
    .comment = "Video settings state."
  },
  {
    .name = "Sounds",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_SOUNDS,
    .cmds = powerup_Sounds_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_Sounds_cmd_tab),
    .comment = "Sounds related commands."
  },
  {
    .name = "SoundsState",
    .ident = ARCOMMANDS_ID_POWERUP_CLASS_SOUNDSSTATE,
    .cmds = powerup_SoundsState_cmd_tab,
    .ncmds = ARRAY_SIZE(powerup_SoundsState_cmd_tab),
    .comment = "Sound related events."
  },
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = NULL,
    .ncmds = 0,
    .comment = ""
  },
};
static struct arsdk_arg rc_defaultCls_monitor_channels_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 for enable / 0 to disable"
  },
};
static struct arsdk_arg rc_defaultCls_start_calibration_arg_tab[] = {
  {
    .name = "calibration_type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Type of calibration.\nCalibration type."
  },
  {
    .name = "channel_action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Channel action.\nonly used when calibration_type=min_max.\nChannel action."
  },
  {
    .name = "channel_type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Channel type.\nonly used when calibration_type=min_max.\nChannel physical type."
  },
};
static struct arsdk_arg rc_defaultCls_invert_channel_arg_tab[] = {
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Channel action.\nChannel action."
  },
  {
    .name = "flag",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 to invert channel 0 to restore channel."
  },
};
static struct arsdk_arg rc_defaultCls_enable_receiver_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 for enable / 0 to disable"
  },
};
static struct arsdk_arg rc_defaultCls_receiver_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "current state.\nRC Receiver state."
  },
  {
    .name = "protocol",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Protocol used by RC."
  },
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if enabled, 0 otherwise.\nIf enabled, drone will apply values sent by RC receiver."
  },
};
static struct arsdk_arg rc_defaultCls_channels_monitor_state_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if enabled, 0 if disabled"
  },
};
static struct arsdk_arg rc_defaultCls_channel_value_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "RC channel id."
  },
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "RC channel action.\nChannel action."
  },
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "RC channel value."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Item attribute Bitfield.\nFirst: indicate it's the first element of the list.\nLast: indicate it's the last element of the list.\nFlags use by maps and lists"
  },
};
static struct arsdk_arg rc_defaultCls_calibration_state_arg_tab[] = {
  {
    .name = "calibration_type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current calibration type\nset to 'none' if no calibration in progress.\nCalibration type."
  },
  {
    .name = "channel_action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Current channel action calibration\nOnly used when calibration_type=min_max.\nChannel action."
  },
  {
    .name = "required",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "bitfield of required channel actions.\nNeutral channels calibration is always required.\nChannel action."
  },
  {
    .name = "calibrated",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "bitfield of calibrated channel actions.\nChannel action."
  },
  {
    .name = "neutral_calibrated",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if neutral channels are calibrated, 0 otherwise."
  },
};
static struct arsdk_arg rc_defaultCls_channel_action_item_arg_tab[] = {
  {
    .name = "action",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Channel action.\nChannel action."
  },
  {
    .name = "supported_type",
    .type = ARSDK_ARG_TYPE_U32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bitfield of supported channel types.\nChannel physical type."
  },
  {
    .name = "calibrated_type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Calibrated action channel type (none if not calibrated).\nChannel physical type."
  },
  {
    .name = "inverted",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if inverted, 0 otherwise."
  },
};
static struct arsdk_cmd rc_defaultCls_cmd_tab[] = {
  {
    .name = "monitor_channels",
    .id = ARCOMMANDS_ID_RC_CMD_MONITOR_CHANNELS,
    .args = rc_defaultCls_monitor_channels_arg_tab,
    .nargs = ARRAY_SIZE(rc_defaultCls_monitor_channels_arg_tab),
    .comment = "Monitor RC channels"
  },
  {
    .name = "start_calibration",
    .id = ARCOMMANDS_ID_RC_CMD_START_CALIBRATION,
    .args = rc_defaultCls_start_calibration_arg_tab,
    .nargs = ARRAY_SIZE(rc_defaultCls_start_calibration_arg_tab),
    .comment = "Start a calibration"
  },
  {
    .name = "invert_channel",
    .id = ARCOMMANDS_ID_RC_CMD_INVERT_CHANNEL,
    .args = rc_defaultCls_invert_channel_arg_tab,
    .nargs = ARRAY_SIZE(rc_defaultCls_invert_channel_arg_tab),
    .comment = "Invert a RC channel values"
  },
  {
    .name = "abort_calibration",
    .id = ARCOMMANDS_ID_RC_CMD_ABORT_CALIBRATION,
    .args = NULL,
    .nargs = 0,
    .comment = "Abort current calibration"
  },
  {
    .name = "reset_calibration",
    .id = ARCOMMANDS_ID_RC_CMD_RESET_CALIBRATION,
    .args = NULL,
    .nargs = 0,
    .comment = "Reset calibration to default values"
  },
  {
    .name = "enable_receiver",
    .id = ARCOMMANDS_ID_RC_CMD_ENABLE_RECEIVER,
    .args = rc_defaultCls_enable_receiver_arg_tab,
    .nargs = ARRAY_SIZE(rc_defaultCls_enable_receiver_arg_tab),
    .comment = "Enable RC receiver"
  },
  {
    .name = "receiver_state",
    .id = ARCOMMANDS_ID_RC_CMD_RECEIVER_STATE,
    .args = rc_defaultCls_receiver_state_arg_tab,
    .nargs = ARRAY_SIZE(rc_defaultCls_receiver_state_arg_tab),
    .comment = "State of drone RC receiver"
  },
  {
    .name = "channels_monitor_state",
    .id = ARCOMMANDS_ID_RC_CMD_CHANNELS_MONITOR_STATE,
    .args = rc_defaultCls_channels_monitor_state_arg_tab,
    .nargs = ARRAY_SIZE(rc_defaultCls_channels_monitor_state_arg_tab),
    .comment = "RC channels monitor state"
  },
  {
    .name = "channel_value",
    .id = ARCOMMANDS_ID_RC_CMD_CHANNEL_VALUE,
    .args = rc_defaultCls_channel_value_arg_tab,
    .nargs = ARRAY_SIZE(rc_defaultCls_channel_value_arg_tab),
    .comment = "RC channels value"
  },
  {
    .name = "calibration_state",
    .id = ARCOMMANDS_ID_RC_CMD_CALIBRATION_STATE,
    .args = rc_defaultCls_calibration_state_arg_tab,
    .nargs = ARRAY_SIZE(rc_defaultCls_calibration_state_arg_tab),
    .comment = "Channels calibration state"
  },
  {
    .name = "channel_action_item",
    .id = ARCOMMANDS_ID_RC_CMD_CHANNEL_ACTION_ITEM,
    .args = rc_defaultCls_channel_action_item_arg_tab,
    .nargs = ARRAY_SIZE(rc_defaultCls_channel_action_item_arg_tab),
    .comment = "Channel action item"
  },
};
static struct arsdk_class rc_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = rc_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(rc_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg sequoia_cam_defaultCls_radiometric_calib_start_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Id of the accessory for the session."
  },
};
static struct arsdk_arg sequoia_cam_defaultCls_radiometric_calib_status_arg_tab[] = {
  {
    .name = "cam_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Camera id, as given in the [connected accessories](#1-33-0) event."
  },
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Radiometric calibration status"
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg sequoia_cam_defaultCls_radiometric_calib_result_arg_tab[] = {
  {
    .name = "cam_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Camera id, as given in the [connected accessories](#1-33-0) event."
  },
  {
    .name = "value",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Last radiometric calibration result"
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_cmd sequoia_cam_defaultCls_cmd_tab[] = {
  {
    .name = "radiometric_calib_start",
    .id = ARCOMMANDS_ID_SEQUOIA_CAM_CMD_RADIOMETRIC_CALIB_START,
    .args = sequoia_cam_defaultCls_radiometric_calib_start_arg_tab,
    .nargs = ARRAY_SIZE(sequoia_cam_defaultCls_radiometric_calib_start_arg_tab),
    .comment = "Start Sequoia radiometric calibration"
  },
  {
    .name = "radiometric_calib_status",
    .id = ARCOMMANDS_ID_SEQUOIA_CAM_CMD_RADIOMETRIC_CALIB_STATUS,
    .args = sequoia_cam_defaultCls_radiometric_calib_status_arg_tab,
    .nargs = ARRAY_SIZE(sequoia_cam_defaultCls_radiometric_calib_status_arg_tab),
    .comment = "Is radiometric calibration available ?"
  },
  {
    .name = "radiometric_calib_result",
    .id = ARCOMMANDS_ID_SEQUOIA_CAM_CMD_RADIOMETRIC_CALIB_RESULT,
    .args = sequoia_cam_defaultCls_radiometric_calib_result_arg_tab,
    .nargs = ARRAY_SIZE(sequoia_cam_defaultCls_radiometric_calib_result_arg_tab),
    .comment = "Last radiometric calibration result"
  },
};
static struct arsdk_class sequoia_cam_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = sequoia_cam_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(sequoia_cam_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg SkyController_Wifi_ConnectToWifi_arg_tab[] = {
  {
    .name = "bssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wifi bssid"
  },
  {
    .name = "ssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wifi ssid"
  },
  {
    .name = "passphrase",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wifi passphrase"
  },
};
static struct arsdk_arg SkyController_Wifi_ForgetWifi_arg_tab[] = {
  {
    .name = "ssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wifi ssid"
  },
};
static struct arsdk_arg SkyController_Device_ConnectToDevice_arg_tab[] = {
  {
    .name = "deviceName",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Device name"
  },
};
static struct arsdk_arg SkyController_AccessPointSettings_AccessPointSSID_arg_tab[] = {
  {
    .name = "ssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "AccessPoint SSID"
  },
};
static struct arsdk_arg SkyController_AccessPointSettings_AccessPointChannel_arg_tab[] = {
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "AccessPoint Channel"
  },
};
static struct arsdk_enum SkyController_AccessPointSettings_WifiSelection_type_enum_tab[] = {
  {
    .name = "manual",
    .value = ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_TYPE_MANUAL,
    .comment = "Manual selection"
  },
};
static struct arsdk_enum SkyController_AccessPointSettings_WifiSelection_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISELECTION_BAND_5GHZ,
    .comment = "5 GHz band"
  },
};
static struct arsdk_arg SkyController_AccessPointSettings_WifiSelection_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_AccessPointSettings_WifiSelection_type_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_AccessPointSettings_WifiSelection_type_enum_tab),
    .comment = "The type of wifi selection (only manual at the moment)"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_AccessPointSettings_WifiSelection_band_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_AccessPointSettings_WifiSelection_band_enum_tab),
    .comment = "The allowed band : 2.4 Ghz or 5 Ghz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel"
  },
};
static struct arsdk_enum SkyController_AccessPointSettings_WifiSecurity_security_type_enum_tab[] = {
  {
    .name = "open",
    .value = ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISECURITY_SECURITY_TYPE_OPEN,
    .comment = "Wifi is not protected (default)"
  },
  {
    .name = "wpa2",
    .value = ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGS_WIFISECURITY_SECURITY_TYPE_WPA2,
    .comment = "Wifi is protected by wpa2"
  },
};
static struct arsdk_arg SkyController_AccessPointSettings_WifiSecurity_arg_tab[] = {
  {
    .name = "security_type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_AccessPointSettings_WifiSecurity_security_type_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_AccessPointSettings_WifiSecurity_security_type_enum_tab),
    .comment = "The type of security for the network"
  },
  {
    .name = "key",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The security key (ignored if security_type is open)"
  },
};
static struct arsdk_arg SkyController_ButtonMappings_setButtonMapping_arg_tab[] = {
  {
    .name = "key_id",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "The keycode to map"
  },
  {
    .name = "mapping_uid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The mapping to associate with the key"
  },
};
static struct arsdk_arg SkyController_AxisMappings_setAxisMapping_arg_tab[] = {
  {
    .name = "axis_id",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "The axiscode to map"
  },
  {
    .name = "mapping_uid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The mapping to associate with the axis"
  },
};
static struct arsdk_arg SkyController_AxisFilters_setAxisFilter_arg_tab[] = {
  {
    .name = "axis_id",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "The axiscode to filter"
  },
  {
    .name = "filter_uid_or_builder",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The mapping preset to associate with the axis\n(Or a string to build a new one)"
  },
};
static struct arsdk_enum SkyController_CoPiloting_setPilotingSource_source_enum_tab[] = {
  {
    .name = "SkyController",
    .value = ARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE_SKYCONTROLLER,
    .comment = "Use the SkyController joysticks"
  },
  {
    .name = "Controller",
    .value = ARCOMMANDS_SKYCONTROLLER_COPILOTING_SETPILOTINGSOURCE_SOURCE_CONTROLLER,
    .comment = "Use the Tablet (or smartphone, or whatever) controls\nDisables the SkyController joysticks"
  },
};
static struct arsdk_arg SkyController_CoPiloting_setPilotingSource_arg_tab[] = {
  {
    .name = "source",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_CoPiloting_setPilotingSource_source_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_CoPiloting_setPilotingSource_source_enum_tab),
    .comment = "The new piloting source"
  },
};
static struct arsdk_arg SkyController_Calibration_enableMagnetoCalibrationQualityUpdates_arg_tab[] = {
  {
    .name = "enable",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flag to enable the feature:\n1 = Enable quality updates\n0 = Disable quality updates"
  },
};
static struct arsdk_arg SkyController_WifiState_WifiList_arg_tab[] = {
  {
    .name = "bssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wifi bssid"
  },
  {
    .name = "ssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wifi ssid"
  },
  {
    .name = "secured",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Is wifi secured by passphrase"
  },
  {
    .name = "saved",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Is wifi saved in terminal"
  },
  {
    .name = "rssi",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wifi rssi"
  },
  {
    .name = "frequency",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wifi frequency"
  },
};
static struct arsdk_enum SkyController_WifiState_ConnexionChanged_status_enum_tab[] = {
  {
    .name = "connected",
    .value = ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_CONNECTED,
    .comment = "Connected"
  },
  {
    .name = "error",
    .value = ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_ERROR,
    .comment = "Error"
  },
  {
    .name = "disconnected",
    .value = ARCOMMANDS_SKYCONTROLLER_WIFISTATE_CONNEXIONCHANGED_STATUS_DISCONNECTED,
    .comment = "Disconnected"
  },
};
static struct arsdk_arg SkyController_WifiState_ConnexionChanged_arg_tab[] = {
  {
    .name = "ssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Wifi ssid"
  },
  {
    .name = "status",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_WifiState_ConnexionChanged_status_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_WifiState_ConnexionChanged_status_enum_tab),
    .comment = "Wifi status"
  },
};
static struct arsdk_enum SkyController_WifiState_WifiAuthChannelListChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
};
static struct arsdk_arg SkyController_WifiState_WifiAuthChannelListChanged_arg_tab[] = {
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_WifiState_WifiAuthChannelListChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_WifiState_WifiAuthChannelListChanged_band_enum_tab),
    .comment = "The band of this channel : 2.4 GHz or 5 GHz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The authorized channel"
  },
  {
    .name = "in_or_out",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bit 0 is 1 if channel is authorized outside (0 otherwise)\nBit 1 is 1 if channel is authorized inside (0 otherwise)"
  },
};
static struct arsdk_arg SkyController_WifiState_WifiSignalChanged_arg_tab[] = {
  {
    .name = "level",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Level of the signal. Levels are from 0 to 5.\n0 is an unknown value. 1 is a weak wifi signal, 5 is the best."
  },
};
static struct arsdk_enum SkyController_WifiState_WifiAuthChannelListChangedV2_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIAUTHCHANNELLISTCHANGEDV2_BAND_5GHZ,
    .comment = "5 GHz band"
  },
};
static struct arsdk_arg SkyController_WifiState_WifiAuthChannelListChangedV2_arg_tab[] = {
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_WifiState_WifiAuthChannelListChangedV2_band_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_WifiState_WifiAuthChannelListChangedV2_band_enum_tab),
    .comment = "The band of this channel : 2.4 GHz or 5 GHz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The authorized channel"
  },
  {
    .name = "in_or_out",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Bit 0 is 1 if channel is authorized outside (0 otherwise)\nBit 1 is 1 if channel is authorized inside (0 otherwise)"
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "List entry attribute Bitfield.\n0x01: First: indicate it's the first element of the list.\n0x02: Last: indicate it's the last element of the list.\n0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n0x08: Remove: This value should be removed from the existing list."
  },
};
static struct arsdk_arg SkyController_WifiState_WifiCountryChanged_arg_tab[] = {
  {
    .name = "code",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Country code with ISO 3166 format, empty string means unknown country."
  },
};
static struct arsdk_enum SkyController_WifiState_WifiEnvironmentChanged_environment_enum_tab[] = {
  {
    .name = "indoor",
    .value = ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIENVIRONMENTCHANGED_ENVIRONMENT_INDOOR,
    .comment = "indoor environment"
  },
  {
    .name = "outdoor",
    .value = ARCOMMANDS_SKYCONTROLLER_WIFISTATE_WIFIENVIRONMENTCHANGED_ENVIRONMENT_OUTDOOR,
    .comment = "outdoor environment"
  },
};
static struct arsdk_arg SkyController_WifiState_WifiEnvironmentChanged_arg_tab[] = {
  {
    .name = "environment",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_WifiState_WifiEnvironmentChanged_environment_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_WifiState_WifiEnvironmentChanged_environment_enum_tab),
    .comment = "Type of environment"
  },
};
static struct arsdk_arg SkyController_DeviceState_DeviceList_arg_tab[] = {
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Device name"
  },
};
static struct arsdk_enum SkyController_DeviceState_ConnexionChanged_status_enum_tab[] = {
  {
    .name = "notConnected",
    .value = ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_NOTCONNECTED,
    .comment = "Not Connected"
  },
  {
    .name = "connecting",
    .value = ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_CONNECTING,
    .comment = "Connecting to Drone"
  },
  {
    .name = "connected",
    .value = ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_CONNECTED,
    .comment = "Connected to Drone"
  },
  {
    .name = "disconnecting",
    .value = ARCOMMANDS_SKYCONTROLLER_DEVICESTATE_CONNEXIONCHANGED_STATUS_DISCONNECTING,
    .comment = "Disconnecting from Drone"
  },
};
static struct arsdk_arg SkyController_DeviceState_ConnexionChanged_arg_tab[] = {
  {
    .name = "status",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_DeviceState_ConnexionChanged_status_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_DeviceState_ConnexionChanged_status_enum_tab),
    .comment = "Connection status"
  },
  {
    .name = "deviceName",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Drone name"
  },
  {
    .name = "deviceProductID",
    .type = ARSDK_ARG_TYPE_U16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Drone product IDentifier"
  },
};
static struct arsdk_arg SkyController_SettingsState_ProductSerialChanged_arg_tab[] = {
  {
    .name = "serialNumber",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Serial number (hexadecimal value)"
  },
};
static struct arsdk_enum SkyController_SettingsState_ProductVariantChanged_variant_enum_tab[] = {
  {
    .name = "bebop",
    .value = ARCOMMANDS_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVARIANTCHANGED_VARIANT_BEBOP,
    .comment = "SkyController of the bebop generation.\n(Bebop battery, original key layout, red/blue/yellow)"
  },
  {
    .name = "bebop2",
    .value = ARCOMMANDS_SKYCONTROLLER_SETTINGSSTATE_PRODUCTVARIANTCHANGED_VARIANT_BEBOP2,
    .comment = "SkyController of the bebop2 generation.\n(Bebop2 battery, updated key layout, black)"
  },
};
static struct arsdk_arg SkyController_SettingsState_ProductVariantChanged_arg_tab[] = {
  {
    .name = "variant",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_SettingsState_ProductVariantChanged_variant_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_SettingsState_ProductVariantChanged_variant_enum_tab),
    .comment = "Variant of the product"
  },
};
static struct arsdk_arg SkyController_SettingsState_ProductVersionChanged_arg_tab[] = {
  {
    .name = "software",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product software version"
  },
  {
    .name = "hardware",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product hardware version"
  },
};
static struct arsdk_arg SkyController_SettingsState_CPUID_arg_tab[] = {
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Product main cpu id"
  },
};
static struct arsdk_arg SkyController_SkyControllerState_BatteryChanged_arg_tab[] = {
  {
    .name = "percent",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Controller battery: from 0 (empty) to 100 (full charge).\nValue of 255 when charging."
  },
};
static struct arsdk_arg SkyController_SkyControllerState_GpsFixChanged_arg_tab[] = {
  {
    .name = "fixed",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "SkyController fixed"
  },
};
static struct arsdk_arg SkyController_SkyControllerState_GpsPositionChanged_arg_tab[] = {
  {
    .name = "latitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "SkyController latitude (500. if not available)"
  },
  {
    .name = "longitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "SkyController longiture (500. if not available)"
  },
  {
    .name = "altitude",
    .type = ARSDK_ARG_TYPE_DOUBLE,
    .enums = NULL,
    .nenums = 0,
    .comment = "Altitude (in meters) above sea level.\nOnly meaningful if latitude and longiture are available"
  },
  {
    .name = "heading",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "SkyController heading relative to magnetic north\n(500.f if not available)"
  },
};
static struct arsdk_enum SkyController_SkyControllerState_BatteryState_state_enum_tab[] = {
  {
    .name = "charging",
    .value = ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_CHARGING,
    .comment = "Battery is charging"
  },
  {
    .name = "charged",
    .value = ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_CHARGED,
    .comment = "Battery is fully charged"
  },
  {
    .name = "discharging",
    .value = ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_DISCHARGING,
    .comment = "Battery is discharging (normal case when on and unplugged)"
  },
  {
    .name = "discharging_low",
    .value = ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_DISCHARGING_LOW,
    .comment = "Battery is low (Can still work for a few minutes)"
  },
  {
    .name = "discharging_critical",
    .value = ARCOMMANDS_SKYCONTROLLER_SKYCONTROLLERSTATE_BATTERYSTATE_STATE_DISCHARGING_CRITICAL,
    .comment = "Battery is critically low (the product will automatically shut down if not plugged)"
  },
};
static struct arsdk_arg SkyController_SkyControllerState_BatteryState_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_SkyControllerState_BatteryState_state_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_SkyControllerState_BatteryState_state_enum_tab),
    .comment = "Current battery state"
  },
};
static struct arsdk_arg SkyController_SkyControllerState_AttitudeChanged_arg_tab[] = {
  {
    .name = "q0",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "SkyController Attitude q0 (quaternion scalar part)"
  },
  {
    .name = "q1",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "SkyController Attitude q1 (quaternion vector part)"
  },
  {
    .name = "q2",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "SkyController Attitude q2 (quaternion vector part)"
  },
  {
    .name = "q3",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "SkyController Attitude q3 (quaternion vector part)"
  },
};
static struct arsdk_arg SkyController_AccessPointSettingsState_AccessPointSSIDChanged_arg_tab[] = {
  {
    .name = "ssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "AccessPoint SSID"
  },
};
static struct arsdk_arg SkyController_AccessPointSettingsState_AccessPointChannelChanged_arg_tab[] = {
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "AccessPoint Channel"
  },
};
static struct arsdk_enum SkyController_AccessPointSettingsState_WifiSelectionChanged_type_enum_tab[] = {
  {
    .name = "manual",
    .value = ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_TYPE_MANUAL,
    .comment = "Manual selection"
  },
};
static struct arsdk_enum SkyController_AccessPointSettingsState_WifiSelectionChanged_band_enum_tab[] = {
  {
    .name = "2_4ghz",
    .value = ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_2_4GHZ,
    .comment = "2.4 GHz band"
  },
  {
    .name = "5ghz",
    .value = ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISELECTIONCHANGED_BAND_5GHZ,
    .comment = "5 GHz band"
  },
};
static struct arsdk_arg SkyController_AccessPointSettingsState_WifiSelectionChanged_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_AccessPointSettingsState_WifiSelectionChanged_type_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_AccessPointSettingsState_WifiSelectionChanged_type_enum_tab),
    .comment = "The type of wifi selection (only manual at the moment)"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_AccessPointSettingsState_WifiSelectionChanged_band_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_AccessPointSettingsState_WifiSelectionChanged_band_enum_tab),
    .comment = "The allowed band : 2.4 Ghz or 5 Ghz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel"
  },
};
static struct arsdk_enum SkyController_AccessPointSettingsState_WifiSecurityChanged_security_type_enum_tab[] = {
  {
    .name = "open",
    .value = ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_SECURITY_TYPE_OPEN,
    .comment = "Wifi is not protected (default)"
  },
  {
    .name = "wpa2",
    .value = ARCOMMANDS_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_WIFISECURITYCHANGED_SECURITY_TYPE_WPA2,
    .comment = "Wifi is protected by wpa2"
  },
};
static struct arsdk_arg SkyController_AccessPointSettingsState_WifiSecurityChanged_arg_tab[] = {
  {
    .name = "security_type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_AccessPointSettingsState_WifiSecurityChanged_security_type_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_AccessPointSettingsState_WifiSecurityChanged_security_type_enum_tab),
    .comment = "The type of security for the network"
  },
  {
    .name = "key",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The security key (ignored if security_type is open)"
  },
};
static struct arsdk_enum SkyController_GamepadInfosState_gamepadControl_type_enum_tab[] = {
  {
    .name = "axis",
    .value = ARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE_AXIS,
    .comment = "An analog axis (one of the 4 joysticks)"
  },
  {
    .name = "button",
    .value = ARCOMMANDS_SKYCONTROLLER_GAMEPADINFOSSTATE_GAMEPADCONTROL_TYPE_BUTTON,
    .comment = "A button (including small joystick clicks)"
  },
};
static struct arsdk_arg SkyController_GamepadInfosState_gamepadControl_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_GamepadInfosState_gamepadControl_type_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_GamepadInfosState_gamepadControl_type_enum_tab),
    .comment = "The type (axis/button) of the control"
  },
  {
    .name = "id",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "The button or axis id\nA button and an axis can have the same ID, but their type is different"
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Display name for the control"
  },
};
static struct arsdk_arg SkyController_ButtonMappingsState_currentButtonMappings_arg_tab[] = {
  {
    .name = "key_id",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "The keycode mapped"
  },
  {
    .name = "mapping_uid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The mapping associated"
  },
};
static struct arsdk_arg SkyController_ButtonMappingsState_availableButtonMappings_arg_tab[] = {
  {
    .name = "mapping_uid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The mapping UID (used in communication with the SkyController)"
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Display name for the user"
  },
};
static struct arsdk_arg SkyController_AxisMappingsState_currentAxisMappings_arg_tab[] = {
  {
    .name = "axis_id",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "The axiscode mapped"
  },
  {
    .name = "mapping_uid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The mapping associated"
  },
};
static struct arsdk_arg SkyController_AxisMappingsState_availableAxisMappings_arg_tab[] = {
  {
    .name = "mapping_uid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The mapping UID (used in communication with the SkyController)"
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Display name for the user"
  },
};
static struct arsdk_arg SkyController_AxisFiltersState_currentAxisFilters_arg_tab[] = {
  {
    .name = "axis_id",
    .type = ARSDK_ARG_TYPE_I32,
    .enums = NULL,
    .nenums = 0,
    .comment = "The axiscode filtered"
  },
  {
    .name = "filter_uid_or_builder",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The filter associated"
  },
};
static struct arsdk_arg SkyController_AxisFiltersState_presetAxisFilters_arg_tab[] = {
  {
    .name = "filter_uid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The filter UID (used in communication with the SkyController)"
  },
  {
    .name = "name",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Display name for the user"
  },
};
static struct arsdk_enum SkyController_CoPilotingState_pilotingSource_source_enum_tab[] = {
  {
    .name = "SkyController",
    .value = ARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE_SKYCONTROLLER,
    .comment = "Use the SkyController joysticks"
  },
  {
    .name = "Controller",
    .value = ARCOMMANDS_SKYCONTROLLER_COPILOTINGSTATE_PILOTINGSOURCE_SOURCE_CONTROLLER,
    .comment = "Use the Tablet (or smartphone, or whatever) controls\nDisables the SkyController joysticks"
  },
};
static struct arsdk_arg SkyController_CoPilotingState_pilotingSource_arg_tab[] = {
  {
    .name = "source",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_CoPilotingState_pilotingSource_source_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_CoPilotingState_pilotingSource_source_enum_tab),
    .comment = "The source"
  },
};
static struct arsdk_enum SkyController_CalibrationState_MagnetoCalibrationState_status_enum_tab[] = {
  {
    .name = "Unreliable",
    .value = ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_UNRELIABLE,
    .comment = "A calibration is needed"
  },
  {
    .name = "Assessing",
    .value = ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_ASSESSING,
    .comment = "A calibration is applied, but still need to be checked"
  },
  {
    .name = "Calibrated",
    .value = ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATE_STATUS_CALIBRATED,
    .comment = "The sensor is properly calibrated"
  },
};
static struct arsdk_arg SkyController_CalibrationState_MagnetoCalibrationState_arg_tab[] = {
  {
    .name = "status",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_CalibrationState_MagnetoCalibrationState_status_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_CalibrationState_MagnetoCalibrationState_status_enum_tab),
    .comment = "The global status of the calibration"
  },
  {
    .name = "X_Quality",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Calibration quality on X axis.\n0 is bad, 255 is perfect"
  },
  {
    .name = "Y_Quality",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Calibration quality on Y axis.\n0 is bad, 255 is perfect"
  },
  {
    .name = "Z_Quality",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Calibration quality on Z axis.\n0 is bad, 255 is perfect"
  },
};
static struct arsdk_arg SkyController_CalibrationState_MagnetoCalibrationQualityUpdatesState_arg_tab[] = {
  {
    .name = "enabled",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flag (is the feature enabled).\n1 = The skycontroller sends updated when quality is updated\n0 = The skycontroller only sent updated when state is updated"
  },
};
static struct arsdk_enum SkyController_CalibrationState_MagnetoCalibrationStateV2_state_enum_tab[] = {
  {
    .name = "NotCalibrated",
    .value = ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_NOTCALIBRATED,
    .comment = "A calibration is needed"
  },
  {
    .name = "CalibratingX",
    .value = ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_CALIBRATINGX,
    .comment = "A calibration is in progress on the X axis"
  },
  {
    .name = "CalibratingY",
    .value = ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_CALIBRATINGY,
    .comment = "A calibration is in progress on the Y axis"
  },
  {
    .name = "CalibratingZ",
    .value = ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_CALIBRATINGZ,
    .comment = "A calibration is in progress on the Z axis"
  },
  {
    .name = "Calibrated",
    .value = ARCOMMANDS_SKYCONTROLLER_CALIBRATIONSTATE_MAGNETOCALIBRATIONSTATEV2_STATE_CALIBRATED,
    .comment = "The sensor is calibrated"
  },
};
static struct arsdk_arg SkyController_CalibrationState_MagnetoCalibrationStateV2_arg_tab[] = {
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_CalibrationState_MagnetoCalibrationStateV2_state_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_CalibrationState_MagnetoCalibrationStateV2_state_enum_tab),
    .comment = "The calibration state"
  },
};
static struct arsdk_enum SkyController_CommonEventState_Shutdown_reason_enum_tab[] = {
  {
    .name = "poweroff_button",
    .value = ARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON_POWEROFF_BUTTON,
    .comment = "The power off button has been pressed"
  },
  {
    .name = "update",
    .value = ARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON_UPDATE,
    .comment = "The product is going to be updated"
  },
  {
    .name = "low_battery",
    .value = ARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON_LOW_BATTERY,
    .comment = "The product battery is too low."
  },
  {
    .name = "factory_reset",
    .value = ARCOMMANDS_SKYCONTROLLER_COMMONEVENTSTATE_SHUTDOWN_REASON_FACTORY_RESET,
    .comment = "The product is going to be factory reset"
  },
};
static struct arsdk_arg SkyController_CommonEventState_Shutdown_arg_tab[] = {
  {
    .name = "reason",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = SkyController_CommonEventState_Shutdown_reason_enum_tab,
    .nenums = ARRAY_SIZE(SkyController_CommonEventState_Shutdown_reason_enum_tab),
    .comment = "Reason of the shutdown of the product"
  },
};
static struct arsdk_cmd SkyController_WifiState_cmd_tab[] = {
  {
    .name = "WifiList",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFISTATE_CMD_WIFILIST,
    .args = SkyController_WifiState_WifiList_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_WifiState_WifiList_arg_tab),
    .comment = "Visible wifi networks"
  },
  {
    .name = "ConnexionChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFISTATE_CMD_CONNEXIONCHANGED,
    .args = SkyController_WifiState_ConnexionChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_WifiState_ConnexionChanged_arg_tab),
    .comment = "Wifi connection status"
  },
  {
    .name = "WifiAuthChannelListChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFISTATE_CMD_WIFIAUTHCHANNELLISTCHANGED,
    .args = SkyController_WifiState_WifiAuthChannelListChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_WifiState_WifiAuthChannelListChanged_arg_tab),
    .comment = "Authorized channel list"
  },
  {
    .name = "AllWifiAuthChannelChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFISTATE_CMD_ALLWIFIAUTHCHANNELCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "Authorized channel list complete"
  },
  {
    .name = "WifiSignalChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFISTATE_CMD_WIFISIGNALCHANGED,
    .args = SkyController_WifiState_WifiSignalChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_WifiState_WifiSignalChanged_arg_tab),
    .comment = "Strength of the wifi signal"
  },
  {
    .name = "WifiAuthChannelListChangedV2",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFISTATE_CMD_WIFIAUTHCHANNELLISTCHANGEDV2,
    .args = SkyController_WifiState_WifiAuthChannelListChangedV2_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_WifiState_WifiAuthChannelListChangedV2_arg_tab),
    .comment = "Authorized channel list"
  },
  {
    .name = "WifiCountryChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFISTATE_CMD_WIFICOUNTRYCHANGED,
    .args = SkyController_WifiState_WifiCountryChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_WifiState_WifiCountryChanged_arg_tab),
    .comment = "Wifi country changed"
  },
  {
    .name = "WifiEnvironmentChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFISTATE_CMD_WIFIENVIRONMENTCHANGED,
    .args = SkyController_WifiState_WifiEnvironmentChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_WifiState_WifiEnvironmentChanged_arg_tab),
    .comment = "Wifi environment changed"
  },
};
static struct arsdk_cmd SkyController_Wifi_cmd_tab[] = {
  {
    .name = "RequestWifiList",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFI_CMD_REQUESTWIFILIST,
    .args = NULL,
    .nargs = 0,
    .comment = "Request visible wifi list"
  },
  {
    .name = "RequestCurrentWifi",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFI_CMD_REQUESTCURRENTWIFI,
    .args = NULL,
    .nargs = 0,
    .comment = "Request current wifi informations"
  },
  {
    .name = "ConnectToWifi",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFI_CMD_CONNECTTOWIFI,
    .args = SkyController_Wifi_ConnectToWifi_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_Wifi_ConnectToWifi_arg_tab),
    .comment = "Connect the SkyController to a wifi network"
  },
  {
    .name = "ForgetWifi",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFI_CMD_FORGETWIFI,
    .args = SkyController_Wifi_ForgetWifi_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_Wifi_ForgetWifi_arg_tab),
    .comment = "Forget a wifi network"
  },
  {
    .name = "WifiAuthChannel",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_WIFI_CMD_WIFIAUTHCHANNEL,
    .args = NULL,
    .nargs = 0,
    .comment = "Request the list of authorized channels"
  },
};
static struct arsdk_cmd SkyController_Device_cmd_tab[] = {
  {
    .name = "RequestDeviceList",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_DEVICE_CMD_REQUESTDEVICELIST,
    .args = NULL,
    .nargs = 0,
    .comment = "Request the list of visible devices"
  },
  {
    .name = "RequestCurrentDevice",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_DEVICE_CMD_REQUESTCURRENTDEVICE,
    .args = NULL,
    .nargs = 0,
    .comment = "Request current device informations"
  },
  {
    .name = "ConnectToDevice",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_DEVICE_CMD_CONNECTTODEVICE,
    .args = SkyController_Device_ConnectToDevice_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_Device_ConnectToDevice_arg_tab),
    .comment = "Connect the SkyController to a given device"
  },
};
static struct arsdk_cmd SkyController_DeviceState_cmd_tab[] = {
  {
    .name = "DeviceList",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_DEVICESTATE_CMD_DEVICELIST,
    .args = SkyController_DeviceState_DeviceList_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_DeviceState_DeviceList_arg_tab),
    .comment = "Visible device"
  },
  {
    .name = "ConnexionChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_DEVICESTATE_CMD_CONNEXIONCHANGED,
    .args = SkyController_DeviceState_ConnexionChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_DeviceState_ConnexionChanged_arg_tab),
    .comment = "Connection status"
  },
};
static struct arsdk_cmd SkyController_Settings_cmd_tab[] = {
  {
    .name = "AllSettings",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SETTINGS_CMD_ALLSETTINGS,
    .args = NULL,
    .nargs = 0,
    .comment = "Ask for all controller's settings"
  },
  {
    .name = "Reset",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SETTINGS_CMD_RESET,
    .args = NULL,
    .nargs = 0,
    .comment = "Reset all settings"
  },
};
static struct arsdk_cmd SkyController_SettingsState_cmd_tab[] = {
  {
    .name = "AllSettingsChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SETTINGSSTATE_CMD_ALLSETTINGSCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "AllSettings changed"
  },
  {
    .name = "ResetChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SETTINGSSTATE_CMD_RESETCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "Settings were reset"
  },
  {
    .name = "ProductSerialChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SETTINGSSTATE_CMD_PRODUCTSERIALCHANGED,
    .args = SkyController_SettingsState_ProductSerialChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_SettingsState_ProductSerialChanged_arg_tab),
    .comment = "Product serial"
  },
  {
    .name = "ProductVariantChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SETTINGSSTATE_CMD_PRODUCTVARIANTCHANGED,
    .args = SkyController_SettingsState_ProductVariantChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_SettingsState_ProductVariantChanged_arg_tab),
    .comment = "Variant of the SkyController"
  },
  {
    .name = "ProductVersionChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SETTINGSSTATE_CMD_PRODUCTVERSIONCHANGED,
    .args = SkyController_SettingsState_ProductVersionChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_SettingsState_ProductVersionChanged_arg_tab),
    .comment = "Product versions"
  },
  {
    .name = "CPUID",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SETTINGSSTATE_CMD_CPUID,
    .args = SkyController_SettingsState_CPUID_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_SettingsState_CPUID_arg_tab),
    .comment = "Product main CPU id"
  },
};
static struct arsdk_cmd SkyController_Common_cmd_tab[] = {
  {
    .name = "AllStates",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_COMMON_CMD_ALLSTATES,
    .args = NULL,
    .nargs = 0,
    .comment = "Ask for all controller's states."
  },
};
static struct arsdk_cmd SkyController_CommonState_cmd_tab[] = {
  {
    .name = "AllStatesChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_COMMONSTATE_CMD_ALLSTATESCHANGED,
    .args = NULL,
    .nargs = 0,
    .comment = "AllStates changed"
  },
};
static struct arsdk_cmd SkyController_SkyControllerState_cmd_tab[] = {
  {
    .name = "BatteryChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SKYCONTROLLERSTATE_CMD_BATTERYCHANGED,
    .args = SkyController_SkyControllerState_BatteryChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_SkyControllerState_BatteryChanged_arg_tab),
    .comment = "Battery state changed"
  },
  {
    .name = "GpsFixChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SKYCONTROLLERSTATE_CMD_GPSFIXCHANGED,
    .args = SkyController_SkyControllerState_GpsFixChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_SkyControllerState_GpsFixChanged_arg_tab),
    .comment = "GPS Fix gained/lost"
  },
  {
    .name = "GpsPositionChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SKYCONTROLLERSTATE_CMD_GPSPOSITIONCHANGED,
    .args = SkyController_SkyControllerState_GpsPositionChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_SkyControllerState_GpsPositionChanged_arg_tab),
    .comment = "SkyController position/heading changed"
  },
  {
    .name = "BatteryState",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SKYCONTROLLERSTATE_CMD_BATTERYSTATE,
    .args = SkyController_SkyControllerState_BatteryState_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_SkyControllerState_BatteryState_arg_tab),
    .comment = "Battery state"
  },
  {
    .name = "AttitudeChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_SKYCONTROLLERSTATE_CMD_ATTITUDECHANGED,
    .args = SkyController_SkyControllerState_AttitudeChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_SkyControllerState_AttitudeChanged_arg_tab),
    .comment = "Attitude"
  },
};
static struct arsdk_cmd SkyController_AccessPointSettings_cmd_tab[] = {
  {
    .name = "AccessPointSSID",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_ACCESSPOINTSETTINGS_CMD_ACCESSPOINTSSID,
    .args = SkyController_AccessPointSettings_AccessPointSSID_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AccessPointSettings_AccessPointSSID_arg_tab),
    .comment = "Set access point SSID"
  },
  {
    .name = "AccessPointChannel",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_ACCESSPOINTSETTINGS_CMD_ACCESSPOINTCHANNEL,
    .args = SkyController_AccessPointSettings_AccessPointChannel_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AccessPointSettings_AccessPointChannel_arg_tab),
    .comment = "Set access point channel"
  },
  {
    .name = "WifiSelection",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_ACCESSPOINTSETTINGS_CMD_WIFISELECTION,
    .args = SkyController_AccessPointSettings_WifiSelection_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AccessPointSettings_WifiSelection_arg_tab),
    .comment = "Set access point band/channel"
  },
  {
    .name = "WifiSecurity",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_ACCESSPOINTSETTINGS_CMD_WIFISECURITY,
    .args = SkyController_AccessPointSettings_WifiSecurity_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AccessPointSettings_WifiSecurity_arg_tab),
    .comment = "Set access point security"
  },
};
static struct arsdk_cmd SkyController_AccessPointSettingsState_cmd_tab[] = {
  {
    .name = "AccessPointSSIDChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_CMD_ACCESSPOINTSSIDCHANGED,
    .args = SkyController_AccessPointSettingsState_AccessPointSSIDChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AccessPointSettingsState_AccessPointSSIDChanged_arg_tab),
    .comment = "The access point SSID was changed"
  },
  {
    .name = "AccessPointChannelChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_CMD_ACCESSPOINTCHANNELCHANGED,
    .args = SkyController_AccessPointSettingsState_AccessPointChannelChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AccessPointSettingsState_AccessPointChannelChanged_arg_tab),
    .comment = "The access point channel was changed"
  },
  {
    .name = "WifiSelectionChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_CMD_WIFISELECTIONCHANGED,
    .args = SkyController_AccessPointSettingsState_WifiSelectionChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AccessPointSettingsState_WifiSelectionChanged_arg_tab),
    .comment = "The access point channel/band was changed"
  },
  {
    .name = "WifiSecurityChanged",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_ACCESSPOINTSETTINGSSTATE_CMD_WIFISECURITYCHANGED,
    .args = SkyController_AccessPointSettingsState_WifiSecurityChanged_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AccessPointSettingsState_WifiSecurityChanged_arg_tab),
    .comment = "The access point security was changed"
  },
};
static struct arsdk_cmd SkyController_Camera_cmd_tab[] = {
  {
    .name = "ResetOrientation",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_CAMERA_CMD_RESETORIENTATION,
    .args = NULL,
    .nargs = 0,
    .comment = "Reset the camera orientation"
  },
};
static struct arsdk_cmd SkyController_GamepadInfos_cmd_tab[] = {
  {
    .name = "getGamepadControls",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_GAMEPADINFOS_CMD_GETGAMEPADCONTROLS,
    .args = NULL,
    .nargs = 0,
    .comment = "Get the SkyController buttons and axis list"
  },
};
static struct arsdk_cmd SkyController_GamepadInfosState_cmd_tab[] = {
  {
    .name = "gamepadControl",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_GAMEPADINFOSSTATE_CMD_GAMEPADCONTROL,
    .args = SkyController_GamepadInfosState_gamepadControl_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_GamepadInfosState_gamepadControl_arg_tab),
    .comment = "Gamepad control description"
  },
  {
    .name = "allGamepadControlsSent",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_GAMEPADINFOSSTATE_CMD_ALLGAMEPADCONTROLSSENT,
    .args = NULL,
    .nargs = 0,
    .comment = "End of the GamepadControl list"
  },
};
static struct arsdk_cmd SkyController_ButtonMappings_cmd_tab[] = {
  {
    .name = "getCurrentButtonMappings",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_BUTTONMAPPINGS_CMD_GETCURRENTBUTTONMAPPINGS,
    .args = NULL,
    .nargs = 0,
    .comment = "Get the current button mappings"
  },
  {
    .name = "getAvailableButtonMappings",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_BUTTONMAPPINGS_CMD_GETAVAILABLEBUTTONMAPPINGS,
    .args = NULL,
    .nargs = 0,
    .comment = "Get the available button mappings"
  },
  {
    .name = "setButtonMapping",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_BUTTONMAPPINGS_CMD_SETBUTTONMAPPING,
    .args = SkyController_ButtonMappings_setButtonMapping_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_ButtonMappings_setButtonMapping_arg_tab),
    .comment = "Set a mapping for a button"
  },
  {
    .name = "defaultButtonMapping",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_BUTTONMAPPINGS_CMD_DEFAULTBUTTONMAPPING,
    .args = NULL,
    .nargs = 0,
    .comment = "Reset the button mappings to the default value"
  },
};
static struct arsdk_cmd SkyController_ButtonMappingsState_cmd_tab[] = {
  {
    .name = "currentButtonMappings",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_BUTTONMAPPINGSSTATE_CMD_CURRENTBUTTONMAPPINGS,
    .args = SkyController_ButtonMappingsState_currentButtonMappings_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_ButtonMappingsState_currentButtonMappings_arg_tab),
    .comment = "Button to Action mapping"
  },
  {
    .name = "allCurrentButtonMappingsSent",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_BUTTONMAPPINGSSTATE_CMD_ALLCURRENTBUTTONMAPPINGSSENT,
    .args = NULL,
    .nargs = 0,
    .comment = "End of the button mapping list"
  },
  {
    .name = "availableButtonMappings",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_BUTTONMAPPINGSSTATE_CMD_AVAILABLEBUTTONMAPPINGS,
    .args = SkyController_ButtonMappingsState_availableButtonMappings_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_ButtonMappingsState_availableButtonMappings_arg_tab),
    .comment = "Action mappable on a button"
  },
  {
    .name = "allAvailableButtonsMappingsSent",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_BUTTONMAPPINGSSTATE_CMD_ALLAVAILABLEBUTTONSMAPPINGSSENT,
    .args = NULL,
    .nargs = 0,
    .comment = "End of the available button actions list"
  },
};
static struct arsdk_cmd SkyController_AxisMappings_cmd_tab[] = {
  {
    .name = "getCurrentAxisMappings",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISMAPPINGS_CMD_GETCURRENTAXISMAPPINGS,
    .args = NULL,
    .nargs = 0,
    .comment = "Get the current axis mappings"
  },
  {
    .name = "getAvailableAxisMappings",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISMAPPINGS_CMD_GETAVAILABLEAXISMAPPINGS,
    .args = NULL,
    .nargs = 0,
    .comment = "Get the available axis mappings"
  },
  {
    .name = "setAxisMapping",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISMAPPINGS_CMD_SETAXISMAPPING,
    .args = SkyController_AxisMappings_setAxisMapping_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AxisMappings_setAxisMapping_arg_tab),
    .comment = "Set a mapping for a axis"
  },
  {
    .name = "defaultAxisMapping",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISMAPPINGS_CMD_DEFAULTAXISMAPPING,
    .args = NULL,
    .nargs = 0,
    .comment = "Reset the axis mappings to the default value"
  },
};
static struct arsdk_cmd SkyController_AxisMappingsState_cmd_tab[] = {
  {
    .name = "currentAxisMappings",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISMAPPINGSSTATE_CMD_CURRENTAXISMAPPINGS,
    .args = SkyController_AxisMappingsState_currentAxisMappings_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AxisMappingsState_currentAxisMappings_arg_tab),
    .comment = "Axis to Action mapping"
  },
  {
    .name = "allCurrentAxisMappingsSent",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISMAPPINGSSTATE_CMD_ALLCURRENTAXISMAPPINGSSENT,
    .args = NULL,
    .nargs = 0,
    .comment = "End of the axis mapping list"
  },
  {
    .name = "availableAxisMappings",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISMAPPINGSSTATE_CMD_AVAILABLEAXISMAPPINGS,
    .args = SkyController_AxisMappingsState_availableAxisMappings_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AxisMappingsState_availableAxisMappings_arg_tab),
    .comment = "Action mappable on an axis"
  },
  {
    .name = "allAvailableAxisMappingsSent",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISMAPPINGSSTATE_CMD_ALLAVAILABLEAXISMAPPINGSSENT,
    .args = NULL,
    .nargs = 0,
    .comment = "End of the available axis actions list"
  },
};
static struct arsdk_cmd SkyController_AxisFilters_cmd_tab[] = {
  {
    .name = "getCurrentAxisFilters",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISFILTERS_CMD_GETCURRENTAXISFILTERS,
    .args = NULL,
    .nargs = 0,
    .comment = "Get the current axis filters"
  },
  {
    .name = "getPresetAxisFilters",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISFILTERS_CMD_GETPRESETAXISFILTERS,
    .args = NULL,
    .nargs = 0,
    .comment = "Get the available preset axis filters"
  },
  {
    .name = "setAxisFilter",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISFILTERS_CMD_SETAXISFILTER,
    .args = SkyController_AxisFilters_setAxisFilter_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AxisFilters_setAxisFilter_arg_tab),
    .comment = "Set a filter for an axis"
  },
  {
    .name = "defaultAxisFilters",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISFILTERS_CMD_DEFAULTAXISFILTERS,
    .args = NULL,
    .nargs = 0,
    .comment = "Reset the axis filters to the default value"
  },
};
static struct arsdk_cmd SkyController_AxisFiltersState_cmd_tab[] = {
  {
    .name = "currentAxisFilters",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISFILTERSSTATE_CMD_CURRENTAXISFILTERS,
    .args = SkyController_AxisFiltersState_currentAxisFilters_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AxisFiltersState_currentAxisFilters_arg_tab),
    .comment = "A filter set on an axis"
  },
  {
    .name = "allCurrentFiltersSent",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISFILTERSSTATE_CMD_ALLCURRENTFILTERSSENT,
    .args = NULL,
    .nargs = 0,
    .comment = "End of the axis filters list"
  },
  {
    .name = "presetAxisFilters",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISFILTERSSTATE_CMD_PRESETAXISFILTERS,
    .args = SkyController_AxisFiltersState_presetAxisFilters_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_AxisFiltersState_presetAxisFilters_arg_tab),
    .comment = "Predefined axis filters"
  },
  {
    .name = "allPresetFiltersSent",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_AXISFILTERSSTATE_CMD_ALLPRESETFILTERSSENT,
    .args = NULL,
    .nargs = 0,
    .comment = "End of the preset axis filters list"
  },
};
static struct arsdk_cmd SkyController_CoPiloting_cmd_tab[] = {
  {
    .name = "setPilotingSource",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_COPILOTING_CMD_SETPILOTINGSOURCE,
    .args = SkyController_CoPiloting_setPilotingSource_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_CoPiloting_setPilotingSource_arg_tab),
    .comment = "Set piloting source"
  },
};
static struct arsdk_cmd SkyController_CoPilotingState_cmd_tab[] = {
  {
    .name = "pilotingSource",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_COPILOTINGSTATE_CMD_PILOTINGSOURCE,
    .args = SkyController_CoPilotingState_pilotingSource_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_CoPilotingState_pilotingSource_arg_tab),
    .comment = "Piloting source"
  },
};
static struct arsdk_cmd SkyController_Calibration_cmd_tab[] = {
  {
    .name = "enableMagnetoCalibrationQualityUpdates",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_CALIBRATION_CMD_ENABLEMAGNETOCALIBRATIONQUALITYUPDATES,
    .args = SkyController_Calibration_enableMagnetoCalibrationQualityUpdates_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_Calibration_enableMagnetoCalibrationQualityUpdates_arg_tab),
    .comment = "Enable Magneto calibration quality updates"
  },
  {
    .name = "StartCalibration",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_CALIBRATION_CMD_STARTCALIBRATION,
    .args = NULL,
    .nargs = 0,
    .comment = "Start magneto calibration"
  },
  {
    .name = "AbortCalibration",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_CALIBRATION_CMD_ABORTCALIBRATION,
    .args = NULL,
    .nargs = 0,
    .comment = "Abort a running magneto calibration"
  },
};
static struct arsdk_cmd SkyController_CalibrationState_cmd_tab[] = {
  {
    .name = "MagnetoCalibrationState",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_CALIBRATIONSTATE_CMD_MAGNETOCALIBRATIONSTATE,
    .args = SkyController_CalibrationState_MagnetoCalibrationState_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_CalibrationState_MagnetoCalibrationState_arg_tab),
    .comment = "Magneto calibration state"
  },
  {
    .name = "MagnetoCalibrationQualityUpdatesState",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_CALIBRATIONSTATE_CMD_MAGNETOCALIBRATIONQUALITYUPDATESSTATE,
    .args = SkyController_CalibrationState_MagnetoCalibrationQualityUpdatesState_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_CalibrationState_MagnetoCalibrationQualityUpdatesState_arg_tab),
    .comment = "Magnetometer Calibration Quality Update State"
  },
  {
    .name = "MagnetoCalibrationStateV2",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_CALIBRATIONSTATE_CMD_MAGNETOCALIBRATIONSTATEV2,
    .args = SkyController_CalibrationState_MagnetoCalibrationStateV2_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_CalibrationState_MagnetoCalibrationStateV2_arg_tab),
    .comment = "Magneto calibration state"
  },
};
static struct arsdk_cmd SkyController_ButtonEvents_cmd_tab[] = {
  {
    .name = "Settings",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_BUTTONEVENTS_CMD_SETTINGS,
    .args = NULL,
    .nargs = 0,
    .comment = "Settings button pressed"
  },
};
static struct arsdk_cmd SkyController_Factory_cmd_tab[] = {
  {
    .name = "Reset",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_FACTORY_CMD_RESET,
    .args = NULL,
    .nargs = 0,
    .comment = "Reset the SkyController to its factory settings"
  },
};
static struct arsdk_cmd SkyController_CommonEventState_cmd_tab[] = {
  {
    .name = "Shutdown",
    .id = ARCOMMANDS_ID_SKYCONTROLLER_COMMONEVENTSTATE_CMD_SHUTDOWN,
    .args = SkyController_CommonEventState_Shutdown_arg_tab,
    .nargs = ARRAY_SIZE(SkyController_CommonEventState_Shutdown_arg_tab),
    .comment = "Skycontroller will disconnect because of shutdown"
  },
};
static struct arsdk_class SkyController_class_tab[] = {
  {
    .name = "WifiState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_WIFISTATE,
    .cmds = SkyController_WifiState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_WifiState_cmd_tab),
    .comment = "Wifi state"
  },
  {
    .name = "Wifi",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_WIFI,
    .cmds = SkyController_Wifi_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_Wifi_cmd_tab),
    .comment = "Wifi"
  },
  {
    .name = "Device",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_DEVICE,
    .cmds = SkyController_Device_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_Device_cmd_tab),
    .comment = "Device Connection commands"
  },
  {
    .name = "DeviceState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_DEVICESTATE,
    .cmds = SkyController_DeviceState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_DeviceState_cmd_tab),
    .comment = "Device state"
  },
  {
    .name = "Settings",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_SETTINGS,
    .cmds = SkyController_Settings_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_Settings_cmd_tab),
    .comment = "Settings commands"
  },
  {
    .name = "SettingsState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_SETTINGSSTATE,
    .cmds = SkyController_SettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_SettingsState_cmd_tab),
    .comment = "Settings state from the controller"
  },
  {
    .name = "Common",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_COMMON,
    .cmds = SkyController_Common_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_Common_cmd_tab),
    .comment = "Common commands"
  },
  {
    .name = "CommonState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_COMMONSTATE,
    .cmds = SkyController_CommonState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_CommonState_cmd_tab),
    .comment = "Common state from product"
  },
  {
    .name = "SkyControllerState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_SKYCONTROLLERSTATE,
    .cmds = SkyController_SkyControllerState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_SkyControllerState_cmd_tab),
    .comment = "Sky Controller states"
  },
  {
    .name = "AccessPointSettings",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_ACCESSPOINTSETTINGS,
    .cmds = SkyController_AccessPointSettings_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_AccessPointSettings_cmd_tab),
    .comment = "AccessPoint settings commands"
  },
  {
    .name = "AccessPointSettingsState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_ACCESSPOINTSETTINGSSTATE,
    .cmds = SkyController_AccessPointSettingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_AccessPointSettingsState_cmd_tab),
    .comment = "AccessPoint settings state from product"
  },
  {
    .name = "Camera",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_CAMERA,
    .cmds = SkyController_Camera_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_Camera_cmd_tab),
    .comment = "Ask the drone to move camera"
  },
  {
    .name = "GamepadInfos",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_GAMEPADINFOS,
    .cmds = SkyController_GamepadInfos_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_GamepadInfos_cmd_tab),
    .comment = "Request infos about the gamepad of the SkyController"
  },
  {
    .name = "GamepadInfosState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_GAMEPADINFOSSTATE,
    .cmds = SkyController_GamepadInfosState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_GamepadInfosState_cmd_tab),
    .comment = "Informations about the gamepad of the SkyController"
  },
  {
    .name = "ButtonMappings",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_BUTTONMAPPINGS,
    .cmds = SkyController_ButtonMappings_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_ButtonMappings_cmd_tab),
    .comment = "Controls the button mappings of the SkyController"
  },
  {
    .name = "ButtonMappingsState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_BUTTONMAPPINGSSTATE,
    .cmds = SkyController_ButtonMappingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_ButtonMappingsState_cmd_tab),
    .comment = "State of the button mappings of the SkyController"
  },
  {
    .name = "AxisMappings",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_AXISMAPPINGS,
    .cmds = SkyController_AxisMappings_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_AxisMappings_cmd_tab),
    .comment = "Controls the axis mappings of the SkyController"
  },
  {
    .name = "AxisMappingsState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_AXISMAPPINGSSTATE,
    .cmds = SkyController_AxisMappingsState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_AxisMappingsState_cmd_tab),
    .comment = "State of the axis mappings of the SkyController"
  },
  {
    .name = "AxisFilters",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_AXISFILTERS,
    .cmds = SkyController_AxisFilters_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_AxisFilters_cmd_tab),
    .comment = "Controls the axis filters of the SkyController"
  },
  {
    .name = "AxisFiltersState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_AXISFILTERSSTATE,
    .cmds = SkyController_AxisFiltersState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_AxisFiltersState_cmd_tab),
    .comment = "State of the axis filters of the SkyController"
  },
  {
    .name = "CoPiloting",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_COPILOTING,
    .cmds = SkyController_CoPiloting_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_CoPiloting_cmd_tab),
    .comment = "Configuration of the co-piloting feature"
  },
  {
    .name = "CoPilotingState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_COPILOTINGSTATE,
    .cmds = SkyController_CoPilotingState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_CoPilotingState_cmd_tab),
    .comment = "State of the co-piloting feature"
  },
  {
    .name = "Calibration",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_CALIBRATION,
    .cmds = SkyController_Calibration_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_Calibration_cmd_tab),
    .comment = "Commands related to the SkyController sensors calibration"
  },
  {
    .name = "CalibrationState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_CALIBRATIONSTATE,
    .cmds = SkyController_CalibrationState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_CalibrationState_cmd_tab),
    .comment = "State of the SkyController calibration"
  },
  {
    .name = "ButtonEvents",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_BUTTONEVENTS,
    .cmds = SkyController_ButtonEvents_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_ButtonEvents_cmd_tab),
    .comment = "Events sent on SkyController button presses.\nThese events are sent under certain conditions only."
  },
  {
    .name = "Factory",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_FACTORY,
    .cmds = SkyController_Factory_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_Factory_cmd_tab),
    .comment = "Factory reset commands"
  },
  {
    .name = "CommonEventState",
    .ident = ARCOMMANDS_ID_SKYCONTROLLER_CLASS_COMMONEVENTSTATE,
    .cmds = SkyController_CommonEventState_cmd_tab,
    .ncmds = ARRAY_SIZE(SkyController_CommonEventState_cmd_tab),
    .comment = "Common skycontroller events"
  },
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = NULL,
    .ncmds = 0,
    .comment = ""
  },
};
static struct arsdk_arg thermal_cam_defaultCls_activate_arg_tab[] = {
  {
    .name = "cam_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Thermal camera id, as given in the [connected accessories](#1-33-0) event."
  },
};
static struct arsdk_arg thermal_cam_defaultCls_deactivate_arg_tab[] = {
  {
    .name = "cam_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Thermal camera id, as given in the [connected accessories](#1-33-0) event."
  },
};
static struct arsdk_arg thermal_cam_defaultCls_set_sensitivity_arg_tab[] = {
  {
    .name = "cam_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Thermal camera id, as given in the [connected accessories](#1-33-0) event."
  },
  {
    .name = "range",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Thermal range"
  },
};
static struct arsdk_arg thermal_cam_defaultCls_camera_state_arg_tab[] = {
  {
    .name = "cam_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Thermal camera id, as given in the [connected accessories](#1-33-0) event."
  },
  {
    .name = "state",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Camera state"
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg thermal_cam_defaultCls_sensitivity_arg_tab[] = {
  {
    .name = "cam_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Thermal camera id, as given in the [connected accessories](#1-33-0) event."
  },
  {
    .name = "current_range",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Thermal range"
  },
  {
    .name = "available_ranges",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Thermal range"
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg thermal_cam_defaultCls_calibration_infos_arg_tab[] = {
  {
    .name = "cam_id",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Thermal camera id, as given in the [connected accessories](#1-33-0) event."
  },
  {
    .name = "roll",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Euler angle roll in degree difference between visible cam and thermal cam."
  },
  {
    .name = "pitch",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Euler angle pitch in degree difference between visible cam and thermal cam."
  },
  {
    .name = "yaw",
    .type = ARSDK_ARG_TYPE_FLOAT,
    .enums = NULL,
    .nenums = 0,
    .comment = "Euler angle yaw in degree difference between visible cam and thermal cam."
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_cmd thermal_cam_defaultCls_cmd_tab[] = {
  {
    .name = "activate",
    .id = ARCOMMANDS_ID_THERMAL_CAM_CMD_ACTIVATE,
    .args = thermal_cam_defaultCls_activate_arg_tab,
    .nargs = ARRAY_SIZE(thermal_cam_defaultCls_activate_arg_tab),
    .comment = "Activate a thermal camera"
  },
  {
    .name = "deactivate",
    .id = ARCOMMANDS_ID_THERMAL_CAM_CMD_DEACTIVATE,
    .args = thermal_cam_defaultCls_deactivate_arg_tab,
    .nargs = ARRAY_SIZE(thermal_cam_defaultCls_deactivate_arg_tab),
    .comment = "Deactivate a thermal camera"
  },
  {
    .name = "set_sensitivity",
    .id = ARCOMMANDS_ID_THERMAL_CAM_CMD_SET_SENSITIVITY,
    .args = thermal_cam_defaultCls_set_sensitivity_arg_tab,
    .nargs = ARRAY_SIZE(thermal_cam_defaultCls_set_sensitivity_arg_tab),
    .comment = "Set the thermal cam sensitivity"
  },
  {
    .name = "camera_state",
    .id = ARCOMMANDS_ID_THERMAL_CAM_CMD_CAMERA_STATE,
    .args = thermal_cam_defaultCls_camera_state_arg_tab,
    .nargs = ARRAY_SIZE(thermal_cam_defaultCls_camera_state_arg_tab),
    .comment = "Camera state"
  },
  {
    .name = "sensitivity",
    .id = ARCOMMANDS_ID_THERMAL_CAM_CMD_SENSITIVITY,
    .args = thermal_cam_defaultCls_sensitivity_arg_tab,
    .nargs = ARRAY_SIZE(thermal_cam_defaultCls_sensitivity_arg_tab),
    .comment = "Thermal cam sensitivity"
  },
  {
    .name = "calibration_infos",
    .id = ARCOMMANDS_ID_THERMAL_CAM_CMD_CALIBRATION_INFOS,
    .args = thermal_cam_defaultCls_calibration_infos_arg_tab,
    .nargs = ARRAY_SIZE(thermal_cam_defaultCls_calibration_infos_arg_tab),
    .comment = "Thermal cam calibration informations"
  },
};
static struct arsdk_class thermal_cam_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = thermal_cam_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(thermal_cam_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_arg wifi_defaultCls_scan_arg_tab[] = {
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The band : 2.4 Ghz or 5 Ghz"
  },
};
static struct arsdk_arg wifi_defaultCls_set_ap_channel_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The wifi selection type available"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The band : 2.4 Ghz or 5 Ghz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel you want to select. Used only when type is manual."
  },
};
static struct arsdk_arg wifi_defaultCls_set_security_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The type of wifi security (open, wpa2)"
  },
  {
    .name = "key",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The key to secure the network. Not used if type is open"
  },
  {
    .name = "key_type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Type of the key sent"
  },
};
static struct arsdk_arg wifi_defaultCls_set_country_arg_tab[] = {
  {
    .name = "selection_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Type of country selection"
  },
  {
    .name = "code",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Country code with ISO 3166 format. Not used if automatic is 1."
  },
};
static struct arsdk_arg wifi_defaultCls_set_environment_arg_tab[] = {
  {
    .name = "environment",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Type of environment"
  },
};
static struct arsdk_arg wifi_defaultCls_scanned_item_arg_tab[] = {
  {
    .name = "ssid",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "SSID of the AP"
  },
  {
    .name = "rssi",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "RSSI of the AP."
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The band : 2.4 Ghz or 5 Ghz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Channel of the AP"
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg wifi_defaultCls_authorized_channel_arg_tab[] = {
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The band : 2.4 Ghz or 5 Ghz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel number"
  },
  {
    .name = "environment",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Type of environment"
  },
  {
    .name = "list_flags",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "Flags use by maps and lists"
  },
};
static struct arsdk_arg wifi_defaultCls_ap_channel_changed_arg_tab[] = {
  {
    .name = "type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The wifi selection type available"
  },
  {
    .name = "band",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The band : 2.4 Ghz or 5 Ghz"
  },
  {
    .name = "channel",
    .type = ARSDK_ARG_TYPE_U8,
    .enums = NULL,
    .nenums = 0,
    .comment = "The channel of the drone's access point"
  },
};
static struct arsdk_arg wifi_defaultCls_security_changed_arg_tab[] = {
  {
    .name = "key",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "The key to secure the network. Not used if type is open"
  },
  {
    .name = "key_type",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "The type of wifi security (open, wpa2)"
  },
};
static struct arsdk_arg wifi_defaultCls_country_changed_arg_tab[] = {
  {
    .name = "selection_mode",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "Type of country selection"
  },
  {
    .name = "code",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "Country code with ISO 3166 format, empty string means unknown country."
  },
};
static struct arsdk_arg wifi_defaultCls_environment_changed_arg_tab[] = {
  {
    .name = "environment",
    .type = ARSDK_ARG_TYPE_ENUM,
    .enums = NULL,
    .nenums = 0,
    .comment = "1 if it uses outdoor wifi settings, 0 otherwise\nType of environment"
  },
};
static struct arsdk_arg wifi_defaultCls_rssi_changed_arg_tab[] = {
  {
    .name = "rssi",
    .type = ARSDK_ARG_TYPE_I16,
    .enums = NULL,
    .nenums = 0,
    .comment = "Rssi on the connected wifi network. Rssi values are generally between -30 and -120dBm. The nearest of 0 is the better."
  },
};
static struct arsdk_arg wifi_defaultCls_supported_countries_arg_tab[] = {
  {
    .name = "countries",
    .type = ARSDK_ARG_TYPE_STRING,
    .enums = NULL,
    .nenums = 0,
    .comment = "List of country code in ISO 3166 format separated by \";\""
  },
};
static struct arsdk_cmd wifi_defaultCls_cmd_tab[] = {
  {
    .name = "scan",
    .id = ARCOMMANDS_ID_WIFI_CMD_SCAN,
    .args = wifi_defaultCls_scan_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_scan_arg_tab),
    .comment = "Scan wifi network"
  },
  {
    .name = "update_authorized_channels",
    .id = ARCOMMANDS_ID_WIFI_CMD_UPDATE_AUTHORIZED_CHANNELS,
    .args = NULL,
    .nargs = 0,
    .comment = "Get all available Wifi channels"
  },
  {
    .name = "set_ap_channel",
    .id = ARCOMMANDS_ID_WIFI_CMD_SET_AP_CHANNEL,
    .args = wifi_defaultCls_set_ap_channel_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_set_ap_channel_arg_tab),
    .comment = "Wifi selection"
  },
  {
    .name = "set_security",
    .id = ARCOMMANDS_ID_WIFI_CMD_SET_SECURITY,
    .args = wifi_defaultCls_set_security_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_set_security_arg_tab),
    .comment = "Set the wifi security"
  },
  {
    .name = "set_country",
    .id = ARCOMMANDS_ID_WIFI_CMD_SET_COUNTRY,
    .args = wifi_defaultCls_set_country_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_set_country_arg_tab),
    .comment = "Set the wifi country"
  },
  {
    .name = "set_environment",
    .id = ARCOMMANDS_ID_WIFI_CMD_SET_ENVIRONMENT,
    .args = wifi_defaultCls_set_environment_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_set_environment_arg_tab),
    .comment = "Set indoor/outdoor wifi settings"
  },
  {
    .name = "scanned_item",
    .id = ARCOMMANDS_ID_WIFI_CMD_SCANNED_ITEM,
    .args = wifi_defaultCls_scanned_item_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_scanned_item_arg_tab),
    .comment = "Wifi scan results"
  },
  {
    .name = "authorized_channel",
    .id = ARCOMMANDS_ID_WIFI_CMD_AUTHORIZED_CHANNEL,
    .args = wifi_defaultCls_authorized_channel_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_authorized_channel_arg_tab),
    .comment = "Available channel results"
  },
  {
    .name = "ap_channel_changed",
    .id = ARCOMMANDS_ID_WIFI_CMD_AP_CHANNEL_CHANGED,
    .args = wifi_defaultCls_ap_channel_changed_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_ap_channel_changed_arg_tab),
    .comment = "Wifi selection changed"
  },
  {
    .name = "security_changed",
    .id = ARCOMMANDS_ID_WIFI_CMD_SECURITY_CHANGED,
    .args = wifi_defaultCls_security_changed_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_security_changed_arg_tab),
    .comment = "Wifi security changed"
  },
  {
    .name = "country_changed",
    .id = ARCOMMANDS_ID_WIFI_CMD_COUNTRY_CHANGED,
    .args = wifi_defaultCls_country_changed_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_country_changed_arg_tab),
    .comment = "Wifi country changed"
  },
  {
    .name = "environment_changed",
    .id = ARCOMMANDS_ID_WIFI_CMD_ENVIRONMENT_CHANGED,
    .args = wifi_defaultCls_environment_changed_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_environment_changed_arg_tab),
    .comment = "Outdoor setting changed"
  },
  {
    .name = "rssi_changed",
    .id = ARCOMMANDS_ID_WIFI_CMD_RSSI_CHANGED,
    .args = wifi_defaultCls_rssi_changed_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_rssi_changed_arg_tab),
    .comment = "Rssi changed"
  },
  {
    .name = "supported_countries",
    .id = ARCOMMANDS_ID_WIFI_CMD_SUPPORTED_COUNTRIES,
    .args = wifi_defaultCls_supported_countries_arg_tab,
    .nargs = ARRAY_SIZE(wifi_defaultCls_supported_countries_arg_tab),
    .comment = "Supported countries"
  },
};
static struct arsdk_class wifi_class_tab[] = {
  {
    .name = "defaultCls",
    .ident = 0,
    .cmds = wifi_defaultCls_cmd_tab,
    .ncmds = ARRAY_SIZE(wifi_defaultCls_cmd_tab),
    .comment = ""
  },
};
static struct arsdk_project arsdk_projects[] = {
  {
    .name = "generic",
    .ident = ARCOMMANDS_ID_FEATURE_GENERIC,
    .classes = generic_class_tab,
    .nclasses = ARRAY_SIZE(generic_class_tab),
    .comment = "All generic messages"
  },
  {
    .name = "animation",
    .ident = ARCOMMANDS_ID_FEATURE_ANIMATION,
    .classes = animation_class_tab,
    .nclasses = ARRAY_SIZE(animation_class_tab),
    .comment = "All messages related to the animations"
  },
  {
    .name = "ARDrone3",
    .ident = ARCOMMANDS_ID_FEATURE_ARDRONE3,
    .classes = ARDrone3_class_tab,
    .nclasses = ARRAY_SIZE(ARDrone3_class_tab),
    .comment = "All ARDrone3-only commands"
  },
  {
    .name = "common",
    .ident = ARCOMMANDS_ID_FEATURE_COMMON,
    .classes = common_class_tab,
    .nclasses = ARRAY_SIZE(common_class_tab),
    .comment = "All common commands shared between all projects"
  },
  {
    .name = "controller_info",
    .ident = ARCOMMANDS_ID_FEATURE_CONTROLLER_INFO,
    .classes = controller_info_class_tab,
    .nclasses = ARRAY_SIZE(controller_info_class_tab),
    .comment = "Controller info feature"
  },
  {
    .name = "debug",
    .ident = ARCOMMANDS_ID_FEATURE_DEBUG,
    .classes = debug_class_tab,
    .nclasses = ARRAY_SIZE(debug_class_tab),
    .comment = "All commands/events related to the Wifi"
  },
  {
    .name = "drone_manager",
    .ident = ARCOMMANDS_ID_FEATURE_DRONE_MANAGER,
    .classes = drone_manager_class_tab,
    .nclasses = ARRAY_SIZE(drone_manager_class_tab),
    .comment = "Commands related to the drone_manager feature"
  },
  {
    .name = "follow_me",
    .ident = ARCOMMANDS_ID_FEATURE_FOLLOW_ME,
    .classes = follow_me_class_tab,
    .nclasses = ARRAY_SIZE(follow_me_class_tab),
    .comment = "FollowMe feature"
  },
  {
    .name = "JumpingSumo",
    .ident = ARCOMMANDS_ID_FEATURE_JUMPINGSUMO,
    .classes = JumpingSumo_class_tab,
    .nclasses = ARRAY_SIZE(JumpingSumo_class_tab),
    .comment = "All commands specific to the Jumping Sumo."
  },
  {
    .name = "mapper",
    .ident = ARCOMMANDS_ID_FEATURE_MAPPER,
    .classes = mapper_class_tab,
    .nclasses = ARRAY_SIZE(mapper_class_tab),
    .comment = "Key mapper for remote controllers"
  },
  {
    .name = "mapper_mini",
    .ident = ARCOMMANDS_ID_FEATURE_MAPPER_MINI,
    .classes = mapper_mini_class_tab,
    .nclasses = ARRAY_SIZE(mapper_mini_class_tab),
    .comment = "Key mapper for minidrones"
  },
  {
    .name = "MiniDrone",
    .ident = ARCOMMANDS_ID_FEATURE_MINIDRONE,
    .classes = MiniDrone_class_tab,
    .nclasses = ARRAY_SIZE(MiniDrone_class_tab),
    .comment = "All MiniDrone-only commands"
  },
  {
    .name = "powerup",
    .ident = ARCOMMANDS_ID_FEATURE_POWERUP,
    .classes = powerup_class_tab,
    .nclasses = ARRAY_SIZE(powerup_class_tab),
    .comment = "All commands specific to the Power Up."
  },
  {
    .name = "rc",
    .ident = ARCOMMANDS_ID_FEATURE_RC,
    .classes = rc_class_tab,
    .nclasses = ARRAY_SIZE(rc_class_tab),
    .comment = "All commands/events related to Calibration and Mapping of RadioCommands"
  },
  {
    .name = "sequoia_cam",
    .ident = ARCOMMANDS_ID_FEATURE_SEQUOIA_CAM,
    .classes = sequoia_cam_class_tab,
    .nclasses = ARRAY_SIZE(sequoia_cam_class_tab),
    .comment = "Sequoia camera accessory feature"
  },
  {
    .name = "SkyController",
    .ident = ARCOMMANDS_ID_FEATURE_SKYCONTROLLER,
    .classes = SkyController_class_tab,
    .nclasses = ARRAY_SIZE(SkyController_class_tab),
    .comment = "All SkyController-only commands"
  },
  {
    .name = "thermal_cam",
    .ident = ARCOMMANDS_ID_FEATURE_THERMAL_CAM,
    .classes = thermal_cam_class_tab,
    .nclasses = ARRAY_SIZE(thermal_cam_class_tab),
    .comment = "Thermal camera accessory feature"
  },
  {
    .name = "wifi",
    .ident = ARCOMMANDS_ID_FEATURE_WIFI,
    .classes = wifi_class_tab,
    .nclasses = ARRAY_SIZE(wifi_class_tab),
    .comment = "All commands/events related to the Wifi"
  },
};
static const unsigned int arsdk_nprojects = ARRAY_SIZE(arsdk_projects);
#endif /* _ARSDK_ARCOMMANDS_TREE_H */
